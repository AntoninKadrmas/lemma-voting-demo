/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/assets/{id}": {
    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    post: operations["login"];
  };
  "/auth/refresh": {
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /**
     * Log Out
     * @description Log Out
     */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    get: operations["oauthProvider"];
  };
  "/schema/snapshot": {
    /**
     * Retrieve Schema Snapshot
     * @description Retrieve the current schema. This endpoint is only available to admin users.
     */
    get: operations["schemaSnapshot"];
  };
  "/schema/apply": {
    /**
     * Apply Schema Difference
     * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
     */
    post: operations["schemaApply"];
  };
  "/schema/diff": {
    /**
     * Retrieve Schema Difference
     * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
     */
    post: operations["schemaDiff"];
  };
  "/server/info": {
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    get: operations["ping"];
  };
  "/utils/hash/generate": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-generate"];
  };
  "/utils/hash/verify": {
    /**
     * Hash a string
     * @description Generate a hash for a given string.
     */
    post: operations["hash-verify"];
  };
  "/utils/sort/{collection}": {
    /**
     * Sort Items
     * @description Re-sort items in collection based on start and to value of item
     */
    post: operations["sort"];
  };
  "/utils/import/{collection}": {
    /**
     * Import Items
     * @description Import multiple records from a JSON or CSV file into a collection.
     */
    post: operations["import"];
  };
  "/utils/export/{collection}": {
    /**
     * Export Items
     * @description Export a larger data set to a file in the File Library
     */
    post: operations["export"];
  };
  "/utils/cache/clear": {
    /**
     * Clear Cache
     * @description Resets both the data and schema cache of Directus.
     */
    post: operations["clear-cache"];
  };
  "/utils/random/string": {
    /**
     * Get a Random String
     * @description Returns a random string of given length.
     */
    get: operations["random"];
  };
  "/activity": {
    /**
     * List Activity Actions
     * @description Returns a list of activity actions.
     */
    get: operations["getActivities"];
  };
  "/activity/{id}": {
    /**
     * Retrieve an Activity Action
     * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
     */
    get: operations["getActivity"];
  };
  "/permissions": {
    /**
     * List Permissions
     * @description List all permissions.
     */
    get: operations["getPermissions"];
    /**
     * Create a Permission
     * @description Create a new permission.
     */
    post: operations["createPermission"];
    /**
     * Delete Multiple Permissions
     * @description Delete multiple existing permissions.
     */
    delete: operations["deletePermissions"];
    /**
     * Update Multiple Permissions
     * @description Update multiple permissions at the same time.
     */
    patch: operations["updatePermissions"];
  };
  "/permissions/me": {
    /**
     * List My Permissions
     * @description List the permissions that apply to the current user.
     */
    get: operations["getMyPermissions"];
  };
  "/permissions/{id}": {
    /**
     * Retrieve a Permission
     * @description Retrieve a single permissions object by unique identifier.
     */
    get: operations["getPermission"];
    /**
     * Delete a Permission
     * @description Delete an existing permission
     */
    delete: operations["deletePermission"];
    /**
     * Update a Permission
     * @description Update an existing permission
     */
    patch: operations["updatePermission"];
  };
  "/fields": {
    /**
     * List All Fields
     * @description Returns a list of the fields available in the project.
     */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /**
     * List Fields in Collection
     * @description Returns a list of the fields available in the given collection.
     */
    get: operations["getCollectionFields"];
    /**
     * Create Field in Collection
     * @description Create a new field in a given collection.
     */
    post: operations["createField"];
  };
  "/fields/{collection}/{id}": {
    /**
     * Retrieve a Field
     * @description Retrieves the details of a single field in a given collection.
     */
    get: operations["getCollectionField"];
    /**
     * Delete a Field
     * @description Delete an existing field.
     */
    delete: operations["deleteField"];
    /**
     * Update a Field
     * @description Update an existing field.
     */
    patch: operations["updateField"];
  };
  "/files": {
    /**
     * List Files
     * @description List the files.
     */
    get: operations["getFiles"];
    /**
     * Create a File
     * @description Create a new file
     */
    post: operations["createFile"];
    /**
     * Delete Multiple Files
     * @description Delete multiple existing files.
     */
    delete: operations["deleteFiles"];
    /**
     * Update Multiple Files
     * @description Update multiple files at the same time.
     */
    patch: operations["updateFiles"];
  };
  "/files/{id}": {
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    get: operations["getFile"];
    /**
     * Delete a File
     * @description Delete an existing file.
     */
    delete: operations["deleteFile"];
    /**
     * Update a File
     * @description Update an existing file, and/or replace it's file contents.
     */
    patch: operations["updateFile"];
  };
  "/collections": {
    /**
     * List Collections
     * @description Returns a list of the collections available in the project.
     */
    get: operations["getCollections"];
    /**
     * Create a Collection
     * @description Create a new collection in Directus.
     */
    post: operations["createCollection"];
  };
  "/collections/{id}": {
    /**
     * Retrieve a Collection
     * @description Retrieves the details of a single collection.
     */
    get: operations["getCollection"];
    /**
     * Delete a Collection
     * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
     */
    delete: operations["deleteCollection"];
    /**
     * Update a Collection
     * @description Update an existing collection.
     */
    patch: operations["updateCollection"];
  };
  "/folders": {
    /**
     * List Folders
     * @description List the folders.
     */
    get: operations["getFolders"];
    /**
     * Create a Folder
     * @description Create a new folder.
     */
    post: operations["createFolder"];
    /**
     * Delete Multiple Folders
     * @description Delete multiple existing folders.
     */
    delete: operations["deleteFolders"];
    /**
     * Update Multiple Folders
     * @description Update multiple folders at the same time.
     */
    patch: operations["updateFolders"];
  };
  "/folders/{id}": {
    /**
     * Retrieve a Folder
     * @description Retrieve a single folder by unique identifier.
     */
    get: operations["getFolder"];
    /**
     * Delete a Folder
     * @description Delete an existing folder
     */
    delete: operations["deleteFolder"];
    /**
     * Update a Folder
     * @description Update an existing folder
     */
    patch: operations["updateFolder"];
  };
  "/items/film_translations": {
    /**
     * List Items
     * @description List the film_translations items.
     */
    get: operations["readItemsFilmTranslations"];
    /**
     * Create an Item
     * @description Create a new film_translations item.
     */
    post: operations["createItemsFilmTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_translations items.
     */
    delete: operations["deleteItemsFilmTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple film_translations items at the same time.
     */
    patch: operations["updateItemsFilmTranslations"];
  };
  "/items/film_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_translations item by unique identifier.
     */
    get: operations["readSingleItemsFilmTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing film_translations item.
     */
    delete: operations["deleteSingleItemsFilmTranslations"];
    /**
     * Update an Item
     * @description Update an existing film_translations item.
     */
    patch: operations["updateSingleItemsFilmTranslations"];
  };
  "/roles": {
    /**
     * List Roles
     * @description List the roles.
     */
    get: operations["getRoles"];
    /**
     * Create a Role
     * @description Create a new role.
     */
    post: operations["createRole"];
    /**
     * Delete Multiple Roles
     * @description Delete multiple existing roles.
     */
    delete: operations["deleteRoles"];
    /**
     * Update Multiple Roles
     * @description Update multiple roles at the same time.
     */
    patch: operations["updateRoles"];
  };
  "/roles/{id}": {
    /**
     * Retrieve a Role
     * @description Retrieve a single role by unique identifier.
     */
    get: operations["getRole"];
    /**
     * Delete a Role
     * @description Delete an existing role
     */
    delete: operations["deleteRole"];
    /**
     * Update a Role
     * @description Update an existing role
     */
    patch: operations["updateRole"];
  };
  "/presets": {
    /**
     * List Presets
     * @description List the presets.
     */
    get: operations["getPresets"];
    /**
     * Create a Preset
     * @description Create a new preset.
     */
    post: operations["createPreset"];
    /**
     * Delete Multiple Presets
     * @description Delete multiple existing presets.
     */
    delete: operations["deletePresets"];
    /**
     * Update Multiple Presets
     * @description Update multiple presets at the same time.
     */
    patch: operations["updatePresets"];
  };
  "/presets/{id}": {
    /**
     * Retrieve a Preset
     * @description Retrieve a single preset by unique identifier.
     */
    get: operations["getPreset"];
    /**
     * Delete a Preset
     * @description Delete an existing preset.
     */
    delete: operations["deletePreset"];
    /**
     * Update a Preset
     * @description Update an existing preset.
     */
    patch: operations["updatePreset"];
  };
  "/users": {
    /**
     * List Users
     * @description List the users.
     */
    get: operations["getUsers"];
    /**
     * Create a User
     * @description Create a new user.
     */
    post: operations["createUser"];
    /**
     * Delete Multiple Users
     * @description Delete multiple existing users.
     */
    delete: operations["deleteUsers"];
    /**
     * Update Multiple Users
     * @description Update multiple users at the same time.
     */
    patch: operations["updateUsers"];
  };
  "/users/{id}": {
    /**
     * Retrieve a User
     * @description Retrieve a single user by unique identifier.
     */
    get: operations["getUser"];
    /**
     * Delete a User
     * @description Delete an existing user
     */
    delete: operations["deleteUser"];
    /**
     * Update a User
     * @description Update an existing user
     */
    patch: operations["updateUser"];
  };
  "/users/invite": {
    /**
     * Invite User(s)
     * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
     */
    post: operations["invite"];
  };
  "/users/invite/accept": {
    /**
     * Accept User Invite
     * @description Accepts and enables an invited user using a JWT invitation token.
     */
    post: operations["acceptInvite"];
  };
  "/users/me": {
    /**
     * Retrieve Current User
     * @description Retrieve the currently authenticated user.
     */
    get: operations["getMe"];
    /**
     * Update Current User
     * @description Update the currently authenticated user.
     */
    patch: operations["updateMe"];
  };
  "/users/me/track/page": {
    /**
     * Update Last Page
     * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
     */
    patch: operations["updateLastUsedPageMe"];
  };
  "/users/me/tfa/enable": {
    /**
     * Enable 2FA
     * @description Enables two-factor authentication for the currently authenticated user.
     */
    post: operations["meTfaEnable"];
  };
  "/users/me/tfa/disable": {
    /**
     * Disable 2FA
     * @description Disables two-factor authentication for the currently authenticated user.
     */
    post: operations["meTfaDisable"];
  };
  "/items/vote_film": {
    /**
     * List Items
     * @description List the vote_film items.
     */
    get: operations["readItemsVoteFilm"];
    /**
     * Create an Item
     * @description Create a new vote_film item.
     */
    post: operations["createItemsVoteFilm"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vote_film items.
     */
    delete: operations["deleteItemsVoteFilm"];
    /**
     * Update Multiple Items
     * @description Update multiple vote_film items at the same time.
     */
    patch: operations["updateItemsVoteFilm"];
  };
  "/items/vote_film/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vote_film item by unique identifier.
     */
    get: operations["readSingleItemsVoteFilm"];
    /**
     * Delete an Item
     * @description Delete an existing vote_film item.
     */
    delete: operations["deleteSingleItemsVoteFilm"];
    /**
     * Update an Item
     * @description Update an existing vote_film item.
     */
    patch: operations["updateSingleItemsVoteFilm"];
  };
  "/relations": {
    /**
     * List Relations
     * @description List the relations.
     */
    get: operations["getRelations"];
    /**
     * Create a Relation
     * @description Create a new relation.
     */
    post: operations["createRelation"];
  };
  "/relations/{id}": {
    /**
     * Retrieve a Relation
     * @description Retrieve a single relation by unique identifier.
     */
    get: operations["getRelation"];
    /**
     * Delete a Relation
     * @description Delete an existing relation.
     */
    delete: operations["deleteRelation"];
    /**
     * Update a Relation
     * @description Update an existing relation
     */
    patch: operations["updateRelation"];
  };
  "/revisions": {
    /**
     * List Revisions
     * @description List the revisions.
     */
    get: operations["getRevisions"];
  };
  "/revisions/{id}": {
    /**
     * Retrieve a Revision
     * @description Retrieve a single revision by unique identifier.
     */
    get: operations["getRevision"];
  };
  "/flows": {
    /**
     * List Flows
     * @description Get all flows.
     */
    get: operations["getFlows"];
    /**
     * Create a Flow
     * @description Create a new flow.
     */
    post: operations["createFlow"];
    /**
     * Delete Multiple Flows
     * @description Delete multiple existing flows.
     */
    delete: operations["deleteFlows"];
    /**
     * Update Multiple Flows
     * @description Update multiple flows at the same time.
     */
    patch: operations["updateFlows"];
  };
  "/flows/{id}": {
    /**
     * Retrieve a Flow
     * @description Retrieve a single flow by unique identifier.
     */
    get: operations["getFlow"];
    /**
     * Delete a Flow
     * @description Delete an existing flow
     */
    delete: operations["deleteFlow"];
    /**
     * Update a Flow
     * @description Update an existing flow
     */
    patch: operations["updateFlow"];
  };
  "/operations": {
    /**
     * List Operations
     * @description Get all operations.
     */
    get: operations["getOperations"];
    /**
     * Create an Operation
     * @description Create a new operation.
     */
    post: operations["createOperation"];
    /**
     * Delete Multiple Operations
     * @description Delete multiple existing operations.
     */
    delete: operations["deleteOperations"];
    /**
     * Update Multiple Operations
     * @description Update multiple operations at the same time.
     */
    patch: operations["updateOperations"];
  };
  "/operations/{id}": {
    /**
     * Retrieve an Operation
     * @description Retrieve a single operation by unique identifier.
     */
    get: operations["getOperation"];
    /**
     * Delete an Operation
     * @description Delete an existing operation
     */
    delete: operations["deleteOperation"];
    /**
     * Update an Operation
     * @description Update an existing operation
     */
    patch: operations["updateOperation"];
  };
  "/webhooks": {
    /**
     * List Webhooks
     * @description Get all webhooks.
     */
    get: operations["getWebhooks"];
    /**
     * Create a Webhook
     * @description Create a new webhook.
     */
    post: operations["createWebhook"];
    /**
     * Delete Multiple Webhooks
     * @description Delete multiple existing webhooks.
     */
    delete: operations["deleteWebhooks"];
    /**
     * Update Multiple Webhooks
     * @description Update multiple webhooks at the same time.
     */
    patch: operations["updateWebhooks"];
  };
  "/webhooks/{id}": {
    /**
     * Retrieve a Webhook
     * @description Retrieve a single webhook by unique identifier.
     */
    get: operations["getWebhook"];
    /**
     * Delete a Webhook
     * @description Delete an existing webhook
     */
    delete: operations["deleteWebhook"];
    /**
     * Update a Webhook
     * @description Update an existing webhook
     */
    patch: operations["updateWebhook"];
  };
  "/extensions": {
    /**
     * List Extensions
     * @description List the installed extensions and their configuration in the project.
     */
    get: operations["listExtensions"];
  };
  "/extensions/{name}": {
    /**
     * Update an Extension
     * @description Update an existing extension.
     */
    patch: operations["updateExtensions"];
  };
  "/extensions/{bundle}/{name}": {
    /**
     * Update an Extension
     * @description Update an existing extension.
     */
    patch: operations["updateExtensionBundle"];
  };
  "/settings": {
    /**
     * Retrieve Settings
     * @description List the settings.
     */
    get: operations["getSettings"];
    /**
     * Update Settings
     * @description Update the settings
     */
    patch: operations["updateSetting"];
  };
  "/versions": {
    /**
     * List Content Versions
     * @description Get all Content Versions.
     */
    get: operations["getContentVersions"];
    /**
     * Create Multiple Content Versions
     * @description Create multiple new Content Versions.
     */
    post: operations["createContentVersion"];
    /**
     * Delete Multiple Content Versions
     * @description Delete multiple existing Content Versions.
     */
    delete: operations["deleteContentVersions"];
    /**
     * Update Multiple Content Versions
     * @description Update multiple Content Versions at the same time.
     */
    patch: operations["updateContentVersions"];
  };
  "/versions/{id}": {
    /**
     * Retrieve a Content Version
     * @description Retrieve a single Content Version by unique identifier.
     */
    get: operations["getContentVersion"];
    /**
     * Delete a Content Version
     * @description Delete an existing Content Version.
     */
    delete: operations["deleteContentVersion"];
    /**
     * Update a Content Version
     * @description Update an existing Content Version.
     */
    patch: operations["updateContentVersion"];
  };
  "/versions/{id}/save": {
    /**
     * Save to a Content Version
     * @description Save item changes to an existing Content Version.
     */
    post: operations["saveContentVersion"];
  };
  "/versions/{id}/compare": {
    /**
     * Compare a Content Version
     * @description Compare an existing Content Version with the main version of the item.
     */
    get: operations["compareContentVersion"];
  };
  "/versions/{id}/promote": {
    /**
     * Promote a Content Version
     * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
     */
    post: operations["promoteContentVersion"];
  };
  "/comments": {
    /**
     * List Comments
     * @description List the comments.
     */
    get: operations["getComments"];
    /**
     * Create a Comment
     * @description Create a new comment.
     */
    post: operations["createComment"];
    /**
     * Delete Multiple Comments
     * @description Delete multiple existing comments.
     */
    delete: operations["deleteComments"];
    /**
     * Update Multiple Comments
     * @description Update multiple comments at the same time.
     */
    patch: operations["updateComments"];
  };
  "/comments/{id}": {
    /**
     * Retrieve a Comment
     * @description Retrieve a single comment by unique identifier.
     */
    get: operations["getComment"];
    /**
     * Delete a Comment
     * @description Delete an existing comment.
     */
    delete: operations["deleteComment"];
    /**
     * Update a Comment
     * @description Update an existing comment.
     */
    patch: operations["updateComment"];
  };
  "/items/film_film_genre": {
    /**
     * List Items
     * @description List the film_film_genre items.
     */
    get: operations["readItemsFilmFilmGenre"];
    /**
     * Create an Item
     * @description Create a new film_film_genre item.
     */
    post: operations["createItemsFilmFilmGenre"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_film_genre items.
     */
    delete: operations["deleteItemsFilmFilmGenre"];
    /**
     * Update Multiple Items
     * @description Update multiple film_film_genre items at the same time.
     */
    patch: operations["updateItemsFilmFilmGenre"];
  };
  "/items/film_film_genre/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_film_genre item by unique identifier.
     */
    get: operations["readSingleItemsFilmFilmGenre"];
    /**
     * Delete an Item
     * @description Delete an existing film_film_genre item.
     */
    delete: operations["deleteSingleItemsFilmFilmGenre"];
    /**
     * Update an Item
     * @description Update an existing film_film_genre item.
     */
    patch: operations["updateSingleItemsFilmFilmGenre"];
  };
  "/items/voting_translations": {
    /**
     * List Items
     * @description List the voting_translations items.
     */
    get: operations["readItemsVotingTranslations"];
    /**
     * Create an Item
     * @description Create a new voting_translations item.
     */
    post: operations["createItemsVotingTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voting_translations items.
     */
    delete: operations["deleteItemsVotingTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple voting_translations items at the same time.
     */
    patch: operations["updateItemsVotingTranslations"];
  };
  "/items/voting_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voting_translations item by unique identifier.
     */
    get: operations["readSingleItemsVotingTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing voting_translations item.
     */
    delete: operations["deleteSingleItemsVotingTranslations"];
    /**
     * Update an Item
     * @description Update an existing voting_translations item.
     */
    patch: operations["updateSingleItemsVotingTranslations"];
  };
  "/items/block_button": {
    /**
     * List Items
     * @description List the block_button items.
     */
    get: operations["readItemsBlockButton"];
    /**
     * Create an Item
     * @description Create a new block_button item.
     */
    post: operations["createItemsBlockButton"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_button items.
     */
    delete: operations["deleteItemsBlockButton"];
    /**
     * Update Multiple Items
     * @description Update multiple block_button items at the same time.
     */
    patch: operations["updateItemsBlockButton"];
  };
  "/items/block_button/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_button item by unique identifier.
     */
    get: operations["readSingleItemsBlockButton"];
    /**
     * Delete an Item
     * @description Delete an existing block_button item.
     */
    delete: operations["deleteSingleItemsBlockButton"];
    /**
     * Update an Item
     * @description Update an existing block_button item.
     */
    patch: operations["updateSingleItemsBlockButton"];
  };
  "/items/block_divider": {
    /**
     * List Items
     * @description List the block_divider items.
     */
    get: operations["readItemsBlockDivider"];
    /**
     * Create an Item
     * @description Create a new block_divider item.
     */
    post: operations["createItemsBlockDivider"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_divider items.
     */
    delete: operations["deleteItemsBlockDivider"];
    /**
     * Update Multiple Items
     * @description Update multiple block_divider items at the same time.
     */
    patch: operations["updateItemsBlockDivider"];
  };
  "/items/block_divider/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_divider item by unique identifier.
     */
    get: operations["readSingleItemsBlockDivider"];
    /**
     * Delete an Item
     * @description Delete an existing block_divider item.
     */
    delete: operations["deleteSingleItemsBlockDivider"];
    /**
     * Update an Item
     * @description Update an existing block_divider item.
     */
    patch: operations["updateSingleItemsBlockDivider"];
  };
  "/items/block_faqs": {
    /**
     * List Items
     * @description List the block_faqs items.
     */
    get: operations["readItemsBlockFaqs"];
    /**
     * Create an Item
     * @description Create a new block_faqs item.
     */
    post: operations["createItemsBlockFaqs"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_faqs items.
     */
    delete: operations["deleteItemsBlockFaqs"];
    /**
     * Update Multiple Items
     * @description Update multiple block_faqs items at the same time.
     */
    patch: operations["updateItemsBlockFaqs"];
  };
  "/items/block_faqs/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_faqs item by unique identifier.
     */
    get: operations["readSingleItemsBlockFaqs"];
    /**
     * Delete an Item
     * @description Delete an existing block_faqs item.
     */
    delete: operations["deleteSingleItemsBlockFaqs"];
    /**
     * Update an Item
     * @description Update an existing block_faqs item.
     */
    patch: operations["updateSingleItemsBlockFaqs"];
  };
  "/items/block_logocloud": {
    /**
     * List Items
     * @description List the block_logocloud items.
     */
    get: operations["readItemsBlockLogocloud"];
    /**
     * Create an Item
     * @description Create a new block_logocloud item.
     */
    post: operations["createItemsBlockLogocloud"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_logocloud items.
     */
    delete: operations["deleteItemsBlockLogocloud"];
    /**
     * Update Multiple Items
     * @description Update multiple block_logocloud items at the same time.
     */
    patch: operations["updateItemsBlockLogocloud"];
  };
  "/items/block_logocloud/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_logocloud item by unique identifier.
     */
    get: operations["readSingleItemsBlockLogocloud"];
    /**
     * Delete an Item
     * @description Delete an existing block_logocloud item.
     */
    delete: operations["deleteSingleItemsBlockLogocloud"];
    /**
     * Update an Item
     * @description Update an existing block_logocloud item.
     */
    patch: operations["updateSingleItemsBlockLogocloud"];
  };
  "/items/block_hero": {
    /**
     * List Items
     * @description List the block_hero items.
     */
    get: operations["readItemsBlockHero"];
    /**
     * Create an Item
     * @description Create a new block_hero item.
     */
    post: operations["createItemsBlockHero"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_hero items.
     */
    delete: operations["deleteItemsBlockHero"];
    /**
     * Update Multiple Items
     * @description Update multiple block_hero items at the same time.
     */
    patch: operations["updateItemsBlockHero"];
  };
  "/items/block_hero/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_hero item by unique identifier.
     */
    get: operations["readSingleItemsBlockHero"];
    /**
     * Delete an Item
     * @description Delete an existing block_hero item.
     */
    delete: operations["deleteSingleItemsBlockHero"];
    /**
     * Update an Item
     * @description Update an existing block_hero item.
     */
    patch: operations["updateSingleItemsBlockHero"];
  };
  "/items/block_html": {
    /**
     * List Items
     * @description List the block_html items.
     */
    get: operations["readItemsBlockHTML"];
    /**
     * Create an Item
     * @description Create a new block_html item.
     */
    post: operations["createItemsBlockHTML"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_html items.
     */
    delete: operations["deleteItemsBlockHTML"];
    /**
     * Update Multiple Items
     * @description Update multiple block_html items at the same time.
     */
    patch: operations["updateItemsBlockHTML"];
  };
  "/items/block_html/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_html item by unique identifier.
     */
    get: operations["readSingleItemsBlockHTML"];
    /**
     * Delete an Item
     * @description Delete an existing block_html item.
     */
    delete: operations["deleteSingleItemsBlockHTML"];
    /**
     * Update an Item
     * @description Update an existing block_html item.
     */
    patch: operations["updateSingleItemsBlockHTML"];
  };
  "/items/block_step_items": {
    /**
     * List Items
     * @description List the block_step_items items.
     */
    get: operations["readItemsBlockStepItems"];
    /**
     * Create an Item
     * @description Create a new block_step_items item.
     */
    post: operations["createItemsBlockStepItems"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_step_items items.
     */
    delete: operations["deleteItemsBlockStepItems"];
    /**
     * Update Multiple Items
     * @description Update multiple block_step_items items at the same time.
     */
    patch: operations["updateItemsBlockStepItems"];
  };
  "/items/block_step_items/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_step_items item by unique identifier.
     */
    get: operations["readSingleItemsBlockStepItems"];
    /**
     * Delete an Item
     * @description Delete an existing block_step_items item.
     */
    delete: operations["deleteSingleItemsBlockStepItems"];
    /**
     * Update an Item
     * @description Update an existing block_step_items item.
     */
    patch: operations["updateSingleItemsBlockStepItems"];
  };
  "/items/block_quote": {
    /**
     * List Items
     * @description List the block_quote items.
     */
    get: operations["readItemsBlockQuote"];
    /**
     * Create an Item
     * @description Create a new block_quote item.
     */
    post: operations["createItemsBlockQuote"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_quote items.
     */
    delete: operations["deleteItemsBlockQuote"];
    /**
     * Update Multiple Items
     * @description Update multiple block_quote items at the same time.
     */
    patch: operations["updateItemsBlockQuote"];
  };
  "/items/block_quote/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_quote item by unique identifier.
     */
    get: operations["readSingleItemsBlockQuote"];
    /**
     * Delete an Item
     * @description Delete an existing block_quote item.
     */
    delete: operations["deleteSingleItemsBlockQuote"];
    /**
     * Update an Item
     * @description Update an existing block_quote item.
     */
    patch: operations["updateSingleItemsBlockQuote"];
  };
  "/items/block_richtext": {
    /**
     * List Items
     * @description List the block_richtext items.
     */
    get: operations["readItemsBlockRichtext"];
    /**
     * Create an Item
     * @description Create a new block_richtext item.
     */
    post: operations["createItemsBlockRichtext"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_richtext items.
     */
    delete: operations["deleteItemsBlockRichtext"];
    /**
     * Update Multiple Items
     * @description Update multiple block_richtext items at the same time.
     */
    patch: operations["updateItemsBlockRichtext"];
  };
  "/items/block_richtext/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_richtext item by unique identifier.
     */
    get: operations["readSingleItemsBlockRichtext"];
    /**
     * Delete an Item
     * @description Delete an existing block_richtext item.
     */
    delete: operations["deleteSingleItemsBlockRichtext"];
    /**
     * Update an Item
     * @description Update an existing block_richtext item.
     */
    patch: operations["updateSingleItemsBlockRichtext"];
  };
  "/items/block_gallery": {
    /**
     * List Items
     * @description List the block_gallery items.
     */
    get: operations["readItemsBlockGallery"];
    /**
     * Create an Item
     * @description Create a new block_gallery item.
     */
    post: operations["createItemsBlockGallery"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_gallery items.
     */
    delete: operations["deleteItemsBlockGallery"];
    /**
     * Update Multiple Items
     * @description Update multiple block_gallery items at the same time.
     */
    patch: operations["updateItemsBlockGallery"];
  };
  "/items/block_gallery/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_gallery item by unique identifier.
     */
    get: operations["readSingleItemsBlockGallery"];
    /**
     * Delete an Item
     * @description Delete an existing block_gallery item.
     */
    delete: operations["deleteSingleItemsBlockGallery"];
    /**
     * Update an Item
     * @description Update an existing block_gallery item.
     */
    patch: operations["updateSingleItemsBlockGallery"];
  };
  "/items/block_form": {
    /**
     * List Items
     * @description List the block_form items.
     */
    get: operations["readItemsBlockForm"];
    /**
     * Create an Item
     * @description Create a new block_form item.
     */
    post: operations["createItemsBlockForm"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_form items.
     */
    delete: operations["deleteItemsBlockForm"];
    /**
     * Update Multiple Items
     * @description Update multiple block_form items at the same time.
     */
    patch: operations["updateItemsBlockForm"];
  };
  "/items/block_form/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_form item by unique identifier.
     */
    get: operations["readSingleItemsBlockForm"];
    /**
     * Delete an Item
     * @description Delete an existing block_form item.
     */
    delete: operations["deleteSingleItemsBlockForm"];
    /**
     * Update an Item
     * @description Update an existing block_form item.
     */
    patch: operations["updateSingleItemsBlockForm"];
  };
  "/items/block_gallery_files": {
    /**
     * List Items
     * @description List the block_gallery_files items.
     */
    get: operations["readItemsBlockGalleryFiles"];
    /**
     * Create an Item
     * @description Create a new block_gallery_files item.
     */
    post: operations["createItemsBlockGalleryFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_gallery_files items.
     */
    delete: operations["deleteItemsBlockGalleryFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple block_gallery_files items at the same time.
     */
    patch: operations["updateItemsBlockGalleryFiles"];
  };
  "/items/block_gallery_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_gallery_files item by unique identifier.
     */
    get: operations["readSingleItemsBlockGalleryFiles"];
    /**
     * Delete an Item
     * @description Delete an existing block_gallery_files item.
     */
    delete: operations["deleteSingleItemsBlockGalleryFiles"];
    /**
     * Update an Item
     * @description Update an existing block_gallery_files item.
     */
    patch: operations["updateSingleItemsBlockGalleryFiles"];
  };
  "/items/block_testimonials": {
    /**
     * List Items
     * @description List the block_testimonials items.
     */
    get: operations["readItemsBlockTestimonials"];
    /**
     * Create an Item
     * @description Create a new block_testimonials item.
     */
    post: operations["createItemsBlockTestimonials"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_testimonials items.
     */
    delete: operations["deleteItemsBlockTestimonials"];
    /**
     * Update Multiple Items
     * @description Update multiple block_testimonials items at the same time.
     */
    patch: operations["updateItemsBlockTestimonials"];
  };
  "/items/block_testimonials/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_testimonials item by unique identifier.
     */
    get: operations["readSingleItemsBlockTestimonials"];
    /**
     * Delete an Item
     * @description Delete an existing block_testimonials item.
     */
    delete: operations["deleteSingleItemsBlockTestimonials"];
    /**
     * Update an Item
     * @description Update an existing block_testimonials item.
     */
    patch: operations["updateSingleItemsBlockTestimonials"];
  };
  "/items/block_team": {
    /**
     * List Items
     * @description List the block_team items.
     */
    get: operations["readItemsBlockTeam"];
    /**
     * Create an Item
     * @description Create a new block_team item.
     */
    post: operations["createItemsBlockTeam"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_team items.
     */
    delete: operations["deleteItemsBlockTeam"];
    /**
     * Update Multiple Items
     * @description Update multiple block_team items at the same time.
     */
    patch: operations["updateItemsBlockTeam"];
  };
  "/items/block_team/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_team item by unique identifier.
     */
    get: operations["readSingleItemsBlockTeam"];
    /**
     * Delete an Item
     * @description Delete an existing block_team item.
     */
    delete: operations["deleteSingleItemsBlockTeam"];
    /**
     * Update an Item
     * @description Update an existing block_team item.
     */
    patch: operations["updateSingleItemsBlockTeam"];
  };
  "/items/categories": {
    /**
     * List Items
     * @description List the categories items.
     */
    get: operations["readItemsCategories"];
    /**
     * Create an Item
     * @description Create a new categories item.
     */
    post: operations["createItemsCategories"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing categories items.
     */
    delete: operations["deleteItemsCategories"];
    /**
     * Update Multiple Items
     * @description Update multiple categories items at the same time.
     */
    patch: operations["updateItemsCategories"];
  };
  "/items/categories/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single categories item by unique identifier.
     */
    get: operations["readSingleItemsCategories"];
    /**
     * Delete an Item
     * @description Delete an existing categories item.
     */
    delete: operations["deleteSingleItemsCategories"];
    /**
     * Update an Item
     * @description Update an existing categories item.
     */
    patch: operations["updateSingleItemsCategories"];
  };
  "/items/inbox": {
    /**
     * List Items
     * @description List the inbox items.
     */
    get: operations["readItemsInbox"];
    /**
     * Create an Item
     * @description Create a new inbox item.
     */
    post: operations["createItemsInbox"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing inbox items.
     */
    delete: operations["deleteItemsInbox"];
    /**
     * Update Multiple Items
     * @description Update multiple inbox items at the same time.
     */
    patch: operations["updateItemsInbox"];
  };
  "/items/inbox/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single inbox item by unique identifier.
     */
    get: operations["readSingleItemsInbox"];
    /**
     * Delete an Item
     * @description Delete an existing inbox item.
     */
    delete: operations["deleteSingleItemsInbox"];
    /**
     * Update an Item
     * @description Update an existing inbox item.
     */
    patch: operations["updateSingleItemsInbox"];
  };
  "/items/globals": {
    /**
     * List Items
     * @description List the globals items.
     */
    get: operations["readItemsGlobals"];
    /**
     * Create an Item
     * @description Create a new globals item.
     */
    post: operations["createItemsGlobals"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing globals items.
     */
    delete: operations["deleteItemsGlobals"];
    /**
     * Update Multiple Items
     * @description Update multiple globals items at the same time.
     */
    patch: operations["updateItemsGlobals"];
  };
  "/items/globals/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single globals item by unique identifier.
     */
    get: operations["readSingleItemsGlobals"];
    /**
     * Delete an Item
     * @description Delete an existing globals item.
     */
    delete: operations["deleteSingleItemsGlobals"];
    /**
     * Update an Item
     * @description Update an existing globals item.
     */
    patch: operations["updateSingleItemsGlobals"];
  };
  "/items/block_steps": {
    /**
     * List Items
     * @description List the block_steps items.
     */
    get: operations["readItemsBlockSteps"];
    /**
     * Create an Item
     * @description Create a new block_steps item.
     */
    post: operations["createItemsBlockSteps"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_steps items.
     */
    delete: operations["deleteItemsBlockSteps"];
    /**
     * Update Multiple Items
     * @description Update multiple block_steps items at the same time.
     */
    patch: operations["updateItemsBlockSteps"];
  };
  "/items/block_steps/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_steps item by unique identifier.
     */
    get: operations["readSingleItemsBlockSteps"];
    /**
     * Delete an Item
     * @description Delete an existing block_steps item.
     */
    delete: operations["deleteSingleItemsBlockSteps"];
    /**
     * Update an Item
     * @description Update an existing block_steps item.
     */
    patch: operations["updateSingleItemsBlockSteps"];
  };
  "/items/block_video": {
    /**
     * List Items
     * @description List the block_video items.
     */
    get: operations["readItemsBlockVideo"];
    /**
     * Create an Item
     * @description Create a new block_video item.
     */
    post: operations["createItemsBlockVideo"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_video items.
     */
    delete: operations["deleteItemsBlockVideo"];
    /**
     * Update Multiple Items
     * @description Update multiple block_video items at the same time.
     */
    patch: operations["updateItemsBlockVideo"];
  };
  "/items/block_video/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_video item by unique identifier.
     */
    get: operations["readSingleItemsBlockVideo"];
    /**
     * Delete an Item
     * @description Delete an existing block_video item.
     */
    delete: operations["deleteSingleItemsBlockVideo"];
    /**
     * Update an Item
     * @description Update an existing block_video item.
     */
    patch: operations["updateSingleItemsBlockVideo"];
  };
  "/items/navigation_items": {
    /**
     * List Items
     * @description List the navigation_items items.
     */
    get: operations["readItemsNavigationItems"];
    /**
     * Create an Item
     * @description Create a new navigation_items item.
     */
    post: operations["createItemsNavigationItems"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing navigation_items items.
     */
    delete: operations["deleteItemsNavigationItems"];
    /**
     * Update Multiple Items
     * @description Update multiple navigation_items items at the same time.
     */
    patch: operations["updateItemsNavigationItems"];
  };
  "/items/navigation_items/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single navigation_items item by unique identifier.
     */
    get: operations["readSingleItemsNavigationItems"];
    /**
     * Delete an Item
     * @description Delete an existing navigation_items item.
     */
    delete: operations["deleteSingleItemsNavigationItems"];
    /**
     * Update an Item
     * @description Update an existing navigation_items item.
     */
    patch: operations["updateSingleItemsNavigationItems"];
  };
  "/items/navigation": {
    /**
     * List Items
     * @description List the navigation items.
     */
    get: operations["readItemsNavigation"];
    /**
     * Create an Item
     * @description Create a new navigation item.
     */
    post: operations["createItemsNavigation"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing navigation items.
     */
    delete: operations["deleteItemsNavigation"];
    /**
     * Update Multiple Items
     * @description Update multiple navigation items at the same time.
     */
    patch: operations["updateItemsNavigation"];
  };
  "/items/navigation/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single navigation item by unique identifier.
     */
    get: operations["readSingleItemsNavigation"];
    /**
     * Delete an Item
     * @description Delete an existing navigation item.
     */
    delete: operations["deleteSingleItemsNavigation"];
    /**
     * Update an Item
     * @description Update an existing navigation item.
     */
    patch: operations["updateSingleItemsNavigation"];
  };
  "/items/forms": {
    /**
     * List Items
     * @description List the forms items.
     */
    get: operations["readItemsForms"];
    /**
     * Create an Item
     * @description Create a new forms item.
     */
    post: operations["createItemsForms"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing forms items.
     */
    delete: operations["deleteItemsForms"];
    /**
     * Update Multiple Items
     * @description Update multiple forms items at the same time.
     */
    patch: operations["updateItemsForms"];
  };
  "/items/forms/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single forms item by unique identifier.
     */
    get: operations["readSingleItemsForms"];
    /**
     * Delete an Item
     * @description Delete an existing forms item.
     */
    delete: operations["deleteSingleItemsForms"];
    /**
     * Update an Item
     * @description Update an existing forms item.
     */
    patch: operations["updateSingleItemsForms"];
  };
  "/items/redirects": {
    /**
     * List Items
     * @description List the redirects items.
     */
    get: operations["readItemsRedirects"];
    /**
     * Create an Item
     * @description Create a new redirects item.
     */
    post: operations["createItemsRedirects"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing redirects items.
     */
    delete: operations["deleteItemsRedirects"];
    /**
     * Update Multiple Items
     * @description Update multiple redirects items at the same time.
     */
    patch: operations["updateItemsRedirects"];
  };
  "/items/redirects/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single redirects item by unique identifier.
     */
    get: operations["readSingleItemsRedirects"];
    /**
     * Delete an Item
     * @description Delete an existing redirects item.
     */
    delete: operations["deleteSingleItemsRedirects"];
    /**
     * Update an Item
     * @description Update an existing redirects item.
     */
    patch: operations["updateSingleItemsRedirects"];
  };
  "/items/team": {
    /**
     * List Items
     * @description List the team items.
     */
    get: operations["readItemsTeam"];
    /**
     * Create an Item
     * @description Create a new team item.
     */
    post: operations["createItemsTeam"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing team items.
     */
    delete: operations["deleteItemsTeam"];
    /**
     * Update Multiple Items
     * @description Update multiple team items at the same time.
     */
    patch: operations["updateItemsTeam"];
  };
  "/items/team/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single team item by unique identifier.
     */
    get: operations["readSingleItemsTeam"];
    /**
     * Delete an Item
     * @description Delete an existing team item.
     */
    delete: operations["deleteSingleItemsTeam"];
    /**
     * Update an Item
     * @description Update an existing team item.
     */
    patch: operations["updateSingleItemsTeam"];
  };
  "/items/post_gallery_items": {
    /**
     * List Items
     * @description List the post_gallery_items items.
     */
    get: operations["readItemsPostGalleryItems"];
    /**
     * Create an Item
     * @description Create a new post_gallery_items item.
     */
    post: operations["createItemsPostGalleryItems"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing post_gallery_items items.
     */
    delete: operations["deleteItemsPostGalleryItems"];
    /**
     * Update Multiple Items
     * @description Update multiple post_gallery_items items at the same time.
     */
    patch: operations["updateItemsPostGalleryItems"];
  };
  "/items/post_gallery_items/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single post_gallery_items item by unique identifier.
     */
    get: operations["readSingleItemsPostGalleryItems"];
    /**
     * Delete an Item
     * @description Delete an existing post_gallery_items item.
     */
    delete: operations["deleteSingleItemsPostGalleryItems"];
    /**
     * Update an Item
     * @description Update an existing post_gallery_items item.
     */
    patch: operations["updateSingleItemsPostGalleryItems"];
  };
  "/items/pages_blog": {
    /**
     * List Items
     * @description List the pages_blog items.
     */
    get: operations["readItemsPagesBlog"];
    /**
     * Create an Item
     * @description Create a new pages_blog item.
     */
    post: operations["createItemsPagesBlog"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages_blog items.
     */
    delete: operations["deleteItemsPagesBlog"];
    /**
     * Update Multiple Items
     * @description Update multiple pages_blog items at the same time.
     */
    patch: operations["updateItemsPagesBlog"];
  };
  "/items/pages_blog/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages_blog item by unique identifier.
     */
    get: operations["readSingleItemsPagesBlog"];
    /**
     * Delete an Item
     * @description Delete an existing pages_blog item.
     */
    delete: operations["deleteSingleItemsPagesBlog"];
    /**
     * Update an Item
     * @description Update an existing pages_blog item.
     */
    patch: operations["updateSingleItemsPagesBlog"];
  };
  "/items/block_columns_rows": {
    /**
     * List Items
     * @description List the block_columns_rows items.
     */
    get: operations["readItemsBlockColumnsRows"];
    /**
     * Create an Item
     * @description Create a new block_columns_rows item.
     */
    post: operations["createItemsBlockColumnsRows"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_columns_rows items.
     */
    delete: operations["deleteItemsBlockColumnsRows"];
    /**
     * Update Multiple Items
     * @description Update multiple block_columns_rows items at the same time.
     */
    patch: operations["updateItemsBlockColumnsRows"];
  };
  "/items/block_columns_rows/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_columns_rows item by unique identifier.
     */
    get: operations["readSingleItemsBlockColumnsRows"];
    /**
     * Delete an Item
     * @description Delete an existing block_columns_rows item.
     */
    delete: operations["deleteSingleItemsBlockColumnsRows"];
    /**
     * Update an Item
     * @description Update an existing block_columns_rows item.
     */
    patch: operations["updateSingleItemsBlockColumnsRows"];
  };
  "/items/posts": {
    /**
     * List Items
     * @description List the posts items.
     */
    get: operations["readItemsPosts"];
    /**
     * Create an Item
     * @description Create a new posts item.
     */
    post: operations["createItemsPosts"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing posts items.
     */
    delete: operations["deleteItemsPosts"];
    /**
     * Update Multiple Items
     * @description Update multiple posts items at the same time.
     */
    patch: operations["updateItemsPosts"];
  };
  "/items/posts/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single posts item by unique identifier.
     */
    get: operations["readSingleItemsPosts"];
    /**
     * Delete an Item
     * @description Delete an existing posts item.
     */
    delete: operations["deleteSingleItemsPosts"];
    /**
     * Update an Item
     * @description Update an existing posts item.
     */
    patch: operations["updateSingleItemsPosts"];
  };
  "/items/block_card": {
    /**
     * List Items
     * @description List the block_card items.
     */
    get: operations["readItemsBlockCard"];
    /**
     * Create an Item
     * @description Create a new block_card item.
     */
    post: operations["createItemsBlockCard"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_card items.
     */
    delete: operations["deleteItemsBlockCard"];
    /**
     * Update Multiple Items
     * @description Update multiple block_card items at the same time.
     */
    patch: operations["updateItemsBlockCard"];
  };
  "/items/block_card/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_card item by unique identifier.
     */
    get: operations["readSingleItemsBlockCard"];
    /**
     * Delete an Item
     * @description Delete an existing block_card item.
     */
    delete: operations["deleteSingleItemsBlockCard"];
    /**
     * Update an Item
     * @description Update an existing block_card item.
     */
    patch: operations["updateSingleItemsBlockCard"];
  };
  "/items/block_logocloud_logos": {
    /**
     * List Items
     * @description List the block_logocloud_logos items.
     */
    get: operations["readItemsBlockLogocloudLogos"];
    /**
     * Create an Item
     * @description Create a new block_logocloud_logos item.
     */
    post: operations["createItemsBlockLogocloudLogos"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_logocloud_logos items.
     */
    delete: operations["deleteItemsBlockLogocloudLogos"];
    /**
     * Update Multiple Items
     * @description Update multiple block_logocloud_logos items at the same time.
     */
    patch: operations["updateItemsBlockLogocloudLogos"];
  };
  "/items/block_logocloud_logos/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_logocloud_logos item by unique identifier.
     */
    get: operations["readSingleItemsBlockLogocloudLogos"];
    /**
     * Delete an Item
     * @description Delete an existing block_logocloud_logos item.
     */
    delete: operations["deleteSingleItemsBlockLogocloudLogos"];
    /**
     * Update an Item
     * @description Update an existing block_logocloud_logos item.
     */
    patch: operations["updateSingleItemsBlockLogocloudLogos"];
  };
  "/items/block_testimonial_slider_items": {
    /**
     * List Items
     * @description List the block_testimonial_slider_items items.
     */
    get: operations["readItemsBlockTestimonialSliderItems"];
    /**
     * Create an Item
     * @description Create a new block_testimonial_slider_items item.
     */
    post: operations["createItemsBlockTestimonialSliderItems"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_testimonial_slider_items items.
     */
    delete: operations["deleteItemsBlockTestimonialSliderItems"];
    /**
     * Update Multiple Items
     * @description Update multiple block_testimonial_slider_items items at the same time.
     */
    patch: operations["updateItemsBlockTestimonialSliderItems"];
  };
  "/items/block_testimonial_slider_items/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_testimonial_slider_items item by unique identifier.
     */
    get: operations["readSingleItemsBlockTestimonialSliderItems"];
    /**
     * Delete an Item
     * @description Delete an existing block_testimonial_slider_items item.
     */
    delete: operations["deleteSingleItemsBlockTestimonialSliderItems"];
    /**
     * Update an Item
     * @description Update an existing block_testimonial_slider_items item.
     */
    patch: operations["updateSingleItemsBlockTestimonialSliderItems"];
  };
  "/items/testimonials": {
    /**
     * List Items
     * @description List the testimonials items.
     */
    get: operations["readItemsTestimonials"];
    /**
     * Create an Item
     * @description Create a new testimonials item.
     */
    post: operations["createItemsTestimonials"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing testimonials items.
     */
    delete: operations["deleteItemsTestimonials"];
    /**
     * Update Multiple Items
     * @description Update multiple testimonials items at the same time.
     */
    patch: operations["updateItemsTestimonials"];
  };
  "/items/testimonials/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single testimonials item by unique identifier.
     */
    get: operations["readSingleItemsTestimonials"];
    /**
     * Delete an Item
     * @description Delete an existing testimonials item.
     */
    delete: operations["deleteSingleItemsTestimonials"];
    /**
     * Update an Item
     * @description Update an existing testimonials item.
     */
    patch: operations["updateSingleItemsTestimonials"];
  };
  "/items/seo": {
    /**
     * List Items
     * @description List the seo items.
     */
    get: operations["readItemsSEO"];
    /**
     * Create an Item
     * @description Create a new seo item.
     */
    post: operations["createItemsSEO"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing seo items.
     */
    delete: operations["deleteItemsSEO"];
    /**
     * Update Multiple Items
     * @description Update multiple seo items at the same time.
     */
    patch: operations["updateItemsSEO"];
  };
  "/items/seo/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single seo item by unique identifier.
     */
    get: operations["readSingleItemsSEO"];
    /**
     * Delete an Item
     * @description Delete an existing seo item.
     */
    delete: operations["deleteSingleItemsSEO"];
    /**
     * Update an Item
     * @description Update an existing seo item.
     */
    patch: operations["updateSingleItemsSEO"];
  };
  "/items/pages": {
    /**
     * List Items
     * @description List the pages items.
     */
    get: operations["readItemsPages"];
    /**
     * Create an Item
     * @description Create a new pages item.
     */
    post: operations["createItemsPages"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing pages items.
     */
    delete: operations["deleteItemsPages"];
    /**
     * Update Multiple Items
     * @description Update multiple pages items at the same time.
     */
    patch: operations["updateItemsPages"];
  };
  "/items/pages/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single pages item by unique identifier.
     */
    get: operations["readSingleItemsPages"];
    /**
     * Delete an Item
     * @description Delete an existing pages item.
     */
    delete: operations["deleteSingleItemsPages"];
    /**
     * Update an Item
     * @description Update an existing pages item.
     */
    patch: operations["updateSingleItemsPages"];
  };
  "/items/page_blocks": {
    /**
     * List Items
     * @description List the page_blocks items.
     */
    get: operations["readItemsPageBlocks"];
    /**
     * Create an Item
     * @description Create a new page_blocks item.
     */
    post: operations["createItemsPageBlocks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing page_blocks items.
     */
    delete: operations["deleteItemsPageBlocks"];
    /**
     * Update Multiple Items
     * @description Update multiple page_blocks items at the same time.
     */
    patch: operations["updateItemsPageBlocks"];
  };
  "/items/page_blocks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single page_blocks item by unique identifier.
     */
    get: operations["readSingleItemsPageBlocks"];
    /**
     * Delete an Item
     * @description Delete an existing page_blocks item.
     */
    delete: operations["deleteSingleItemsPageBlocks"];
    /**
     * Update an Item
     * @description Update an existing page_blocks item.
     */
    patch: operations["updateSingleItemsPageBlocks"];
  };
  "/items/block_archive_files": {
    /**
     * List Items
     * @description List the block_archive_files items.
     */
    get: operations["readItemsBlockArchiveFiles"];
    /**
     * Create an Item
     * @description Create a new block_archive_files item.
     */
    post: operations["createItemsBlockArchiveFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_archive_files items.
     */
    delete: operations["deleteItemsBlockArchiveFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple block_archive_files items at the same time.
     */
    patch: operations["updateItemsBlockArchiveFiles"];
  };
  "/items/block_archive_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_archive_files item by unique identifier.
     */
    get: operations["readSingleItemsBlockArchiveFiles"];
    /**
     * Delete an Item
     * @description Delete an existing block_archive_files item.
     */
    delete: operations["deleteSingleItemsBlockArchiveFiles"];
    /**
     * Update an Item
     * @description Update an existing block_archive_files item.
     */
    patch: operations["updateSingleItemsBlockArchiveFiles"];
  };
  "/items/globals_footer_blocks": {
    /**
     * List Items
     * @description List the globals_footer_blocks items.
     */
    get: operations["readItemsGlobalsFooterBlocks"];
    /**
     * Create an Item
     * @description Create a new globals_footer_blocks item.
     */
    post: operations["createItemsGlobalsFooterBlocks"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing globals_footer_blocks items.
     */
    delete: operations["deleteItemsGlobalsFooterBlocks"];
    /**
     * Update Multiple Items
     * @description Update multiple globals_footer_blocks items at the same time.
     */
    patch: operations["updateItemsGlobalsFooterBlocks"];
  };
  "/items/globals_footer_blocks/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single globals_footer_blocks item by unique identifier.
     */
    get: operations["readSingleItemsGlobalsFooterBlocks"];
    /**
     * Delete an Item
     * @description Delete an existing globals_footer_blocks item.
     */
    delete: operations["deleteSingleItemsGlobalsFooterBlocks"];
    /**
     * Update an Item
     * @description Update an existing globals_footer_blocks item.
     */
    patch: operations["updateSingleItemsGlobalsFooterBlocks"];
  };
  "/items/block_layout_blocks_1": {
    /**
     * List Items
     * @description List the block_layout_blocks_1 items.
     */
    get: operations["readItemsBlockLayoutBlocks1"];
    /**
     * Create an Item
     * @description Create a new block_layout_blocks_1 item.
     */
    post: operations["createItemsBlockLayoutBlocks1"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_layout_blocks_1 items.
     */
    delete: operations["deleteItemsBlockLayoutBlocks1"];
    /**
     * Update Multiple Items
     * @description Update multiple block_layout_blocks_1 items at the same time.
     */
    patch: operations["updateItemsBlockLayoutBlocks1"];
  };
  "/items/block_layout_blocks_1/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_layout_blocks_1 item by unique identifier.
     */
    get: operations["readSingleItemsBlockLayoutBlocks1"];
    /**
     * Delete an Item
     * @description Delete an existing block_layout_blocks_1 item.
     */
    delete: operations["deleteSingleItemsBlockLayoutBlocks1"];
    /**
     * Update an Item
     * @description Update an existing block_layout_blocks_1 item.
     */
    patch: operations["updateSingleItemsBlockLayoutBlocks1"];
  };
  "/items/block_image": {
    /**
     * List Items
     * @description List the block_image items.
     */
    get: operations["readItemsBlockImage"];
    /**
     * Create an Item
     * @description Create a new block_image item.
     */
    post: operations["createItemsBlockImage"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_image items.
     */
    delete: operations["deleteItemsBlockImage"];
    /**
     * Update Multiple Items
     * @description Update multiple block_image items at the same time.
     */
    patch: operations["updateItemsBlockImage"];
  };
  "/items/block_image/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_image item by unique identifier.
     */
    get: operations["readSingleItemsBlockImage"];
    /**
     * Delete an Item
     * @description Delete an existing block_image item.
     */
    delete: operations["deleteSingleItemsBlockImage"];
    /**
     * Update an Item
     * @description Update an existing block_image item.
     */
    patch: operations["updateSingleItemsBlockImage"];
  };
  "/items/block_archive": {
    /**
     * List Items
     * @description List the block_archive items.
     */
    get: operations["readItemsBlockArchive"];
    /**
     * Create an Item
     * @description Create a new block_archive item.
     */
    post: operations["createItemsBlockArchive"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_archive items.
     */
    delete: operations["deleteItemsBlockArchive"];
    /**
     * Update Multiple Items
     * @description Update multiple block_archive items at the same time.
     */
    patch: operations["updateItemsBlockArchive"];
  };
  "/items/block_archive/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_archive item by unique identifier.
     */
    get: operations["readSingleItemsBlockArchive"];
    /**
     * Delete an Item
     * @description Delete an existing block_archive item.
     */
    delete: operations["deleteSingleItemsBlockArchive"];
    /**
     * Update an Item
     * @description Update an existing block_archive item.
     */
    patch: operations["updateSingleItemsBlockArchive"];
  };
  "/items/block_layout": {
    /**
     * List Items
     * @description List the block_layout items.
     */
    get: operations["readItemsBlockLayout"];
    /**
     * Create an Item
     * @description Create a new block_layout item.
     */
    post: operations["createItemsBlockLayout"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_layout items.
     */
    delete: operations["deleteItemsBlockLayout"];
    /**
     * Update Multiple Items
     * @description Update multiple block_layout items at the same time.
     */
    patch: operations["updateItemsBlockLayout"];
  };
  "/items/block_layout/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_layout item by unique identifier.
     */
    get: operations["readSingleItemsBlockLayout"];
    /**
     * Delete an Item
     * @description Delete an existing block_layout item.
     */
    delete: operations["deleteSingleItemsBlockLayout"];
    /**
     * Update an Item
     * @description Update an existing block_layout item.
     */
    patch: operations["updateSingleItemsBlockLayout"];
  };
  "/items/block_gap": {
    /**
     * List Items
     * @description List the block_gap items.
     */
    get: operations["readItemsBlockGap"];
    /**
     * Create an Item
     * @description Create a new block_gap item.
     */
    post: operations["createItemsBlockGap"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_gap items.
     */
    delete: operations["deleteItemsBlockGap"];
    /**
     * Update Multiple Items
     * @description Update multiple block_gap items at the same time.
     */
    patch: operations["updateItemsBlockGap"];
  };
  "/items/block_gap/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_gap item by unique identifier.
     */
    get: operations["readSingleItemsBlockGap"];
    /**
     * Delete an Item
     * @description Delete an existing block_gap item.
     */
    delete: operations["deleteSingleItemsBlockGap"];
    /**
     * Update an Item
     * @description Update an existing block_gap item.
     */
    patch: operations["updateSingleItemsBlockGap"];
  };
  "/items/languages": {
    /**
     * List Items
     * @description List the languages items.
     */
    get: operations["readItemsLanguages"];
    /**
     * Create an Item
     * @description Create a new languages item.
     */
    post: operations["createItemsLanguages"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing languages items.
     */
    delete: operations["deleteItemsLanguages"];
    /**
     * Update Multiple Items
     * @description Update multiple languages items at the same time.
     */
    patch: operations["updateItemsLanguages"];
  };
  "/items/languages/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single languages item by unique identifier.
     */
    get: operations["readSingleItemsLanguages"];
    /**
     * Delete an Item
     * @description Delete an existing languages item.
     */
    delete: operations["deleteSingleItemsLanguages"];
    /**
     * Update an Item
     * @description Update an existing languages item.
     */
    patch: operations["updateSingleItemsLanguages"];
  };
  "/items/block_link": {
    /**
     * List Items
     * @description List the block_link items.
     */
    get: operations["readItemsBlockLink"];
    /**
     * Create an Item
     * @description Create a new block_link item.
     */
    post: operations["createItemsBlockLink"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_link items.
     */
    delete: operations["deleteItemsBlockLink"];
    /**
     * Update Multiple Items
     * @description Update multiple block_link items at the same time.
     */
    patch: operations["updateItemsBlockLink"];
  };
  "/items/block_link/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_link item by unique identifier.
     */
    get: operations["readSingleItemsBlockLink"];
    /**
     * Delete an Item
     * @description Delete an existing block_link item.
     */
    delete: operations["deleteSingleItemsBlockLink"];
    /**
     * Update an Item
     * @description Update an existing block_link item.
     */
    patch: operations["updateSingleItemsBlockLink"];
  };
  "/items/block_richtext_translations": {
    /**
     * List Items
     * @description List the block_richtext_translations items.
     */
    get: operations["readItemsBlockRichtextTranslations"];
    /**
     * Create an Item
     * @description Create a new block_richtext_translations item.
     */
    post: operations["createItemsBlockRichtextTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_richtext_translations items.
     */
    delete: operations["deleteItemsBlockRichtextTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_richtext_translations items at the same time.
     */
    patch: operations["updateItemsBlockRichtextTranslations"];
  };
  "/items/block_richtext_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_richtext_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockRichtextTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_richtext_translations item.
     */
    delete: operations["deleteSingleItemsBlockRichtextTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_richtext_translations item.
     */
    patch: operations["updateSingleItemsBlockRichtextTranslations"];
  };
  "/items/block_card_translations": {
    /**
     * List Items
     * @description List the block_card_translations items.
     */
    get: operations["readItemsBlockCardTranslations"];
    /**
     * Create an Item
     * @description Create a new block_card_translations item.
     */
    post: operations["createItemsBlockCardTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_card_translations items.
     */
    delete: operations["deleteItemsBlockCardTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_card_translations items at the same time.
     */
    patch: operations["updateItemsBlockCardTranslations"];
  };
  "/items/block_card_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_card_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockCardTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_card_translations item.
     */
    delete: operations["deleteSingleItemsBlockCardTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_card_translations item.
     */
    patch: operations["updateSingleItemsBlockCardTranslations"];
  };
  "/items/block_lightbox": {
    /**
     * List Items
     * @description List the block_lightbox items.
     */
    get: operations["readItemsBlockLightbox"];
    /**
     * Create an Item
     * @description Create a new block_lightbox item.
     */
    post: operations["createItemsBlockLightbox"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_lightbox items.
     */
    delete: operations["deleteItemsBlockLightbox"];
    /**
     * Update Multiple Items
     * @description Update multiple block_lightbox items at the same time.
     */
    patch: operations["updateItemsBlockLightbox"];
  };
  "/items/block_lightbox/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_lightbox item by unique identifier.
     */
    get: operations["readSingleItemsBlockLightbox"];
    /**
     * Delete an Item
     * @description Delete an existing block_lightbox item.
     */
    delete: operations["deleteSingleItemsBlockLightbox"];
    /**
     * Update an Item
     * @description Update an existing block_lightbox item.
     */
    patch: operations["updateSingleItemsBlockLightbox"];
  };
  "/items/block_link_translations": {
    /**
     * List Items
     * @description List the block_link_translations items.
     */
    get: operations["readItemsBlockLinkTranslations"];
    /**
     * Create an Item
     * @description Create a new block_link_translations item.
     */
    post: operations["createItemsBlockLinkTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_link_translations items.
     */
    delete: operations["deleteItemsBlockLinkTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_link_translations items at the same time.
     */
    patch: operations["updateItemsBlockLinkTranslations"];
  };
  "/items/block_link_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_link_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockLinkTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_link_translations item.
     */
    delete: operations["deleteSingleItemsBlockLinkTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_link_translations item.
     */
    patch: operations["updateSingleItemsBlockLinkTranslations"];
  };
  "/items/block_locationanddate": {
    /**
     * List Items
     * @description List the block_locationanddate items.
     */
    get: operations["readItemsBlockLocationanddate"];
    /**
     * Create an Item
     * @description Create a new block_locationanddate item.
     */
    post: operations["createItemsBlockLocationanddate"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_locationanddate items.
     */
    delete: operations["deleteItemsBlockLocationanddate"];
    /**
     * Update Multiple Items
     * @description Update multiple block_locationanddate items at the same time.
     */
    patch: operations["updateItemsBlockLocationanddate"];
  };
  "/items/block_locationanddate/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_locationanddate item by unique identifier.
     */
    get: operations["readSingleItemsBlockLocationanddate"];
    /**
     * Delete an Item
     * @description Delete an existing block_locationanddate item.
     */
    delete: operations["deleteSingleItemsBlockLocationanddate"];
    /**
     * Update an Item
     * @description Update an existing block_locationanddate item.
     */
    patch: operations["updateSingleItemsBlockLocationanddate"];
  };
  "/items/block_conditionalcard_translations": {
    /**
     * List Items
     * @description List the block_conditionalcard_translations items.
     */
    get: operations["readItemsBlockConditionalcardTranslations"];
    /**
     * Create an Item
     * @description Create a new block_conditionalcard_translations item.
     */
    post: operations["createItemsBlockConditionalcardTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_conditionalcard_translations items.
     */
    delete: operations["deleteItemsBlockConditionalcardTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_conditionalcard_translations items at the same time.
     */
    patch: operations["updateItemsBlockConditionalcardTranslations"];
  };
  "/items/block_conditionalcard_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_conditionalcard_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockConditionalcardTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_conditionalcard_translations item.
     */
    delete: operations["deleteSingleItemsBlockConditionalcardTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_conditionalcard_translations item.
     */
    patch: operations["updateSingleItemsBlockConditionalcardTranslations"];
  };
  "/items/block_conditionalcard": {
    /**
     * List Items
     * @description List the block_conditionalcard items.
     */
    get: operations["readItemsBlockConditionalcard"];
    /**
     * Create an Item
     * @description Create a new block_conditionalcard item.
     */
    post: operations["createItemsBlockConditionalcard"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_conditionalcard items.
     */
    delete: operations["deleteItemsBlockConditionalcard"];
    /**
     * Update Multiple Items
     * @description Update multiple block_conditionalcard items at the same time.
     */
    patch: operations["updateItemsBlockConditionalcard"];
  };
  "/items/block_conditionalcard/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_conditionalcard item by unique identifier.
     */
    get: operations["readSingleItemsBlockConditionalcard"];
    /**
     * Delete an Item
     * @description Delete an existing block_conditionalcard item.
     */
    delete: operations["deleteSingleItemsBlockConditionalcard"];
    /**
     * Update an Item
     * @description Update an existing block_conditionalcard item.
     */
    patch: operations["updateSingleItemsBlockConditionalcard"];
  };
  "/items/block_tajenka": {
    /**
     * List Items
     * @description List the block_tajenka items.
     */
    get: operations["readItemsBlockTajenka"];
    /**
     * Create an Item
     * @description Create a new block_tajenka item.
     */
    post: operations["createItemsBlockTajenka"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_tajenka items.
     */
    delete: operations["deleteItemsBlockTajenka"];
    /**
     * Update Multiple Items
     * @description Update multiple block_tajenka items at the same time.
     */
    patch: operations["updateItemsBlockTajenka"];
  };
  "/items/block_tajenka/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_tajenka item by unique identifier.
     */
    get: operations["readSingleItemsBlockTajenka"];
    /**
     * Delete an Item
     * @description Delete an existing block_tajenka item.
     */
    delete: operations["deleteSingleItemsBlockTajenka"];
    /**
     * Update an Item
     * @description Update an existing block_tajenka item.
     */
    patch: operations["updateSingleItemsBlockTajenka"];
  };
  "/items/block_locationanddate_translations": {
    /**
     * List Items
     * @description List the block_locationanddate_translations items.
     */
    get: operations["readItemsBlockLocationanddateTranslations"];
    /**
     * Create an Item
     * @description Create a new block_locationanddate_translations item.
     */
    post: operations["createItemsBlockLocationanddateTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_locationanddate_translations items.
     */
    delete: operations["deleteItemsBlockLocationanddateTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_locationanddate_translations items at the same time.
     */
    patch: operations["updateItemsBlockLocationanddateTranslations"];
  };
  "/items/block_locationanddate_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_locationanddate_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockLocationanddateTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_locationanddate_translations item.
     */
    delete: operations["deleteSingleItemsBlockLocationanddateTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_locationanddate_translations item.
     */
    patch: operations["updateSingleItemsBlockLocationanddateTranslations"];
  };
  "/items/block_bannerhero": {
    /**
     * List Items
     * @description List the block_bannerhero items.
     */
    get: operations["readItemsBlockBannerhero"];
    /**
     * Create an Item
     * @description Create a new block_bannerhero item.
     */
    post: operations["createItemsBlockBannerhero"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_bannerhero items.
     */
    delete: operations["deleteItemsBlockBannerhero"];
    /**
     * Update Multiple Items
     * @description Update multiple block_bannerhero items at the same time.
     */
    patch: operations["updateItemsBlockBannerhero"];
  };
  "/items/block_bannerhero/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_bannerhero item by unique identifier.
     */
    get: operations["readSingleItemsBlockBannerhero"];
    /**
     * Delete an Item
     * @description Delete an existing block_bannerhero item.
     */
    delete: operations["deleteSingleItemsBlockBannerhero"];
    /**
     * Update an Item
     * @description Update an existing block_bannerhero item.
     */
    patch: operations["updateSingleItemsBlockBannerhero"];
  };
  "/items/block_bannerhero_translations": {
    /**
     * List Items
     * @description List the block_bannerhero_translations items.
     */
    get: operations["readItemsBlockBannerheroTranslations"];
    /**
     * Create an Item
     * @description Create a new block_bannerhero_translations item.
     */
    post: operations["createItemsBlockBannerheroTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_bannerhero_translations items.
     */
    delete: operations["deleteItemsBlockBannerheroTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_bannerhero_translations items at the same time.
     */
    patch: operations["updateItemsBlockBannerheroTranslations"];
  };
  "/items/block_bannerhero_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_bannerhero_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockBannerheroTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_bannerhero_translations item.
     */
    delete: operations["deleteSingleItemsBlockBannerheroTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_bannerhero_translations item.
     */
    patch: operations["updateSingleItemsBlockBannerheroTranslations"];
  };
  "/items/block_partner": {
    /**
     * List Items
     * @description List the block_partner items.
     */
    get: operations["readItemsBlockPartner"];
    /**
     * Create an Item
     * @description Create a new block_partner item.
     */
    post: operations["createItemsBlockPartner"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_partner items.
     */
    delete: operations["deleteItemsBlockPartner"];
    /**
     * Update Multiple Items
     * @description Update multiple block_partner items at the same time.
     */
    patch: operations["updateItemsBlockPartner"];
  };
  "/items/block_partner/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_partner item by unique identifier.
     */
    get: operations["readSingleItemsBlockPartner"];
    /**
     * Delete an Item
     * @description Delete an existing block_partner item.
     */
    delete: operations["deleteSingleItemsBlockPartner"];
    /**
     * Update an Item
     * @description Update an existing block_partner item.
     */
    patch: operations["updateSingleItemsBlockPartner"];
  };
  "/items/block_festival_poster": {
    /**
     * List Items
     * @description List the block_festival_poster items.
     */
    get: operations["readItemsBlockFestivalPoster"];
    /**
     * Create an Item
     * @description Create a new block_festival_poster item.
     */
    post: operations["createItemsBlockFestivalPoster"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_poster items.
     */
    delete: operations["deleteItemsBlockFestivalPoster"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_poster items at the same time.
     */
    patch: operations["updateItemsBlockFestivalPoster"];
  };
  "/items/block_festival_poster/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_poster item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalPoster"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_poster item.
     */
    delete: operations["deleteSingleItemsBlockFestivalPoster"];
    /**
     * Update an Item
     * @description Update an existing block_festival_poster item.
     */
    patch: operations["updateSingleItemsBlockFestivalPoster"];
  };
  "/items/block_video_trailer_translations": {
    /**
     * List Items
     * @description List the block_video_trailer_translations items.
     */
    get: operations["readItemsBlockVideoTrailerTranslations"];
    /**
     * Create an Item
     * @description Create a new block_video_trailer_translations item.
     */
    post: operations["createItemsBlockVideoTrailerTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_video_trailer_translations items.
     */
    delete: operations["deleteItemsBlockVideoTrailerTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_video_trailer_translations items at the same time.
     */
    patch: operations["updateItemsBlockVideoTrailerTranslations"];
  };
  "/items/block_video_trailer_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_video_trailer_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockVideoTrailerTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_video_trailer_translations item.
     */
    delete: operations["deleteSingleItemsBlockVideoTrailerTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_video_trailer_translations item.
     */
    patch: operations["updateSingleItemsBlockVideoTrailerTranslations"];
  };
  "/items/block_festival_poster_translations": {
    /**
     * List Items
     * @description List the block_festival_poster_translations items.
     */
    get: operations["readItemsBlockFestivalPosterTranslations"];
    /**
     * Create an Item
     * @description Create a new block_festival_poster_translations item.
     */
    post: operations["createItemsBlockFestivalPosterTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_poster_translations items.
     */
    delete: operations["deleteItemsBlockFestivalPosterTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_poster_translations items at the same time.
     */
    patch: operations["updateItemsBlockFestivalPosterTranslations"];
  };
  "/items/block_festival_poster_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_poster_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalPosterTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_poster_translations item.
     */
    delete: operations["deleteSingleItemsBlockFestivalPosterTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_festival_poster_translations item.
     */
    patch: operations["updateSingleItemsBlockFestivalPosterTranslations"];
  };
  "/items/block_video_trailer": {
    /**
     * List Items
     * @description List the block_video_trailer items.
     */
    get: operations["readItemsBlockVideoTrailer"];
    /**
     * Create an Item
     * @description Create a new block_video_trailer item.
     */
    post: operations["createItemsBlockVideoTrailer"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_video_trailer items.
     */
    delete: operations["deleteItemsBlockVideoTrailer"];
    /**
     * Update Multiple Items
     * @description Update multiple block_video_trailer items at the same time.
     */
    patch: operations["updateItemsBlockVideoTrailer"];
  };
  "/items/block_video_trailer/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_video_trailer item by unique identifier.
     */
    get: operations["readSingleItemsBlockVideoTrailer"];
    /**
     * Delete an Item
     * @description Delete an existing block_video_trailer item.
     */
    delete: operations["deleteSingleItemsBlockVideoTrailer"];
    /**
     * Update an Item
     * @description Update an existing block_video_trailer item.
     */
    patch: operations["updateSingleItemsBlockVideoTrailer"];
  };
  "/items/block_button_translations": {
    /**
     * List Items
     * @description List the block_button_translations items.
     */
    get: operations["readItemsBlockButtonTranslations"];
    /**
     * Create an Item
     * @description Create a new block_button_translations item.
     */
    post: operations["createItemsBlockButtonTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_button_translations items.
     */
    delete: operations["deleteItemsBlockButtonTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_button_translations items at the same time.
     */
    patch: operations["updateItemsBlockButtonTranslations"];
  };
  "/items/block_button_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_button_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockButtonTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_button_translations item.
     */
    delete: operations["deleteSingleItemsBlockButtonTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_button_translations item.
     */
    patch: operations["updateSingleItemsBlockButtonTranslations"];
  };
  "/items/film_crew_film_person": {
    /**
     * List Items
     * @description List the film_crew_film_person items.
     */
    get: operations["readItemsFilmCrewFilmPerson"];
    /**
     * Create an Item
     * @description Create a new film_crew_film_person item.
     */
    post: operations["createItemsFilmCrewFilmPerson"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_crew_film_person items.
     */
    delete: operations["deleteItemsFilmCrewFilmPerson"];
    /**
     * Update Multiple Items
     * @description Update multiple film_crew_film_person items at the same time.
     */
    patch: operations["updateItemsFilmCrewFilmPerson"];
  };
  "/items/film_crew_film_person/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_crew_film_person item by unique identifier.
     */
    get: operations["readSingleItemsFilmCrewFilmPerson"];
    /**
     * Delete an Item
     * @description Delete an existing film_crew_film_person item.
     */
    delete: operations["deleteSingleItemsFilmCrewFilmPerson"];
    /**
     * Update an Item
     * @description Update an existing film_crew_film_person item.
     */
    patch: operations["updateSingleItemsFilmCrewFilmPerson"];
  };
  "/items/page_blocks_background": {
    /**
     * List Items
     * @description List the page_blocks_background items.
     */
    get: operations["readItemsPageBlocksBackground"];
    /**
     * Create an Item
     * @description Create a new page_blocks_background item.
     */
    post: operations["createItemsPageBlocksBackground"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing page_blocks_background items.
     */
    delete: operations["deleteItemsPageBlocksBackground"];
    /**
     * Update Multiple Items
     * @description Update multiple page_blocks_background items at the same time.
     */
    patch: operations["updateItemsPageBlocksBackground"];
  };
  "/items/page_blocks_background/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single page_blocks_background item by unique identifier.
     */
    get: operations["readSingleItemsPageBlocksBackground"];
    /**
     * Delete an Item
     * @description Delete an existing page_blocks_background item.
     */
    delete: operations["deleteSingleItemsPageBlocksBackground"];
    /**
     * Update an Item
     * @description Update an existing page_blocks_background item.
     */
    patch: operations["updateSingleItemsPageBlocksBackground"];
  };
  "/items/gradient": {
    /**
     * List Items
     * @description List the gradient items.
     */
    get: operations["readItemsGradient"];
    /**
     * Create an Item
     * @description Create a new gradient item.
     */
    post: operations["createItemsGradient"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing gradient items.
     */
    delete: operations["deleteItemsGradient"];
    /**
     * Update Multiple Items
     * @description Update multiple gradient items at the same time.
     */
    patch: operations["updateItemsGradient"];
  };
  "/items/gradient/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single gradient item by unique identifier.
     */
    get: operations["readSingleItemsGradient"];
    /**
     * Delete an Item
     * @description Delete an existing gradient item.
     */
    delete: operations["deleteSingleItemsGradient"];
    /**
     * Update an Item
     * @description Update an existing gradient item.
     */
    patch: operations["updateSingleItemsGradient"];
  };
  "/items/block_logo": {
    /**
     * List Items
     * @description List the block_logo items.
     */
    get: operations["readItemsBlockLogo"];
    /**
     * Create an Item
     * @description Create a new block_logo item.
     */
    post: operations["createItemsBlockLogo"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_logo items.
     */
    delete: operations["deleteItemsBlockLogo"];
    /**
     * Update Multiple Items
     * @description Update multiple block_logo items at the same time.
     */
    patch: operations["updateItemsBlockLogo"];
  };
  "/items/block_logo/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_logo item by unique identifier.
     */
    get: operations["readSingleItemsBlockLogo"];
    /**
     * Delete an Item
     * @description Delete an existing block_logo item.
     */
    delete: operations["deleteSingleItemsBlockLogo"];
    /**
     * Update an Item
     * @description Update an existing block_logo item.
     */
    patch: operations["updateSingleItemsBlockLogo"];
  };
  "/items/page_blocks_background_1": {
    /**
     * List Items
     * @description List the page_blocks_background_1 items.
     */
    get: operations["readItemsPageBlocksBackground1"];
    /**
     * Create an Item
     * @description Create a new page_blocks_background_1 item.
     */
    post: operations["createItemsPageBlocksBackground1"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing page_blocks_background_1 items.
     */
    delete: operations["deleteItemsPageBlocksBackground1"];
    /**
     * Update Multiple Items
     * @description Update multiple page_blocks_background_1 items at the same time.
     */
    patch: operations["updateItemsPageBlocksBackground1"];
  };
  "/items/page_blocks_background_1/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single page_blocks_background_1 item by unique identifier.
     */
    get: operations["readSingleItemsPageBlocksBackground1"];
    /**
     * Delete an Item
     * @description Delete an existing page_blocks_background_1 item.
     */
    delete: operations["deleteSingleItemsPageBlocksBackground1"];
    /**
     * Update an Item
     * @description Update an existing page_blocks_background_1 item.
     */
    patch: operations["updateSingleItemsPageBlocksBackground1"];
  };
  "/items/block_logo_image": {
    /**
     * List Items
     * @description List the block_logo_image items.
     */
    get: operations["readItemsBlockLogoImage"];
    /**
     * Create an Item
     * @description Create a new block_logo_image item.
     */
    post: operations["createItemsBlockLogoImage"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_logo_image items.
     */
    delete: operations["deleteItemsBlockLogoImage"];
    /**
     * Update Multiple Items
     * @description Update multiple block_logo_image items at the same time.
     */
    patch: operations["updateItemsBlockLogoImage"];
  };
  "/items/block_logo_image/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_logo_image item by unique identifier.
     */
    get: operations["readSingleItemsBlockLogoImage"];
    /**
     * Delete an Item
     * @description Delete an existing block_logo_image item.
     */
    delete: operations["deleteSingleItemsBlockLogoImage"];
    /**
     * Update an Item
     * @description Update an existing block_logo_image item.
     */
    patch: operations["updateSingleItemsBlockLogoImage"];
  };
  "/items/block_countdown_translations": {
    /**
     * List Items
     * @description List the block_countdown_translations items.
     */
    get: operations["readItemsBlockCountdownTranslations"];
    /**
     * Create an Item
     * @description Create a new block_countdown_translations item.
     */
    post: operations["createItemsBlockCountdownTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_countdown_translations items.
     */
    delete: operations["deleteItemsBlockCountdownTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_countdown_translations items at the same time.
     */
    patch: operations["updateItemsBlockCountdownTranslations"];
  };
  "/items/block_countdown_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_countdown_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockCountdownTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_countdown_translations item.
     */
    delete: operations["deleteSingleItemsBlockCountdownTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_countdown_translations item.
     */
    patch: operations["updateSingleItemsBlockCountdownTranslations"];
  };
  "/items/block_countdown": {
    /**
     * List Items
     * @description List the block_countdown items.
     */
    get: operations["readItemsBlockCountdown"];
    /**
     * Create an Item
     * @description Create a new block_countdown item.
     */
    post: operations["createItemsBlockCountdown"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_countdown items.
     */
    delete: operations["deleteItemsBlockCountdown"];
    /**
     * Update Multiple Items
     * @description Update multiple block_countdown items at the same time.
     */
    patch: operations["updateItemsBlockCountdown"];
  };
  "/items/block_countdown/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_countdown item by unique identifier.
     */
    get: operations["readSingleItemsBlockCountdown"];
    /**
     * Delete an Item
     * @description Delete an existing block_countdown item.
     */
    delete: operations["deleteSingleItemsBlockCountdown"];
    /**
     * Update an Item
     * @description Update an existing block_countdown item.
     */
    patch: operations["updateSingleItemsBlockCountdown"];
  };
  "/items/film_crew_film_person_film_crew_role": {
    /**
     * List Items
     * @description List the film_crew_film_person_film_crew_role items.
     */
    get: operations["readItemsFilmCrewFilmPersonFilmCrewRole"];
    /**
     * Create an Item
     * @description Create a new film_crew_film_person_film_crew_role item.
     */
    post: operations["createItemsFilmCrewFilmPersonFilmCrewRole"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_crew_film_person_film_crew_role items.
     */
    delete: operations["deleteItemsFilmCrewFilmPersonFilmCrewRole"];
    /**
     * Update Multiple Items
     * @description Update multiple film_crew_film_person_film_crew_role items at the same time.
     */
    patch: operations["updateItemsFilmCrewFilmPersonFilmCrewRole"];
  };
  "/items/film_crew_film_person_film_crew_role/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_crew_film_person_film_crew_role item by unique identifier.
     */
    get: operations["readSingleItemsFilmCrewFilmPersonFilmCrewRole"];
    /**
     * Delete an Item
     * @description Delete an existing film_crew_film_person_film_crew_role item.
     */
    delete: operations["deleteSingleItemsFilmCrewFilmPersonFilmCrewRole"];
    /**
     * Update an Item
     * @description Update an existing film_crew_film_person_film_crew_role item.
     */
    patch: operations["updateSingleItemsFilmCrewFilmPersonFilmCrewRole"];
  };
  "/items/vote": {
    /**
     * List Items
     * @description List the vote items.
     */
    get: operations["readItemsVote"];
    /**
     * Create an Item
     * @description Create a new vote item.
     */
    post: operations["createItemsVote"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing vote items.
     */
    delete: operations["deleteItemsVote"];
    /**
     * Update Multiple Items
     * @description Update multiple vote items at the same time.
     */
    patch: operations["updateItemsVote"];
  };
  "/items/vote/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single vote item by unique identifier.
     */
    get: operations["readSingleItemsVote"];
    /**
     * Delete an Item
     * @description Delete an existing vote item.
     */
    delete: operations["deleteSingleItemsVote"];
    /**
     * Update an Item
     * @description Update an existing vote item.
     */
    patch: operations["updateSingleItemsVote"];
  };
  "/items/block_patron_translations": {
    /**
     * List Items
     * @description List the block_patron_translations items.
     */
    get: operations["readItemsBlockPatronTranslations"];
    /**
     * Create an Item
     * @description Create a new block_patron_translations item.
     */
    post: operations["createItemsBlockPatronTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_patron_translations items.
     */
    delete: operations["deleteItemsBlockPatronTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_patron_translations items at the same time.
     */
    patch: operations["updateItemsBlockPatronTranslations"];
  };
  "/items/block_patron_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_patron_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockPatronTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_patron_translations item.
     */
    delete: operations["deleteSingleItemsBlockPatronTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_patron_translations item.
     */
    patch: operations["updateSingleItemsBlockPatronTranslations"];
  };
  "/items/voting": {
    /**
     * List Items
     * @description List the voting items.
     */
    get: operations["readItemsVoting"];
    /**
     * Create an Item
     * @description Create a new voting item.
     */
    post: operations["createItemsVoting"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voting items.
     */
    delete: operations["deleteItemsVoting"];
    /**
     * Update Multiple Items
     * @description Update multiple voting items at the same time.
     */
    patch: operations["updateItemsVoting"];
  };
  "/items/voting/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voting item by unique identifier.
     */
    get: operations["readSingleItemsVoting"];
    /**
     * Delete an Item
     * @description Delete an existing voting item.
     */
    delete: operations["deleteSingleItemsVoting"];
    /**
     * Update an Item
     * @description Update an existing voting item.
     */
    patch: operations["updateSingleItemsVoting"];
  };
  "/items/block_patron": {
    /**
     * List Items
     * @description List the block_patron items.
     */
    get: operations["readItemsBlockPatron"];
    /**
     * Create an Item
     * @description Create a new block_patron item.
     */
    post: operations["createItemsBlockPatron"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_patron items.
     */
    delete: operations["deleteItemsBlockPatron"];
    /**
     * Update Multiple Items
     * @description Update multiple block_patron items at the same time.
     */
    patch: operations["updateItemsBlockPatron"];
  };
  "/items/block_patron/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_patron item by unique identifier.
     */
    get: operations["readSingleItemsBlockPatron"];
    /**
     * Delete an Item
     * @description Delete an existing block_patron item.
     */
    delete: operations["deleteSingleItemsBlockPatron"];
    /**
     * Update an Item
     * @description Update an existing block_patron item.
     */
    patch: operations["updateSingleItemsBlockPatron"];
  };
  "/items/block_festival_footer_translations": {
    /**
     * List Items
     * @description List the block_festival_footer_translations items.
     */
    get: operations["readItemsBlockFestivalFooterTranslations"];
    /**
     * Create an Item
     * @description Create a new block_festival_footer_translations item.
     */
    post: operations["createItemsBlockFestivalFooterTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_footer_translations items.
     */
    delete: operations["deleteItemsBlockFestivalFooterTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_footer_translations items at the same time.
     */
    patch: operations["updateItemsBlockFestivalFooterTranslations"];
  };
  "/items/block_festival_footer_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_footer_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalFooterTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_footer_translations item.
     */
    delete: operations["deleteSingleItemsBlockFestivalFooterTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_festival_footer_translations item.
     */
    patch: operations["updateSingleItemsBlockFestivalFooterTranslations"];
  };
  "/items/block_festival_footer": {
    /**
     * List Items
     * @description List the block_festival_footer items.
     */
    get: operations["readItemsBlockFestivalFooter"];
    /**
     * Create an Item
     * @description Create a new block_festival_footer item.
     */
    post: operations["createItemsBlockFestivalFooter"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_footer items.
     */
    delete: operations["deleteItemsBlockFestivalFooter"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_footer items at the same time.
     */
    patch: operations["updateItemsBlockFestivalFooter"];
  };
  "/items/block_festival_footer/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_footer item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalFooter"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_footer item.
     */
    delete: operations["deleteSingleItemsBlockFestivalFooter"];
    /**
     * Update an Item
     * @description Update an existing block_festival_footer item.
     */
    patch: operations["updateSingleItemsBlockFestivalFooter"];
  };
  "/items/block_jury": {
    /**
     * List Items
     * @description List the block_jury items.
     */
    get: operations["readItemsBlockJury"];
    /**
     * Create an Item
     * @description Create a new block_jury item.
     */
    post: operations["createItemsBlockJury"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_jury items.
     */
    delete: operations["deleteItemsBlockJury"];
    /**
     * Update Multiple Items
     * @description Update multiple block_jury items at the same time.
     */
    patch: operations["updateItemsBlockJury"];
  };
  "/items/block_jury/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_jury item by unique identifier.
     */
    get: operations["readSingleItemsBlockJury"];
    /**
     * Delete an Item
     * @description Delete an existing block_jury item.
     */
    delete: operations["deleteSingleItemsBlockJury"];
    /**
     * Update an Item
     * @description Update an existing block_jury item.
     */
    patch: operations["updateSingleItemsBlockJury"];
  };
  "/items/block_jury_translations": {
    /**
     * List Items
     * @description List the block_jury_translations items.
     */
    get: operations["readItemsBlockJuryTranslations"];
    /**
     * Create an Item
     * @description Create a new block_jury_translations item.
     */
    post: operations["createItemsBlockJuryTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_jury_translations items.
     */
    delete: operations["deleteItemsBlockJuryTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_jury_translations items at the same time.
     */
    patch: operations["updateItemsBlockJuryTranslations"];
  };
  "/items/block_jury_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_jury_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockJuryTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_jury_translations item.
     */
    delete: operations["deleteSingleItemsBlockJuryTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_jury_translations item.
     */
    patch: operations["updateSingleItemsBlockJuryTranslations"];
  };
  "/items/block_festival_footer_block_social_media": {
    /**
     * List Items
     * @description List the block_festival_footer_block_social_media items.
     */
    get: operations["readItemsBlockFestivalFooterBlockSocialMedia"];
    /**
     * Create an Item
     * @description Create a new block_festival_footer_block_social_media item.
     */
    post: operations["createItemsBlockFestivalFooterBlockSocialMedia"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_footer_block_social_media items.
     */
    delete: operations["deleteItemsBlockFestivalFooterBlockSocialMedia"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_footer_block_social_media items at the same time.
     */
    patch: operations["updateItemsBlockFestivalFooterBlockSocialMedia"];
  };
  "/items/block_festival_footer_block_social_media/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_footer_block_social_media item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalFooterBlockSocialMedia"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_footer_block_social_media item.
     */
    delete: operations["deleteSingleItemsBlockFestivalFooterBlockSocialMedia"];
    /**
     * Update an Item
     * @description Update an existing block_festival_footer_block_social_media item.
     */
    patch: operations["updateSingleItemsBlockFestivalFooterBlockSocialMedia"];
  };
  "/items/block_festival_footer_block_social_media_1": {
    /**
     * List Items
     * @description List the block_festival_footer_block_social_media_1 items.
     */
    get: operations["readItemsBlockFestivalFooterBlockSocialMedia1"];
    /**
     * Create an Item
     * @description Create a new block_festival_footer_block_social_media_1 item.
     */
    post: operations["createItemsBlockFestivalFooterBlockSocialMedia1"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_footer_block_social_media_1 items.
     */
    delete: operations["deleteItemsBlockFestivalFooterBlockSocialMedia1"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_footer_block_social_media_1 items at the same time.
     */
    patch: operations["updateItemsBlockFestivalFooterBlockSocialMedia1"];
  };
  "/items/block_festival_footer_block_social_media_1/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_footer_block_social_media_1 item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalFooterBlockSocialMedia1"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_footer_block_social_media_1 item.
     */
    delete: operations["deleteSingleItemsBlockFestivalFooterBlockSocialMedia1"];
    /**
     * Update an Item
     * @description Update an existing block_festival_footer_block_social_media_1 item.
     */
    patch: operations["updateSingleItemsBlockFestivalFooterBlockSocialMedia1"];
  };
  "/items/block_image_row": {
    /**
     * List Items
     * @description List the block_image_row items.
     */
    get: operations["readItemsBlockImageRow"];
    /**
     * Create an Item
     * @description Create a new block_image_row item.
     */
    post: operations["createItemsBlockImageRow"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_image_row items.
     */
    delete: operations["deleteItemsBlockImageRow"];
    /**
     * Update Multiple Items
     * @description Update multiple block_image_row items at the same time.
     */
    patch: operations["updateItemsBlockImageRow"];
  };
  "/items/block_image_row/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_image_row item by unique identifier.
     */
    get: operations["readSingleItemsBlockImageRow"];
    /**
     * Delete an Item
     * @description Delete an existing block_image_row item.
     */
    delete: operations["deleteSingleItemsBlockImageRow"];
    /**
     * Update an Item
     * @description Update an existing block_image_row item.
     */
    patch: operations["updateSingleItemsBlockImageRow"];
  };
  "/items/block_image_row_images": {
    /**
     * List Items
     * @description List the block_image_row_images items.
     */
    get: operations["readItemsBlockImageRowImages"];
    /**
     * Create an Item
     * @description Create a new block_image_row_images item.
     */
    post: operations["createItemsBlockImageRowImages"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_image_row_images items.
     */
    delete: operations["deleteItemsBlockImageRowImages"];
    /**
     * Update Multiple Items
     * @description Update multiple block_image_row_images items at the same time.
     */
    patch: operations["updateItemsBlockImageRowImages"];
  };
  "/items/block_image_row_images/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_image_row_images item by unique identifier.
     */
    get: operations["readSingleItemsBlockImageRowImages"];
    /**
     * Delete an Item
     * @description Delete an existing block_image_row_images item.
     */
    delete: operations["deleteSingleItemsBlockImageRowImages"];
    /**
     * Update an Item
     * @description Update an existing block_image_row_images item.
     */
    patch: operations["updateSingleItemsBlockImageRowImages"];
  };
  "/items/social": {
    /**
     * List Items
     * @description List the social items.
     */
    get: operations["readItemsSocial"];
    /**
     * Create an Item
     * @description Create a new social item.
     */
    post: operations["createItemsSocial"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing social items.
     */
    delete: operations["deleteItemsSocial"];
    /**
     * Update Multiple Items
     * @description Update multiple social items at the same time.
     */
    patch: operations["updateItemsSocial"];
  };
  "/items/social/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single social item by unique identifier.
     */
    get: operations["readSingleItemsSocial"];
    /**
     * Delete an Item
     * @description Delete an existing social item.
     */
    delete: operations["deleteSingleItemsSocial"];
    /**
     * Update an Item
     * @description Update an existing social item.
     */
    patch: operations["updateSingleItemsSocial"];
  };
  "/items/block_festival_footer_social": {
    /**
     * List Items
     * @description List the block_festival_footer_social items.
     */
    get: operations["readItemsBlockFestivalFooterSocial"];
    /**
     * Create an Item
     * @description Create a new block_festival_footer_social item.
     */
    post: operations["createItemsBlockFestivalFooterSocial"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_festival_footer_social items.
     */
    delete: operations["deleteItemsBlockFestivalFooterSocial"];
    /**
     * Update Multiple Items
     * @description Update multiple block_festival_footer_social items at the same time.
     */
    patch: operations["updateItemsBlockFestivalFooterSocial"];
  };
  "/items/block_festival_footer_social/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_festival_footer_social item by unique identifier.
     */
    get: operations["readSingleItemsBlockFestivalFooterSocial"];
    /**
     * Delete an Item
     * @description Delete an existing block_festival_footer_social item.
     */
    delete: operations["deleteSingleItemsBlockFestivalFooterSocial"];
    /**
     * Update an Item
     * @description Update an existing block_festival_footer_social item.
     */
    patch: operations["updateSingleItemsBlockFestivalFooterSocial"];
  };
  "/items/block_image_row_directus_files": {
    /**
     * List Items
     * @description List the block_image_row_directus_files items.
     */
    get: operations["readItemsBlockImageRowDirectusFiles"];
    /**
     * Create an Item
     * @description Create a new block_image_row_directus_files item.
     */
    post: operations["createItemsBlockImageRowDirectusFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_image_row_directus_files items.
     */
    delete: operations["deleteItemsBlockImageRowDirectusFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple block_image_row_directus_files items at the same time.
     */
    patch: operations["updateItemsBlockImageRowDirectusFiles"];
  };
  "/items/block_image_row_directus_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_image_row_directus_files item by unique identifier.
     */
    get: operations["readSingleItemsBlockImageRowDirectusFiles"];
    /**
     * Delete an Item
     * @description Delete an existing block_image_row_directus_files item.
     */
    delete: operations["deleteSingleItemsBlockImageRowDirectusFiles"];
    /**
     * Update an Item
     * @description Update an existing block_image_row_directus_files item.
     */
    patch: operations["updateSingleItemsBlockImageRowDirectusFiles"];
  };
  "/items/block_image_row_files": {
    /**
     * List Items
     * @description List the block_image_row_files items.
     */
    get: operations["readItemsBlockImageRowFiles"];
    /**
     * Create an Item
     * @description Create a new block_image_row_files item.
     */
    post: operations["createItemsBlockImageRowFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_image_row_files items.
     */
    delete: operations["deleteItemsBlockImageRowFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple block_image_row_files items at the same time.
     */
    patch: operations["updateItemsBlockImageRowFiles"];
  };
  "/items/block_image_row_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_image_row_files item by unique identifier.
     */
    get: operations["readSingleItemsBlockImageRowFiles"];
    /**
     * Delete an Item
     * @description Delete an existing block_image_row_files item.
     */
    delete: operations["deleteSingleItemsBlockImageRowFiles"];
    /**
     * Update an Item
     * @description Update an existing block_image_row_files item.
     */
    patch: operations["updateSingleItemsBlockImageRowFiles"];
  };
  "/items/block_partner_row_block_partner": {
    /**
     * List Items
     * @description List the block_partner_row_block_partner items.
     */
    get: operations["readItemsBlockPartnerRowBlockPartner"];
    /**
     * Create an Item
     * @description Create a new block_partner_row_block_partner item.
     */
    post: operations["createItemsBlockPartnerRowBlockPartner"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_partner_row_block_partner items.
     */
    delete: operations["deleteItemsBlockPartnerRowBlockPartner"];
    /**
     * Update Multiple Items
     * @description Update multiple block_partner_row_block_partner items at the same time.
     */
    patch: operations["updateItemsBlockPartnerRowBlockPartner"];
  };
  "/items/block_partner_row_block_partner/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_partner_row_block_partner item by unique identifier.
     */
    get: operations["readSingleItemsBlockPartnerRowBlockPartner"];
    /**
     * Delete an Item
     * @description Delete an existing block_partner_row_block_partner item.
     */
    delete: operations["deleteSingleItemsBlockPartnerRowBlockPartner"];
    /**
     * Update an Item
     * @description Update an existing block_partner_row_block_partner item.
     */
    patch: operations["updateSingleItemsBlockPartnerRowBlockPartner"];
  };
  "/items/partner_row_block_partner": {
    /**
     * List Items
     * @description List the partner_row_block_partner items.
     */
    get: operations["readItemsPartnerRowBlockPartner"];
    /**
     * Create an Item
     * @description Create a new partner_row_block_partner item.
     */
    post: operations["createItemsPartnerRowBlockPartner"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing partner_row_block_partner items.
     */
    delete: operations["deleteItemsPartnerRowBlockPartner"];
    /**
     * Update Multiple Items
     * @description Update multiple partner_row_block_partner items at the same time.
     */
    patch: operations["updateItemsPartnerRowBlockPartner"];
  };
  "/items/partner_row_block_partner/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single partner_row_block_partner item by unique identifier.
     */
    get: operations["readSingleItemsPartnerRowBlockPartner"];
    /**
     * Delete an Item
     * @description Delete an existing partner_row_block_partner item.
     */
    delete: operations["deleteSingleItemsPartnerRowBlockPartner"];
    /**
     * Update an Item
     * @description Update an existing partner_row_block_partner item.
     */
    patch: operations["updateSingleItemsPartnerRowBlockPartner"];
  };
  "/items/block_partner_row": {
    /**
     * List Items
     * @description List the block_partner_row items.
     */
    get: operations["readItemsBlockPartnerRow"];
    /**
     * Create an Item
     * @description Create a new block_partner_row item.
     */
    post: operations["createItemsBlockPartnerRow"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_partner_row items.
     */
    delete: operations["deleteItemsBlockPartnerRow"];
    /**
     * Update Multiple Items
     * @description Update multiple block_partner_row items at the same time.
     */
    patch: operations["updateItemsBlockPartnerRow"];
  };
  "/items/block_partner_row/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_partner_row item by unique identifier.
     */
    get: operations["readSingleItemsBlockPartnerRow"];
    /**
     * Delete an Item
     * @description Delete an existing block_partner_row item.
     */
    delete: operations["deleteSingleItemsBlockPartnerRow"];
    /**
     * Update an Item
     * @description Update an existing block_partner_row item.
     */
    patch: operations["updateSingleItemsBlockPartnerRow"];
  };
  "/items/block_referee": {
    /**
     * List Items
     * @description List the block_referee items.
     */
    get: operations["readItemsBlockReferee"];
    /**
     * Create an Item
     * @description Create a new block_referee item.
     */
    post: operations["createItemsBlockReferee"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_referee items.
     */
    delete: operations["deleteItemsBlockReferee"];
    /**
     * Update Multiple Items
     * @description Update multiple block_referee items at the same time.
     */
    patch: operations["updateItemsBlockReferee"];
  };
  "/items/block_referee/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_referee item by unique identifier.
     */
    get: operations["readSingleItemsBlockReferee"];
    /**
     * Delete an Item
     * @description Delete an existing block_referee item.
     */
    delete: operations["deleteSingleItemsBlockReferee"];
    /**
     * Update an Item
     * @description Update an existing block_referee item.
     */
    patch: operations["updateSingleItemsBlockReferee"];
  };
  "/items/block_referee_translations": {
    /**
     * List Items
     * @description List the block_referee_translations items.
     */
    get: operations["readItemsBlockRefereeTranslations"];
    /**
     * Create an Item
     * @description Create a new block_referee_translations item.
     */
    post: operations["createItemsBlockRefereeTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_referee_translations items.
     */
    delete: operations["deleteItemsBlockRefereeTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_referee_translations items at the same time.
     */
    patch: operations["updateItemsBlockRefereeTranslations"];
  };
  "/items/block_referee_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_referee_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockRefereeTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_referee_translations item.
     */
    delete: operations["deleteSingleItemsBlockRefereeTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_referee_translations item.
     */
    patch: operations["updateSingleItemsBlockRefereeTranslations"];
  };
  "/items/film": {
    /**
     * List Items
     * @description List the film items.
     */
    get: operations["readItemsFilm"];
    /**
     * Create an Item
     * @description Create a new film item.
     */
    post: operations["createItemsFilm"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film items.
     */
    delete: operations["deleteItemsFilm"];
    /**
     * Update Multiple Items
     * @description Update multiple film items at the same time.
     */
    patch: operations["updateItemsFilm"];
  };
  "/items/film/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film item by unique identifier.
     */
    get: operations["readSingleItemsFilm"];
    /**
     * Delete an Item
     * @description Delete an existing film item.
     */
    delete: operations["deleteSingleItemsFilm"];
    /**
     * Update an Item
     * @description Update an existing film item.
     */
    patch: operations["updateSingleItemsFilm"];
  };
  "/items/film_actor_film_person": {
    /**
     * List Items
     * @description List the film_actor_film_person items.
     */
    get: operations["readItemsFilmActorFilmPerson"];
    /**
     * Create an Item
     * @description Create a new film_actor_film_person item.
     */
    post: operations["createItemsFilmActorFilmPerson"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_actor_film_person items.
     */
    delete: operations["deleteItemsFilmActorFilmPerson"];
    /**
     * Update Multiple Items
     * @description Update multiple film_actor_film_person items at the same time.
     */
    patch: operations["updateItemsFilmActorFilmPerson"];
  };
  "/items/film_actor_film_person/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_actor_film_person item by unique identifier.
     */
    get: operations["readSingleItemsFilmActorFilmPerson"];
    /**
     * Delete an Item
     * @description Delete an existing film_actor_film_person item.
     */
    delete: operations["deleteSingleItemsFilmActorFilmPerson"];
    /**
     * Update an Item
     * @description Update an existing film_actor_film_person item.
     */
    patch: operations["updateSingleItemsFilmActorFilmPerson"];
  };
  "/items/block_contact": {
    /**
     * List Items
     * @description List the block_contact items.
     */
    get: operations["readItemsBlockContact"];
    /**
     * Create an Item
     * @description Create a new block_contact item.
     */
    post: operations["createItemsBlockContact"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_contact items.
     */
    delete: operations["deleteItemsBlockContact"];
    /**
     * Update Multiple Items
     * @description Update multiple block_contact items at the same time.
     */
    patch: operations["updateItemsBlockContact"];
  };
  "/items/block_contact/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_contact item by unique identifier.
     */
    get: operations["readSingleItemsBlockContact"];
    /**
     * Delete an Item
     * @description Delete an existing block_contact item.
     */
    delete: operations["deleteSingleItemsBlockContact"];
    /**
     * Update an Item
     * @description Update an existing block_contact item.
     */
    patch: operations["updateSingleItemsBlockContact"];
  };
  "/items/block_article": {
    /**
     * List Items
     * @description List the block_article items.
     */
    get: operations["readItemsBlockArticle"];
    /**
     * Create an Item
     * @description Create a new block_article item.
     */
    post: operations["createItemsBlockArticle"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_article items.
     */
    delete: operations["deleteItemsBlockArticle"];
    /**
     * Update Multiple Items
     * @description Update multiple block_article items at the same time.
     */
    patch: operations["updateItemsBlockArticle"];
  };
  "/items/block_article/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_article item by unique identifier.
     */
    get: operations["readSingleItemsBlockArticle"];
    /**
     * Delete an Item
     * @description Delete an existing block_article item.
     */
    delete: operations["deleteSingleItemsBlockArticle"];
    /**
     * Update an Item
     * @description Update an existing block_article item.
     */
    patch: operations["updateSingleItemsBlockArticle"];
  };
  "/items/block_info_stack": {
    /**
     * List Items
     * @description List the block_info_stack items.
     */
    get: operations["readItemsBlockInfoStack"];
    /**
     * Create an Item
     * @description Create a new block_info_stack item.
     */
    post: operations["createItemsBlockInfoStack"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_info_stack items.
     */
    delete: operations["deleteItemsBlockInfoStack"];
    /**
     * Update Multiple Items
     * @description Update multiple block_info_stack items at the same time.
     */
    patch: operations["updateItemsBlockInfoStack"];
  };
  "/items/block_info_stack/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_info_stack item by unique identifier.
     */
    get: operations["readSingleItemsBlockInfoStack"];
    /**
     * Delete an Item
     * @description Delete an existing block_info_stack item.
     */
    delete: operations["deleteSingleItemsBlockInfoStack"];
    /**
     * Update an Item
     * @description Update an existing block_info_stack item.
     */
    patch: operations["updateSingleItemsBlockInfoStack"];
  };
  "/items/block_article_translations": {
    /**
     * List Items
     * @description List the block_article_translations items.
     */
    get: operations["readItemsBlockArticleTranslations"];
    /**
     * Create an Item
     * @description Create a new block_article_translations item.
     */
    post: operations["createItemsBlockArticleTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_article_translations items.
     */
    delete: operations["deleteItemsBlockArticleTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_article_translations items at the same time.
     */
    patch: operations["updateItemsBlockArticleTranslations"];
  };
  "/items/block_article_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_article_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockArticleTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_article_translations item.
     */
    delete: operations["deleteSingleItemsBlockArticleTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_article_translations item.
     */
    patch: operations["updateSingleItemsBlockArticleTranslations"];
  };
  "/items/block_info_stack_translations": {
    /**
     * List Items
     * @description List the block_info_stack_translations items.
     */
    get: operations["readItemsBlockInfoStackTranslations"];
    /**
     * Create an Item
     * @description Create a new block_info_stack_translations item.
     */
    post: operations["createItemsBlockInfoStackTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_info_stack_translations items.
     */
    delete: operations["deleteItemsBlockInfoStackTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_info_stack_translations items at the same time.
     */
    patch: operations["updateItemsBlockInfoStackTranslations"];
  };
  "/items/block_info_stack_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_info_stack_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockInfoStackTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_info_stack_translations item.
     */
    delete: operations["deleteSingleItemsBlockInfoStackTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_info_stack_translations item.
     */
    patch: operations["updateSingleItemsBlockInfoStackTranslations"];
  };
  "/items/block_contact_translations": {
    /**
     * List Items
     * @description List the block_contact_translations items.
     */
    get: operations["readItemsBlockContactTranslations"];
    /**
     * Create an Item
     * @description Create a new block_contact_translations item.
     */
    post: operations["createItemsBlockContactTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_contact_translations items.
     */
    delete: operations["deleteItemsBlockContactTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_contact_translations items at the same time.
     */
    patch: operations["updateItemsBlockContactTranslations"];
  };
  "/items/block_contact_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_contact_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockContactTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_contact_translations item.
     */
    delete: operations["deleteSingleItemsBlockContactTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_contact_translations item.
     */
    patch: operations["updateSingleItemsBlockContactTranslations"];
  };
  "/items/block_layout_blocks_1_background": {
    /**
     * List Items
     * @description List the block_layout_blocks_1_background items.
     */
    get: operations["readItemsBlockLayoutBlocks1Background"];
    /**
     * Create an Item
     * @description Create a new block_layout_blocks_1_background item.
     */
    post: operations["createItemsBlockLayoutBlocks1Background"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_layout_blocks_1_background items.
     */
    delete: operations["deleteItemsBlockLayoutBlocks1Background"];
    /**
     * Update Multiple Items
     * @description Update multiple block_layout_blocks_1_background items at the same time.
     */
    patch: operations["updateItemsBlockLayoutBlocks1Background"];
  };
  "/items/block_layout_blocks_1_background/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_layout_blocks_1_background item by unique identifier.
     */
    get: operations["readSingleItemsBlockLayoutBlocks1Background"];
    /**
     * Delete an Item
     * @description Delete an existing block_layout_blocks_1_background item.
     */
    delete: operations["deleteSingleItemsBlockLayoutBlocks1Background"];
    /**
     * Update an Item
     * @description Update an existing block_layout_blocks_1_background item.
     */
    patch: operations["updateSingleItemsBlockLayoutBlocks1Background"];
  };
  "/items/block_lightbox_files": {
    /**
     * List Items
     * @description List the block_lightbox_files items.
     */
    get: operations["readItemsBlockLightboxFiles"];
    /**
     * Create an Item
     * @description Create a new block_lightbox_files item.
     */
    post: operations["createItemsBlockLightboxFiles"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_lightbox_files items.
     */
    delete: operations["deleteItemsBlockLightboxFiles"];
    /**
     * Update Multiple Items
     * @description Update multiple block_lightbox_files items at the same time.
     */
    patch: operations["updateItemsBlockLightboxFiles"];
  };
  "/items/block_lightbox_files/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_lightbox_files item by unique identifier.
     */
    get: operations["readSingleItemsBlockLightboxFiles"];
    /**
     * Delete an Item
     * @description Delete an existing block_lightbox_files item.
     */
    delete: operations["deleteSingleItemsBlockLightboxFiles"];
    /**
     * Update an Item
     * @description Update an existing block_lightbox_files item.
     */
    patch: operations["updateSingleItemsBlockLightboxFiles"];
  };
  "/items/voting_film": {
    /**
     * List Items
     * @description List the voting_film items.
     */
    get: operations["readItemsVotingFilm"];
    /**
     * Create an Item
     * @description Create a new voting_film item.
     */
    post: operations["createItemsVotingFilm"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing voting_film items.
     */
    delete: operations["deleteItemsVotingFilm"];
    /**
     * Update Multiple Items
     * @description Update multiple voting_film items at the same time.
     */
    patch: operations["updateItemsVotingFilm"];
  };
  "/items/voting_film/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single voting_film item by unique identifier.
     */
    get: operations["readSingleItemsVotingFilm"];
    /**
     * Delete an Item
     * @description Delete an existing voting_film item.
     */
    delete: operations["deleteSingleItemsVotingFilm"];
    /**
     * Update an Item
     * @description Update an existing voting_film item.
     */
    patch: operations["updateSingleItemsVotingFilm"];
  };
  "/items/block_partnership_translations": {
    /**
     * List Items
     * @description List the block_partnership_translations items.
     */
    get: operations["readItemsBlockPartnershipTranslations"];
    /**
     * Create an Item
     * @description Create a new block_partnership_translations item.
     */
    post: operations["createItemsBlockPartnershipTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_partnership_translations items.
     */
    delete: operations["deleteItemsBlockPartnershipTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple block_partnership_translations items at the same time.
     */
    patch: operations["updateItemsBlockPartnershipTranslations"];
  };
  "/items/block_partnership_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_partnership_translations item by unique identifier.
     */
    get: operations["readSingleItemsBlockPartnershipTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing block_partnership_translations item.
     */
    delete: operations["deleteSingleItemsBlockPartnershipTranslations"];
    /**
     * Update an Item
     * @description Update an existing block_partnership_translations item.
     */
    patch: operations["updateSingleItemsBlockPartnershipTranslations"];
  };
  "/items/film_genre_translations": {
    /**
     * List Items
     * @description List the film_genre_translations items.
     */
    get: operations["readItemsFilmGenreTranslations"];
    /**
     * Create an Item
     * @description Create a new film_genre_translations item.
     */
    post: operations["createItemsFilmGenreTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_genre_translations items.
     */
    delete: operations["deleteItemsFilmGenreTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple film_genre_translations items at the same time.
     */
    patch: operations["updateItemsFilmGenreTranslations"];
  };
  "/items/film_genre_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_genre_translations item by unique identifier.
     */
    get: operations["readSingleItemsFilmGenreTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing film_genre_translations item.
     */
    delete: operations["deleteSingleItemsFilmGenreTranslations"];
    /**
     * Update an Item
     * @description Update an existing film_genre_translations item.
     */
    patch: operations["updateSingleItemsFilmGenreTranslations"];
  };
  "/items/block_partnership": {
    /**
     * List Items
     * @description List the block_partnership items.
     */
    get: operations["readItemsBlockPartnership"];
    /**
     * Create an Item
     * @description Create a new block_partnership item.
     */
    post: operations["createItemsBlockPartnership"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_partnership items.
     */
    delete: operations["deleteItemsBlockPartnership"];
    /**
     * Update Multiple Items
     * @description Update multiple block_partnership items at the same time.
     */
    patch: operations["updateItemsBlockPartnership"];
  };
  "/items/block_partnership/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_partnership item by unique identifier.
     */
    get: operations["readSingleItemsBlockPartnership"];
    /**
     * Delete an Item
     * @description Delete an existing block_partnership item.
     */
    delete: operations["deleteSingleItemsBlockPartnership"];
    /**
     * Update an Item
     * @description Update an existing block_partnership item.
     */
    patch: operations["updateSingleItemsBlockPartnership"];
  };
  "/items/festival_block_translations": {
    /**
     * List Items
     * @description List the festival_block_translations items.
     */
    get: operations["readItemsFestivalBlockTranslations"];
    /**
     * Create an Item
     * @description Create a new festival_block_translations item.
     */
    post: operations["createItemsFestivalBlockTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing festival_block_translations items.
     */
    delete: operations["deleteItemsFestivalBlockTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple festival_block_translations items at the same time.
     */
    patch: operations["updateItemsFestivalBlockTranslations"];
  };
  "/items/festival_block_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single festival_block_translations item by unique identifier.
     */
    get: operations["readSingleItemsFestivalBlockTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing festival_block_translations item.
     */
    delete: operations["deleteSingleItemsFestivalBlockTranslations"];
    /**
     * Update an Item
     * @description Update an existing festival_block_translations item.
     */
    patch: operations["updateSingleItemsFestivalBlockTranslations"];
  };
  "/items/block_partnership_block_partner": {
    /**
     * List Items
     * @description List the block_partnership_block_partner items.
     */
    get: operations["readItemsBlockPartnershipBlockPartner"];
    /**
     * Create an Item
     * @description Create a new block_partnership_block_partner item.
     */
    post: operations["createItemsBlockPartnershipBlockPartner"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing block_partnership_block_partner items.
     */
    delete: operations["deleteItemsBlockPartnershipBlockPartner"];
    /**
     * Update Multiple Items
     * @description Update multiple block_partnership_block_partner items at the same time.
     */
    patch: operations["updateItemsBlockPartnershipBlockPartner"];
  };
  "/items/block_partnership_block_partner/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single block_partnership_block_partner item by unique identifier.
     */
    get: operations["readSingleItemsBlockPartnershipBlockPartner"];
    /**
     * Delete an Item
     * @description Delete an existing block_partnership_block_partner item.
     */
    delete: operations["deleteSingleItemsBlockPartnershipBlockPartner"];
    /**
     * Update an Item
     * @description Update an existing block_partnership_block_partner item.
     */
    patch: operations["updateSingleItemsBlockPartnershipBlockPartner"];
  };
  "/items/festival_block": {
    /**
     * List Items
     * @description List the festival_block items.
     */
    get: operations["readItemsFestivalBlock"];
    /**
     * Create an Item
     * @description Create a new festival_block item.
     */
    post: operations["createItemsFestivalBlock"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing festival_block items.
     */
    delete: operations["deleteItemsFestivalBlock"];
    /**
     * Update Multiple Items
     * @description Update multiple festival_block items at the same time.
     */
    patch: operations["updateItemsFestivalBlock"];
  };
  "/items/festival_block/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single festival_block item by unique identifier.
     */
    get: operations["readSingleItemsFestivalBlock"];
    /**
     * Delete an Item
     * @description Delete an existing festival_block item.
     */
    delete: operations["deleteSingleItemsFestivalBlock"];
    /**
     * Update an Item
     * @description Update an existing festival_block item.
     */
    patch: operations["updateSingleItemsFestivalBlock"];
  };
  "/items/film_genre": {
    /**
     * List Items
     * @description List the film_genre items.
     */
    get: operations["readItemsFilmGenre"];
    /**
     * Create an Item
     * @description Create a new film_genre item.
     */
    post: operations["createItemsFilmGenre"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_genre items.
     */
    delete: operations["deleteItemsFilmGenre"];
    /**
     * Update Multiple Items
     * @description Update multiple film_genre items at the same time.
     */
    patch: operations["updateItemsFilmGenre"];
  };
  "/items/film_genre/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_genre item by unique identifier.
     */
    get: operations["readSingleItemsFilmGenre"];
    /**
     * Delete an Item
     * @description Delete an existing film_genre item.
     */
    delete: operations["deleteSingleItemsFilmGenre"];
    /**
     * Update an Item
     * @description Update an existing film_genre item.
     */
    patch: operations["updateSingleItemsFilmGenre"];
  };
  "/items/film_person": {
    /**
     * List Items
     * @description List the film_person items.
     */
    get: operations["readItemsFilmPerson"];
    /**
     * Create an Item
     * @description Create a new film_person item.
     */
    post: operations["createItemsFilmPerson"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_person items.
     */
    delete: operations["deleteItemsFilmPerson"];
    /**
     * Update Multiple Items
     * @description Update multiple film_person items at the same time.
     */
    patch: operations["updateItemsFilmPerson"];
  };
  "/items/film_person/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_person item by unique identifier.
     */
    get: operations["readSingleItemsFilmPerson"];
    /**
     * Delete an Item
     * @description Delete an existing film_person item.
     */
    delete: operations["deleteSingleItemsFilmPerson"];
    /**
     * Update an Item
     * @description Update an existing film_person item.
     */
    patch: operations["updateSingleItemsFilmPerson"];
  };
  "/items/film_crew_role_translations": {
    /**
     * List Items
     * @description List the film_crew_role_translations items.
     */
    get: operations["readItemsFilmCrewRoleTranslations"];
    /**
     * Create an Item
     * @description Create a new film_crew_role_translations item.
     */
    post: operations["createItemsFilmCrewRoleTranslations"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_crew_role_translations items.
     */
    delete: operations["deleteItemsFilmCrewRoleTranslations"];
    /**
     * Update Multiple Items
     * @description Update multiple film_crew_role_translations items at the same time.
     */
    patch: operations["updateItemsFilmCrewRoleTranslations"];
  };
  "/items/film_crew_role_translations/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_crew_role_translations item by unique identifier.
     */
    get: operations["readSingleItemsFilmCrewRoleTranslations"];
    /**
     * Delete an Item
     * @description Delete an existing film_crew_role_translations item.
     */
    delete: operations["deleteSingleItemsFilmCrewRoleTranslations"];
    /**
     * Update an Item
     * @description Update an existing film_crew_role_translations item.
     */
    patch: operations["updateSingleItemsFilmCrewRoleTranslations"];
  };
  "/items/film_crew_role": {
    /**
     * List Items
     * @description List the film_crew_role items.
     */
    get: operations["readItemsFilmCrewRole"];
    /**
     * Create an Item
     * @description Create a new film_crew_role item.
     */
    post: operations["createItemsFilmCrewRole"];
    /**
     * Delete Multiple Items
     * @description Delete multiple existing film_crew_role items.
     */
    delete: operations["deleteItemsFilmCrewRole"];
    /**
     * Update Multiple Items
     * @description Update multiple film_crew_role items at the same time.
     */
    patch: operations["updateItemsFilmCrewRole"];
  };
  "/items/film_crew_role/{id}": {
    /**
     * Retrieve an Item
     * @description Retrieve a single film_crew_role item by unique identifier.
     */
    get: operations["readSingleItemsFilmCrewRole"];
    /**
     * Delete an Item
     * @description Delete an existing film_crew_role item.
     */
    delete: operations["deleteSingleItemsFilmCrewRole"];
    /**
     * Update an Item
     * @description Update an existing film_crew_role item.
     */
    patch: operations["updateSingleItemsFilmCrewRole"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Diff: {
      hash?: string;
      diff?: {
        collections?: {
            collection?: string;
            diff?: Record<string, never>[];
          }[];
        fields?: {
            collection?: string;
            field?: string;
            diff?: Record<string, never>[];
          }[];
        relations?: {
            collection?: string;
            field?: string;
            related_collection?: string;
            diff?: Record<string, never>[];
          }[];
      };
    };
    Files: {
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: string | components["schemas"]["Folders"] | null;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      /**
       * Format: date-time
       * @description When the file was created.
       * @example 2019-12-03T00:10:15+00:00
       */
      created_on?: string;
      modified_by?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description Where the file was created. Is automatically populated based on Exif data for images. */
      location?: string | null;
      /** @description Tags for the file. Is automatically populated based on Exif data for images. */
      tags?: string[] | null;
      /** @description IPTC, Exif, and ICC metadata extracted from file */
      metadata?: Record<string, unknown> | null;
      focal_point_x?: number | null;
      focal_point_y?: number | null;
      tus_id?: string | null;
      tus_data?: unknown;
      /**
       * Format: date-time
       * @description When the file was last uploaded/replaced.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
    };
    Folders: {
      /**
       * @description Unique identifier for the folder.
       * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
       */
      id?: string;
      /**
       * @description Name of the folder.
       * @example New York
       */
      name?: string;
      /**
       * @description Unique identifier of the parent folder. This allows for nested folders.
       * @example null
       */
      parent?: string | components["schemas"]["Folders"] | null;
    };
    Roles: {
      /**
       * @description Unique identifier for the role.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description Name of the role.
       * @example Administrator
       */
      name?: string;
      /**
       * @description The role's icon.
       * @example verified_user
       */
      icon?: string;
      /**
       * @description Description of the role.
       * @example Admins have access to all managed data within the system by default
       */
      description?: string | null;
      /** @description $t:field_options.directus_roles.parent_note */
      parent?: string | components["schemas"]["Roles"] | null;
      /** @description $t:field_options.directus_roles.children_note */
      children?: ((string | components["schemas"]["Roles"])[]) | null;
      policies?: unknown;
      users?: ((string | components["schemas"]["Users"])[]) | null;
    };
    Schema: {
      /** @example 1 */
      version?: number;
      directus?: string;
      vendor?: string;
      collections?: components["schemas"]["Collections"][];
      fields?: components["schemas"]["Fields"][];
      relations?: components["schemas"]["Relations"][];
    };
    Users: {
      /**
       * @description Unique identifier for the user.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      /**
       * @description First name of the user.
       * @example Admin
       */
      first_name?: string;
      /**
       * @description Last name of the user.
       * @example User
       */
      last_name?: string;
      /**
       * Format: email
       * @description Unique email address for the user.
       * @example admin@example.com
       */
      email?: string;
      /** @description Password of the user. */
      password?: string;
      /**
       * @description The user's location.
       * @example null
       */
      location?: string | null;
      /**
       * @description The user's title.
       * @example null
       */
      title?: string | null;
      /**
       * @description The user's description.
       * @example null
       */
      description?: string | null;
      /**
       * @description The user's tags.
       * @example null
       */
      tags?: string[] | null;
      /**
       * @description The user's avatar.
       * @example null
       */
      avatar?: string | components["schemas"]["Files"] | null;
      /**
       * @description The user's language used in Directus.
       * @example en-US
       */
      language?: string;
      /**
       * @description The 2FA secret string that's used to generate one time passwords.
       * @example null
       */
      tfa_secret?: string | null;
      /**
       * @description Status of the user.
       * @example active
       * @enum {string}
       */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /**
       * @description Unique identifier of the role of this user.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      role?: string | components["schemas"]["Roles"];
      /** @description Static token for the user. */
      token?: string | null;
      /**
       * Format: date-time
       * @description When this user used the API last.
       * @example 2020-05-31T14:32:37Z
       */
      last_access?: string | null;
      /**
       * @description Last page that the user was on.
       * @example /my-project/settings/collections/a
       */
      last_page?: string | null;
      provider?: string;
      external_identifier?: string | null;
      auth_data?: unknown;
      email_notifications?: boolean | null;
      appearance?: string | null;
      theme_dark?: string | null;
      theme_light?: string | null;
      theme_light_overrides?: unknown;
      theme_dark_overrides?: unknown;
      policies?: unknown;
    };
    Query: {
      /**
       * @description Control what fields are being returned in the object.
       * @example [
       *   "*",
       *   "*.*"
       * ]
       */
      fields?: string[];
      /**
       * @example {
       *   "<field>": {
       *     "<operator>": "<value>"
       *   }
       * }
       */
      filter?: Record<string, never>;
      /** @description Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /**
       * @description How to sort the returned items.
       * @example [
       *   "-date_created"
       * ]
       */
      sort?: string[];
      /** @description Set the maximum number of items that will be returned */
      limit?: number;
      /** @description How many items to skip when fetching data. */
      offset?: number;
      /** @description Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /**
       * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
       * @example {
       *   "related_articles": {
       *     "_limit": 3
       *   }
       * }
       */
      deep?: Record<string, never>;
    };
    "x-metadata": {
      /** @description Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    Activity: {
      /**
       * @description Unique identifier for the object.
       * @example 2
       */
      id?: number;
      /**
       * @description Action that was performed.
       * @example update
       * @enum {string}
       */
      action?: "create" | "update" | "delete" | "login";
      /** @description The user who performed this action. */
      user?: string | components["schemas"]["Users"] | null;
      /**
       * Format: date-time
       * @description When the action happened.
       * @example 2019-12-05T22:52:09Z
       */
      timestamp?: string;
      /**
       * @description The IP address of the user at the time the action took place.
       * @example 127.0.0.1
       */
      ip?: string;
      /**
       * @description User agent string of the browser the user used when the action took place.
       * @example Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36
       */
      user_agent?: string;
      /** @description Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
       * @example 328
       */
      item?: string;
      /**
       * @description Origin of the request when the action took place.
       * @example https://directus.io
       */
      origin?: string;
      revisions?: ((number | components["schemas"]["Revisions"])[]) | null;
    };
    Permissions: {
      /**
       * @description Unique identifier for the permission.
       * @example 1
       */
      id?: number;
      /**
       * @description What collection this permission applies to.
       * @example customers
       */
      collection?: string;
      /**
       * @description What action this permission applies to.
       * @example create
       * @enum {string}
       */
      action?: "create" | "read" | "update" | "delete";
      /** @description JSON structure containing the permissions checks for this permission. */
      permissions?: Record<string, unknown> | null;
      /** @description JSON structure containing the validation checks for this permission. */
      validation?: Record<string, unknown> | null;
      /** @description JSON structure containing the preset value for created/updated items. */
      presets?: Record<string, unknown> | null;
      /** @description CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
      policy?: unknown;
    };
    Fields: {
      id?: number;
      /**
       * @description Unique name of the collection this field is in.
       * @example about_us
       */
      collection?: string;
      /**
       * @description Unique name of the field. Field name is unique within the collection.
       * @example id
       */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: unknown;
      display?: string | null;
      display_options?: unknown;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: unknown;
      note?: string | null;
      conditions?: unknown;
      required?: boolean | null;
      group?: number | components["schemas"]["Fields"] | null;
      validation?: unknown;
      validation_message?: string | null;
    };
    Collections: {
      /**
       * @description The collection key.
       * @example customers
       */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: unknown;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: unknown;
      sort?: number | null;
      group?: string | components["schemas"]["Collections"] | null;
      collapse?: string;
      preview_url?: string | null;
      versioning?: boolean;
    };
    ItemsFilmTranslations: {
      id?: number;
      film_id?: number | components["schemas"]["ItemsFilm"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      name?: string | null;
      description?: string | null;
    };
    Presets: {
      /**
       * @description Unique identifier for this single collection preset.
       * @example 155
       */
      id?: number;
      /** @description Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /**
       * @description The unique identifier of the user to whom this collection preset applies.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user?: string | components["schemas"]["Users"] | null;
      /**
       * @description The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.
       * @example 50419801-0f30-8644-2b3c-9bc2d980d0a0
       */
      role?: string | components["schemas"]["Roles"] | null;
      /**
       * @description What collection this collection preset is used for.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /** @description Search query. */
      search?: string | null;
      /**
       * @description Key of the layout that is used.
       * @example null
       */
      layout?: string;
      /**
       * @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
       * @example {
       *   "cards": {
       *     "sort": "-published_on"
       *   }
       * }
       */
      layout_query?: unknown;
      /**
       * @description Options of the views. The properties in here are controlled by the layout.
       * @example {
       *   "cards": {
       *     "icon": "account_circle",
       *     "title": "{{ first_name }} {{ last_name }}",
       *     "subtitle": "{{ title }}",
       *     "size": 3
       *   }
       * }
       */
      layout_options?: unknown;
      refresh_interval?: number | null;
      filter?: unknown;
      icon?: string | null;
      color?: string | null;
    };
    ItemsVoteFilm: {
      id?: number;
      vote_id?: string | components["schemas"]["ItemsVote"] | null;
      film_id?: number | components["schemas"]["ItemsFilm"] | null;
    };
    Relations: {
      /**
       * @description Unique identifier for the relation.
       * @example 1
       */
      id?: number;
      /**
       * @description Collection that has the field that holds the foreign key.
       * @example directus_activity
       */
      many_collection?: string;
      /**
       * @description Foreign key. Field that holds the primary key of the related collection.
       * @example user
       */
      many_field?: string;
      /**
       * @description Collection on the _one_ side of the relationship.
       * @example directus_users
       */
      one_collection?: string;
      /**
       * @description Alias column that serves as the _one_ side of the relationship.
       * @example null
       */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /**
       * @description Field on the junction table that holds the many field of the related relation.
       * @example null
       */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Revisions: {
      /**
       * @description Unique identifier for the revision.
       * @example 1
       */
      id?: number;
      /**
       * @description Unique identifier for the activity record.
       * @example 2
       */
      activity?: number | components["schemas"]["Activity"];
      /**
       * @description Collection of the updated item.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Primary key of updated item.
       * @example 168
       */
      item?: string;
      /**
       * @description Copy of item state at time of update.
       * @example {
       *   "author": 1,
       *   "body": "This is my first post",
       *   "featured_image": 15,
       *   "id": "168",
       *   "title": "Hello, World!"
       * }
       */
      data?: Record<string, unknown> | null;
      /**
       * @description Changes between the previous and the current revision.
       * @example {
       *   "title": "Hello, World!"
       * }
       */
      delta?: Record<string, never>;
      /**
       * @description If the current item was updated relationally, this is the id of the parent revision record
       * @example null
       */
      parent?: number | null;
      /**
       * @description Associated version of this revision.
       * @example draft
       */
      version?: string | components["schemas"]["Versions"];
    };
    Flows: {
      /**
       * @description Unique identifier for the flow.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description The name of the flow.
       * @example Update Articles Flow
       */
      name?: string;
      /**
       * @description Icon displayed in the Admin App for the flow.
       * @example bolt
       */
      icon?: string;
      /**
       * @description Color of the icon displayed in the Admin App for the flow.
       * @example #112233
       */
      color?: string | null;
      description?: string | null;
      /**
       * @description Current status of the flow.
       * @default active
       * @example active
       * @enum {string}
       */
      status?: "active" | "inactive";
      /**
       * @description Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
       * @example manual
       */
      trigger?: string;
      /**
       * @description The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.
       * @example $trigger
       */
      accountability?: string;
      /**
       * @description Options of the selected trigger for the flow.
       * @example null
       */
      options?: Record<string, unknown> | null;
      /**
       * @description UUID of the operation connected to the trigger in the flow.
       * @example 92e82998-e421-412f-a513-13701e83e4ce
       */
      operation?: string | components["schemas"]["Operations"];
      /**
       * Format: date-time
       * @description Timestamp in ISO8601 when the flow was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description The user who created the flow.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
      operations?: ((string | components["schemas"]["Operations"])[]) | null;
    };
    Operations: {
      /**
       * @description Unique identifier for the operation.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description The name of the operation.
       * @example Log to Console
       */
      name?: string;
      /**
       * @description Key for the operation. Must be unique within a given flow.
       * @example log_console
       */
      key?: string;
      /**
       * @description Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.
       * @example log
       */
      type?: string;
      /**
       * @description Position of the operation on the X axis within the flow workspace.
       * @example 12
       */
      position_x?: number;
      /**
       * @description Position of the operation on the Y axis within the flow workspace.
       * @example 12
       */
      position_y?: number;
      /**
       * @description Options depending on the type of the operation.
       * @example null
       */
      options?: Record<string, unknown> | null;
      /**
       * @description The operation triggered when the current operation succeeds (or `then` logic of a condition operation).
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      resolve?: string | components["schemas"]["Operations"];
      /**
       * @description The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      reject?: string | components["schemas"]["Operations"];
      flow?: string | components["schemas"]["Flows"];
      /**
       * Format: date-time
       * @description Timestamp in ISO8601 when the operation was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * @description The user who created the operation.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
    };
    Webhooks: {
      /**
       * @description The index of the webhook.
       * @example 1
       */
      id?: number;
      /**
       * @description The name of the webhook.
       * @example create articles
       */
      name?: string;
      /**
       * @description Method used in the webhook.
       * @example POST
       */
      method?: string;
      /**
       * @description The url of the webhook.
       * @example null
       */
      url?: string | null;
      /**
       * @description The status of the webhook.
       * @example inactive
       */
      status?: string;
      /**
       * @description If yes, send the content of what was done
       * @example true
       */
      data?: boolean;
      /**
       * @description The actions that triggers this webhook.
       * @example null
       */
      actions?: string[] | null;
      collections?: string[];
      headers?: unknown;
      was_active_before_deprecation?: boolean;
      migrated_flow?: string | components["schemas"]["Flows"] | null;
    };
    Extensions: {
      enabled?: boolean;
      /** Format: uuid */
      id?: string;
      folder?: string;
      source?: string;
      /**
       * @description Name of the bundle the extension is in.
       * @example directus-extension-my-bundle
       */
      bundle?: string | null;
    };
    Settings: {
      /**
       * @description Unique identifier for the setting.
       * @example 1
       */
      id?: number;
      /**
       * @description The name of the project.
       * @example Directus
       */
      project_name?: string;
      /**
       * @description The url of the project.
       * @example null
       */
      project_url?: string | null;
      /**
       * @description The brand color of the project.
       * @example null
       */
      project_color?: string | null;
      /**
       * @description The logo of the project.
       * @example null
       */
      project_logo?: string | null;
      /**
       * @description The foreground of the project.
       * @example null
       */
      public_foreground?: string | null;
      /**
       * @description The background of the project.
       * @example null
       */
      public_background?: {
        id?: string;
        type?: string;
      } | null;
      /**
       * @description Note rendered on the public pages of the app.
       * @example null
       */
      public_note?: string | null;
      /**
       * @description Allowed authentication login attempts before the user's status is set to blocked.
       * @example 25
       */
      auth_login_attempts?: number;
      /** @description Authentication password policy. */
      auth_password_policy?: string | null;
      /**
       * @description What transformations are allowed in the assets endpoint.
       * @example all
       * @enum {string|null}
       */
      storage_asset_transform?: "all" | "none" | "presets" | null;
      /**
       * @description Array of allowed
       * @example null
       */
      storage_asset_presets?: (({
          /** @description Key for the asset. Used in the assets endpoint. */
          key?: string;
          /**
           * @description Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
           * @enum {string}
           */
          fit?: "cover" | "contain" | "inside" | "outside";
          /** @description Width of the thumbnail. */
          width?: number;
          /** @description Height of the thumbnail. */
          height?: number;
          /** @description No image upscale */
          withoutEnlargement?: boolean;
          /** @description Quality of the compression used. */
          quality?: number;
          /**
           * @description Reformat output image
           * @enum {string}
           */
          format?: "" | "jpeg" | "png" | "webp" | "tiff" | "avif";
          /** @description Additional transformations to apply */
          transforms?: (({
              /** @description The Sharp method name */
              method?: string;
              /** @description A list of arguments to pass to the Sharp method */
              arguments?: {
                  /** @description A JSON representation of the argument value */
                  argument?: string;
                }[] | null;
            })[]) | null;
        })[]) | null;
      custom_css?: string | null;
      /**
       * Format: uuid
       * @description Default folder to place files
       */
      storage_default_folder?: string;
      basemaps?: unknown;
      mapbox_key?: string | null;
      module_bar?: unknown;
      project_descriptor?: string | null;
      default_language?: string;
      custom_aspect_ratios?: unknown;
      /** @description $t:field_options.directus_settings.project_favicon_note */
      public_favicon?: string | components["schemas"]["Files"] | null;
      default_appearance?: string;
      default_theme_light?: string | null;
      theme_light_overrides?: unknown;
      default_theme_dark?: string | null;
      theme_dark_overrides?: unknown;
      report_error_url?: string | null;
      report_bug_url?: string | null;
      report_feature_url?: string | null;
      /** @description $t:fields.directus_settings.public_registration_note */
      public_registration?: boolean;
      /** @description $t:fields.directus_settings.public_registration_verify_email_note */
      public_registration_verify_email?: boolean;
      /** @description $t:fields.directus_settings.public_registration_role_note */
      public_registration_role?: string | components["schemas"]["Roles"] | null;
      /** @description $t:fields.directus_settings.public_registration_email_filter_note */
      public_registration_email_filter?: unknown;
    };
    Versions: {
      /**
       * @description Primary key of the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      /**
       * @description Key of the Content Version, used as the value for the "version" query parameter.
       * @example draft
       */
      key?: string;
      /**
       * @description Descriptive name of the Content Version.
       * @example My Draft
       */
      name?: string;
      /**
       * @description Name of the collection the Content Version is created on.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description The item the Content Version is created on.
       * @example 168
       */
      item?: string;
      hash?: string | null;
      /**
       * Format: date-time
       * @description When the Content Version was created.
       * @example 2022-05-11T13:14:52Z
       */
      date_created?: string | null;
      /**
       * Format: date-time
       * @description When the Content Version was last updated.
       * @example 2022-05-11T13:14:53Z
       */
      date_updated?: string | null;
      /**
       * @description User that created the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_created?: string | components["schemas"]["Users"];
      /**
       * @description User that last updated the Content Version.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user_updated?: string | components["schemas"]["Users"];
      /**
       * @description The current changes compared to the main version of the item.
       * @example {
       *   "my_field": "Updated Value"
       * }
       */
      delta?: Record<string, never>;
    };
    Comments: {
      /**
       * @description Unique identifier for this single collection preset.
       * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
       */
      id?: string;
      /**
       * @description The collection of the item the Comment is created for.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description The item the Comment is created for.
       * @example 123
       */
      item?: string;
      /**
       * @description User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
       * @example This is a comment
       */
      comment?: string;
      /**
       * Format: date-time
       * @description When the Comment was created.
       * @example 2024-01-23T12:34:56Z
       */
      date_created?: string | null;
      /**
       * Format: date-time
       * @description When the Comment was updated.
       * @example 2024-01-23T12:34:56Z
       */
      date_updated?: string | null;
      /**
       * @description User that created the Comment.
       * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
       */
      user_created?: string | components["schemas"]["Users"];
      /**
       * @description User that updated the Comment.
       * @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28
       */
      user_updated?: string | components["schemas"]["Users"];
    };
    ItemsFilmFilmGenre: {
      id?: number;
      film_id?: number | components["schemas"]["ItemsFilm"] | null;
      film_genre_id?: number | components["schemas"]["ItemsFilmGenre"] | null;
    };
    ItemsVotingTranslations: {
      id?: number;
      voting_id?: string | components["schemas"]["ItemsVoting"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      before_start_text?: string | null;
      after_end_text?: string | null;
      title?: string | null;
      submit_text?: string | null;
    };
    ItemsBlockButton: {
      /** Format: uuid */
      id: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      type?: string | null;
      page?: string | components["schemas"]["ItemsPages"] | null;
      post?: string | components["schemas"]["ItemsPosts"] | null;
      external_url?: string | null;
      label?: string | null;
      color?: string | null;
      variant?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockButtonTranslations"])[]) | null;
    };
    ItemsBlockDivider: {
      /** Format: uuid */
      id: string;
      title?: string | null;
    };
    ItemsBlockFaqs: {
      faqs?: unknown;
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
      alignment?: string | null;
    };
    ItemsBlockLogocloud: {
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
      logos?: ((string | components["schemas"]["ItemsBlockLogocloudLogos"])[]) | null;
    };
    ItemsBlockHero: {
      content?: string | null;
      /** Format: uuid */
      id: string;
      image?: string | components["schemas"]["Files"] | null;
      title?: string | null;
      image_position?: string | null;
      headline?: string | null;
    };
    ItemsBlockHTML: {
      /** Format: uuid */
      id: string;
      raw_html?: string | null;
    };
    ItemsBlockStepItems: {
      /** Format: uuid */
      id: string;
      title?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      content?: string | null;
      block_steps?: string | components["schemas"]["ItemsBlockSteps"] | null;
      sort?: number | null;
    };
    ItemsBlockQuote: {
      content?: string | null;
      /** Format: uuid */
      id: string;
      subtitle?: string | null;
      title?: string | null;
    };
    ItemsBlockRichtext: {
      /** Format: uuid */
      id: string;
      background_image?: string | components["schemas"]["Files"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockRichtextTranslations"])[]) | null;
    };
    ItemsBlockGallery: {
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
      gallery_items?: ((string | components["schemas"]["ItemsBlockGalleryFiles"])[]) | null;
    };
    ItemsBlockForm: {
      form?: string | components["schemas"]["ItemsForms"] | null;
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
    };
    ItemsBlockGalleryFiles: {
      /** Format: uuid */
      id: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      block_gallery_id?: string | components["schemas"]["ItemsBlockGallery"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsBlockTestimonials: {
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
      testimonials?: ((string | components["schemas"]["ItemsBlockTestimonialSliderItems"])[]) | null;
    };
    ItemsBlockTeam: {
      content?: string | null;
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
    };
    ItemsCategories: {
      color?: string | null;
      headline?: string | null;
      /** Format: uuid */
      id: string;
      seo?: string | components["schemas"]["ItemsSEO"] | null;
      slug?: string | null;
      sort?: number | null;
      title?: string | null;
    };
    ItemsInbox: {
      data?: unknown;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      form?: string | components["schemas"]["ItemsForms"] | null;
      /** Format: uuid */
      id: string;
      sort?: number | null;
      status?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsGlobals: {
      address_country?: string | null;
      address_locality?: string | null;
      address_region?: string | null;
      /** @description URL for the build / deploy hook that starts a new build */
      build_hook_url?: string | null;
      description?: string | null;
      email?: string | null;
      /** Format: uuid */
      id: string;
      og_image?: string | components["schemas"]["Files"] | null;
      phone?: string | null;
      postal_code?: string | null;
      social_links?: unknown;
      street_address?: string | null;
      /** @description What's the website title? */
      tagline?: string | null;
      /** @description What's the website title? */
      title?: string | null;
      /** @description What's is the base url for the site? */
      url?: string | null;
      footer_blocks?: ((number | components["schemas"]["ItemsGlobalsFooterBlocks"])[]) | null;
    };
    ItemsBlockSteps: {
      /** @description If enabled, image position is alternated between left and right. */
      alternate_image_position?: boolean;
      headline?: string | null;
      /** Format: uuid */
      id: string;
      /** @description Show the step numbers on the website. For example: (Step 1, Step 2, etc) */
      show_step_numbers?: boolean | null;
      title?: string | null;
      steps?: ((string | components["schemas"]["ItemsBlockStepItems"])[]) | null;
    };
    ItemsBlockVideo: {
      headline?: string | null;
      /** Format: uuid */
      id: string;
      title?: string | null;
      type?: string | null;
      video_file?: string | components["schemas"]["Files"] | null;
      video_url?: string | null;
    };
    ItemsNavigationItems: {
      has_children?: boolean | null;
      /** @description Icon that displays in dropdown menus on website. */
      icon?: string | null;
      /** Format: uuid */
      id: string;
      /** @description Label to help users. Displays below the link in dropdown nav menus. */
      label?: string | null;
      navigation?: string | components["schemas"]["ItemsNavigation"] | null;
      open_in_new_tab?: boolean | null;
      page?: string | components["schemas"]["ItemsPages"] | null;
      parent?: string | components["schemas"]["ItemsNavigationItems"] | null;
      sort?: number | null;
      title?: string | null;
      type?: string | null;
      url?: string | null;
      children?: ((string | components["schemas"]["ItemsNavigationItems"])[]) | null;
    };
    ItemsNavigation: {
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      id: string;
      status?: string;
      title?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      items?: ((string | components["schemas"]["ItemsNavigationItems"])[]) | null;
    };
    ItemsForms: {
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: uuid */
      id: string;
      key?: string | null;
      on_success?: string | null;
      redirect_url?: string | null;
      /** @description The fields for the form. */
      schema?: unknown;
      sort?: number | null;
      status?: string;
      /** @description The text for the submit button label. */
      submit_label?: string | null;
      success_message?: string | null;
      title?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsRedirects: {
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: uuid */
      id: string;
      response_code?: number | null;
      url_new?: string | null;
      url_old?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsTeam: {
      bio?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: uuid */
      id: string;
      image?: string | components["schemas"]["Files"] | null;
      job_title?: string | null;
      name?: string | null;
      social_media?: unknown;
      sort?: number | null;
      status?: string;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      posts?: ((string | components["schemas"]["ItemsPosts"])[]) | null;
    };
    ItemsPostGalleryItems: {
      /** Format: uuid */
      id: string;
      posts_id?: string | components["schemas"]["ItemsPosts"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
      sort?: number | null;
    };
    ItemsPagesBlog: {
      featured_post?: string | components["schemas"]["ItemsPosts"] | null;
      headline?: string | null;
      /** Format: uuid */
      id: string;
      seo?: string | components["schemas"]["ItemsSEO"] | null;
      title?: string | null;
    };
    ItemsBlockColumnsRows: {
      /** Format: uuid */
      id: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      headline?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      image_position?: string | null;
      content?: string | null;
    };
    ItemsPosts: {
      category?: string | components["schemas"]["ItemsCategories"] | null;
      content?: string | null;
      /** Format: date-time */
      date_created?: string | null;
      /** Format: date-time */
      date_published?: string | null;
      /** Format: date-time */
      date_updated?: string | null;
      /** Format: uuid */
      id: string;
      image?: string | components["schemas"]["Files"] | null;
      seo?: string | components["schemas"]["ItemsSEO"] | null;
      slug?: string | null;
      sort?: number | null;
      status?: string;
      summary?: string | null;
      title?: string | null;
      user_created?: string | null;
      user_updated?: string | null;
      author?: string | components["schemas"]["ItemsTeam"] | null;
      client?: string | null;
      /** @description Use a range */
      cost?: string | null;
      built_with?: unknown;
      /** @description What type of post is this? Determines the template used to display the post on the frontend. */
      type?: string | null;
      video_url?: string | null;
      gallery?: ((string | components["schemas"]["ItemsPostGalleryItems"])[]) | null;
    };
    ItemsBlockCard: {
      id?: number;
      title?: string | null;
      description?: string | null;
      href?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      descriptionFlex?: boolean | null;
      backgroundHoverEnabled?: boolean | null;
      link?: number | components["schemas"]["ItemsBlockLink"] | null;
      type?: string | null;
      width?: number;
      height?: number;
      align?: string | null;
      locationAndDate?: number | components["schemas"]["ItemsBlockLocationanddate"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockCardTranslations"])[]) | null;
    };
    ItemsBlockLogocloudLogos: {
      /** Format: uuid */
      id: string;
      sort?: number | null;
      block_logocloud_id?: string | components["schemas"]["ItemsBlockLogocloud"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsBlockTestimonialSliderItems: {
      /** Format: uuid */
      id: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      block_testimonial_slider_id?: string | components["schemas"]["ItemsBlockTestimonials"] | null;
      testimonials_id?: string | components["schemas"]["ItemsTestimonials"] | null;
    };
    ItemsTestimonials: {
      company?: string | null;
      company_logo?: string | components["schemas"]["Files"] | null;
      content?: string | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      /** Format: uuid */
      id: string;
      image?: string | components["schemas"]["Files"] | null;
      link?: string | null;
      sort?: number | null;
      status?: string;
      subtitle?: string | null;
      title?: string | null;
      user_created?: string | components["schemas"]["Users"] | null;
      user_updated?: string | components["schemas"]["Users"] | null;
    };
    ItemsSEO: {
      /** @description Where should the canonical URL for this entry point to. */
      canonical_url?: string | null;
      /** Format: uuid */
      id: string;
      /** @description This entries meta description. Max 160 characters. */
      meta_description?: string | null;
      /** @description Instruct crawlers not to follow links on this page. */
      no_follow?: boolean | null;
      /** @description Instruct crawlers not to index this entry. */
      no_index?: boolean | null;
      /** @description How often to instruct search engines to crawl. */
      sitemap_change_frequency?: string | null;
      /**
       * Format: float
       * @description Valid values range from 0.0 to 1.0. This value does not affect how your pages are compared to pages on other sites, it only lets the search engines know which pages you deem most important for the crawlers.
       */
      sitemap_priority?: number | null;
      /** @description This entries title, defaults to title. Max 70 characters including the site name. */
      title?: string | null;
    };
    ItemsPages: {
      /** Format: date-time */
      date_created?: string | null;
      /** Format: date-time */
      date_updated?: string | null;
      /** Format: uuid */
      id: string;
      seo?: string | components["schemas"]["ItemsSEO"] | null;
      sort?: number | null;
      status?: string;
      title?: string | null;
      user_created?: string | null;
      user_updated?: string | null;
      /** @description Start with a slash (/page) and do NOT add a trailing slash (/page/) */
      permalink?: string | null;
      style?: unknown;
      blocks?: ((string | components["schemas"]["ItemsPageBlocks"])[]) | null;
    };
    ItemsPageBlocks: {
      /** Format: uuid */
      id: string;
      sort?: number | null;
      user_created?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_created?: string | null;
      user_updated?: string | components["schemas"]["Users"] | null;
      /** Format: timestamp */
      date_updated?: string | null;
      pages_id?: string | components["schemas"]["ItemsPages"] | null;
      item?: ((string | components["schemas"]["ItemsBlockDivider"] | components["schemas"]["ItemsBlockFaqs"] | components["schemas"]["ItemsBlockLogocloud"] | components["schemas"]["ItemsBlockHero"] | components["schemas"]["ItemsBlockHTML"] | components["schemas"]["ItemsBlockQuote"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockGallery"] | components["schemas"]["ItemsBlockForm"] | components["schemas"]["ItemsBlockTestimonials"] | components["schemas"]["ItemsBlockTeam"] | components["schemas"]["ItemsBlockSteps"] | components["schemas"]["ItemsBlockVideo"] | components["schemas"]["ItemsBlockCard"] | components["schemas"]["ItemsBlockImage"] | components["schemas"]["ItemsBlockArchive"] | components["schemas"]["ItemsBlockLayout"] | components["schemas"]["ItemsBlockGap"] | components["schemas"]["ItemsBlockLink"] | components["schemas"]["ItemsBlockLightbox"] | components["schemas"]["ItemsBlockLocationanddate"] | components["schemas"]["ItemsBlockConditionalcard"] | components["schemas"]["ItemsBlockTajenka"] | components["schemas"]["ItemsBlockBannerhero"] | components["schemas"]["ItemsBlockPartner"] | components["schemas"]["ItemsBlockFestivalPoster"] | components["schemas"]["ItemsBlockVideoTrailer"] | components["schemas"]["ItemsBlockCountdown"] | components["schemas"]["ItemsBlockPatron"] | components["schemas"]["ItemsBlockFestivalFooter"] | components["schemas"]["ItemsBlockJury"] | components["schemas"]["ItemsBlockImageRow"] | components["schemas"]["ItemsBlockPartnerRow"] | components["schemas"]["ItemsBlockReferee"] | components["schemas"]["ItemsBlockContact"] | components["schemas"]["ItemsBlockArticle"] | components["schemas"]["ItemsBlockPartnership"])[]) | null;
      collection?: string | null;
      /** @description Hide this block on the frontend without having to remove it from your page. */
      hide_block?: boolean | null;
      style?: unknown;
      background?: ((number | components["schemas"]["ItemsPageBlocksBackground1"])[]) | null;
    };
    ItemsBlockArchiveFiles: {
      id?: number;
      block_archive_id?: number | components["schemas"]["ItemsBlockArchive"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsGlobalsFooterBlocks: {
      id?: number;
      globals_id?: string | components["schemas"]["ItemsGlobals"] | null;
      item?: ((string | components["schemas"]["ItemsBlockHero"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockCard"] | components["schemas"]["ItemsBlockLink"] | components["schemas"]["ItemsBlockFestivalFooter"])[]) | null;
      collection?: string | null;
    };
    ItemsBlockLayoutBlocks1: {
      id?: number;
      block_layout_id?: number | components["schemas"]["ItemsBlockLayout"] | null;
      item?: ((string | components["schemas"]["ItemsBlockButton"] | components["schemas"]["ItemsBlockRichtext"] | components["schemas"]["ItemsBlockCard"] | components["schemas"]["ItemsBlockImage"] | components["schemas"]["ItemsBlockLayout"] | components["schemas"]["ItemsBlockGap"] | components["schemas"]["ItemsBlockLink"] | components["schemas"]["ItemsBlockLocationanddate"] | components["schemas"]["ItemsBlockLogo"] | components["schemas"]["ItemsBlockContact"] | components["schemas"]["ItemsBlockArticle"] | components["schemas"]["ItemsBlockInfoStack"])[]) | null;
      collection?: string | null;
      sort?: number | null;
      background?: ((number | components["schemas"]["ItemsBlockLayoutBlocks1Background"])[]) | null;
    };
    ItemsBlockImage: {
      id?: number;
      title?: string | null;
      image?: string | components["schemas"]["Files"] | null;
    };
    ItemsBlockArchive: {
      id?: number;
      length?: number;
      extendButton?: string | components["schemas"]["ItemsBlockButton"] | null;
      shrinkButton?: string | components["schemas"]["ItemsBlockButton"] | null;
      images?: ((number | components["schemas"]["ItemsBlockArchiveFiles"])[]) | null;
    };
    ItemsBlockLayout: {
      id?: number;
      horizontal?: boolean | null;
      separated?: boolean | null;
      full_height?: boolean | null;
      blocks?: ((number | components["schemas"]["ItemsBlockLayoutBlocks1"])[]) | null;
    };
    ItemsBlockGap: {
      id?: number;
      /** @description The width of the gap */
      gap_horizontal?: number;
      /** @description The height of the gap */
      gap_vertical?: number;
    };
    ItemsLanguages: {
      code: string;
      name?: string | null;
      direction?: string | null;
    };
    ItemsBlockLink: {
      id?: number;
      sort?: number | null;
      href?: string | null;
      icon?: string | null;
      hoverAnimation?: boolean | null;
      size?: string | null;
      title?: string | null;
      type?: string;
      translations?: ((number | components["schemas"]["ItemsBlockLinkTranslations"])[]) | null;
    };
    ItemsBlockRichtextTranslations: {
      id?: number;
      block_richtext_id?: string | components["schemas"]["ItemsBlockRichtext"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      content?: string | null;
    };
    ItemsBlockCardTranslations: {
      id?: number;
      block_card_id?: number | components["schemas"]["ItemsBlockCard"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      description?: string | null;
    };
    ItemsBlockLightbox: {
      id?: number;
      images?: ((number | components["schemas"]["ItemsBlockLightboxFiles"])[]) | null;
    };
    ItemsBlockLinkTranslations: {
      id?: number;
      block_link_id?: number | components["schemas"]["ItemsBlockLink"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
    };
    ItemsBlockLocationanddate: {
      id?: number;
      translations?: ((number | components["schemas"]["ItemsBlockLocationanddateTranslations"])[]) | null;
    };
    ItemsBlockConditionalcardTranslations: {
      id?: number;
      block_conditionalcard_id?: number | components["schemas"]["ItemsBlockConditionalcard"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      card_condition_text?: string | null;
      card_link_subtext?: string | null;
    };
    ItemsBlockConditionalcard: {
      id?: number;
      card_link?: number | components["schemas"]["ItemsBlockLink"] | null;
      card_link_image?: string | components["schemas"]["Files"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockConditionalcardTranslations"])[]) | null;
    };
    ItemsBlockTajenka: {
      id?: number;
      result?: string | null;
    };
    ItemsBlockLocationanddateTranslations: {
      id?: number;
      block_locationanddate_id?: number | components["schemas"]["ItemsBlockLocationanddate"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      time?: string | null;
      date?: string | null;
      location1?: string | null;
      location2?: string | null;
      cost_and_subtitles?: string | null;
    };
    ItemsBlockBannerhero: {
      id?: number;
      image?: string | components["schemas"]["Files"] | null;
      title?: string | null;
      headline?: string | null;
      content?: string | null;
      scroll_target_id?: string | null;
      block_layout?: number | components["schemas"]["ItemsBlockLayout"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockBannerheroTranslations"])[]) | null;
    };
    ItemsBlockBannerheroTranslations: {
      id?: number;
      block_bannerhero_id?: number | components["schemas"]["ItemsBlockBannerhero"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      headline?: string | null;
      content?: string | null;
    };
    ItemsBlockPartner: {
      id?: number;
      logo?: string | components["schemas"]["Files"] | null;
      name: string;
      link: string;
      is_general?: boolean | null;
    };
    ItemsBlockFestivalPoster: {
      id?: number;
      poster: string | components["schemas"]["Files"];
      translations?: ((number | components["schemas"]["ItemsBlockFestivalPosterTranslations"])[]) | null;
    };
    ItemsBlockVideoTrailerTranslations: {
      id?: number;
      block_video_trailer_id?: number | components["schemas"]["ItemsBlockVideoTrailer"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      content?: string | null;
      title?: string | null;
    };
    ItemsBlockFestivalPosterTranslations: {
      id?: number;
      block_festival_poster_id?: number | components["schemas"]["ItemsBlockFestivalPoster"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      headline: string;
      description: string;
    };
    ItemsBlockVideoTrailer: {
      id?: number;
      video?: string | components["schemas"]["ItemsBlockVideo"] | null;
      background?: string | components["schemas"]["Files"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockVideoTrailerTranslations"])[]) | null;
    };
    ItemsBlockButtonTranslations: {
      id?: number;
      block_button_id?: string | components["schemas"]["ItemsBlockButton"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      label?: string | null;
    };
    ItemsFilmCrewFilmPerson: {
      id?: number;
      film_id?: number | components["schemas"]["ItemsFilm"] | null;
      film_person_id?: number | components["schemas"]["ItemsFilmPerson"] | null;
      crew_roles?: ((number | components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"])[]) | null;
    };
    ItemsPageBlocksBackground: {
      id?: number;
    };
    ItemsGradient: {
      id?: number;
      linear?: boolean | null;
      from?: string | null;
      to?: string | null;
      via?: string | null;
      angle?: number | null;
      name?: string | null;
    };
    ItemsBlockLogo: {
      id?: number;
      logo?: string | components["schemas"]["Files"] | null;
      logo_text?: string | components["schemas"]["Files"] | null;
    };
    ItemsPageBlocksBackground1: {
      id?: number;
      page_blocks_id?: string | components["schemas"]["ItemsPageBlocks"] | null;
      item?: ((string | components["schemas"]["ItemsGradient"])[]) | null;
      collection?: string | null;
    };
    ItemsBlockLogoImage: {
      id?: number;
      block_logo_id?: number | components["schemas"]["ItemsBlockLogo"] | null;
      item?: ((string | components["schemas"]["ItemsBlockImage"])[]) | null;
      collection?: string | null;
    };
    ItemsBlockCountdownTranslations: {
      id?: number;
      block_countdown_id?: number | components["schemas"]["ItemsBlockCountdown"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      custom_plural_date_suffix?: string | null;
    };
    ItemsBlockCountdown: {
      id?: number;
      /** Format: date-time */
      end_date?: string | null;
      hide_layout_element?: number | components["schemas"]["ItemsBlockLayout"] | null;
      /** Format: date-time */
      hide_date?: string | null;
      title?: string | null;
      custom_plural_date_suffix?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockCountdownTranslations"])[]) | null;
    };
    ItemsFilmCrewFilmPersonFilmCrewRole: {
      id?: number;
      film_crew_film_person_id?: number | components["schemas"]["ItemsFilmCrewFilmPerson"] | null;
      film_crew_role_id?: number | components["schemas"]["ItemsFilmCrewRole"] | null;
    };
    ItemsVote: {
      /** Format: uuid */
      id: string;
      voting_id?: string | components["schemas"]["ItemsVoting"] | null;
      films?: ((number | components["schemas"]["ItemsVoteFilm"])[]) | null;
    };
    ItemsBlockPatronTranslations: {
      id?: number;
      block_patron_id?: number | components["schemas"]["ItemsBlockPatron"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      role?: string | null;
    };
    ItemsVoting: {
      /** Format: uuid */
      id: string;
      title?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      before_start_text?: string | null;
      after_end_text?: string | null;
      active?: boolean | null;
      translations?: ((number | components["schemas"]["ItemsVotingTranslations"])[]) | null;
      films?: ((number | components["schemas"]["ItemsVotingFilm"])[]) | null;
    };
    ItemsBlockPatron: {
      id?: number;
      name?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockPatronTranslations"])[]) | null;
    };
    ItemsBlockFestivalFooterTranslations: {
      id?: number;
      block_festival_footer_id?: number | components["schemas"]["ItemsBlockFestivalFooter"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      contactSection?: string | null;
      navigationSection?: string | null;
      footerCredit?: string | null;
    };
    ItemsBlockFestivalFooter: {
      id?: number;
      translations?: ((number | components["schemas"]["ItemsBlockFestivalFooterTranslations"])[]) | null;
      socials?: ((number | components["schemas"]["ItemsBlockFestivalFooterSocial"])[]) | null;
    };
    ItemsBlockJury: {
      id?: number;
      name?: string | null;
      image?: string | components["schemas"]["Files"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockJuryTranslations"])[]) | null;
    };
    ItemsBlockJuryTranslations: {
      id?: number;
      block_jury_id?: number | components["schemas"]["ItemsBlockJury"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      description?: string | null;
    };
    ItemsBlockFestivalFooterBlockSocialMedia: {
      id?: number;
      block_festival_footer_id?: number | components["schemas"]["ItemsBlockFestivalFooter"] | null;
    };
    ItemsBlockFestivalFooterBlockSocialMedia1: {
      id?: number;
      block_festival_footer_id?: number | components["schemas"]["ItemsBlockFestivalFooter"] | null;
    };
    ItemsBlockImageRow: {
      id?: number;
      in_one_row?: number | null;
      images?: ((number | components["schemas"]["ItemsBlockImageRowFiles"])[]) | null;
    };
    ItemsBlockImageRowImages: {
      id?: number;
      block_image_row_id?: number | components["schemas"]["ItemsBlockImageRow"] | null;
      item?: ((string | components["schemas"]["ItemsBlockImage"])[]) | null;
      collection?: string | null;
    };
    ItemsSocial: {
      id?: number;
      name?: string | null;
      link?: string | null;
    };
    ItemsBlockFestivalFooterSocial: {
      id?: number;
      block_festival_footer_id?: number | components["schemas"]["ItemsBlockFestivalFooter"] | null;
      social_id?: number | components["schemas"]["ItemsSocial"] | null;
    };
    ItemsBlockImageRowDirectusFiles: {
      id?: number;
      block_image_row_id?: number | components["schemas"]["ItemsBlockImageRow"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsBlockImageRowFiles: {
      id?: number;
      block_image_row_id?: number | components["schemas"]["ItemsBlockImageRow"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsBlockPartnerRowBlockPartner: {
      id?: number;
      block_partner_row_id?: number | components["schemas"]["ItemsBlockPartnerRow"] | null;
      block_partner_id?: number | components["schemas"]["ItemsBlockPartner"] | null;
    };
    ItemsPartnerRowBlockPartner: {
      id?: number;
      block_partner_id?: number | components["schemas"]["ItemsBlockPartner"] | null;
    };
    ItemsBlockPartnerRow: {
      id?: number;
      partners?: ((number | components["schemas"]["ItemsBlockPartnerRowBlockPartner"])[]) | null;
    };
    ItemsBlockReferee: {
      id?: number;
      image?: string | components["schemas"]["Files"] | null;
      name?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockRefereeTranslations"])[]) | null;
    };
    ItemsBlockRefereeTranslations: {
      id?: number;
      block_referee_id?: number | components["schemas"]["ItemsBlockReferee"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      description?: string | null;
    };
    ItemsFilm: {
      id?: number;
      sort?: number | null;
      name?: string | null;
      description?: string | null;
      /** Format: time */
      duration?: string | null;
      festival_block?: number | components["schemas"]["ItemsFestivalBlock"] | null;
      title_image?: string | components["schemas"]["Files"] | null;
      translations?: ((number | components["schemas"]["ItemsFilmTranslations"])[]) | null;
      genres?: ((number | components["schemas"]["ItemsFilmFilmGenre"])[]) | null;
      crew?: ((number | components["schemas"]["ItemsFilmCrewFilmPerson"])[]) | null;
      actors?: ((number | components["schemas"]["ItemsFilmActorFilmPerson"])[]) | null;
    };
    ItemsFilmActorFilmPerson: {
      id?: number;
      film_id?: number | components["schemas"]["ItemsFilm"] | null;
      film_person_id?: number | components["schemas"]["ItemsFilmPerson"] | null;
      character?: string | null;
    };
    ItemsBlockContact: {
      id?: number;
      info?: string | null;
      translations?: ((number | components["schemas"]["ItemsBlockContactTranslations"])[]) | null;
    };
    ItemsBlockArticle: {
      id?: number;
      button_bottom?: boolean | null;
      link?: number | components["schemas"]["ItemsBlockLink"] | null;
      translations?: ((number | components["schemas"]["ItemsBlockArticleTranslations"])[]) | null;
    };
    ItemsBlockInfoStack: {
      id?: number;
      translations?: ((number | components["schemas"]["ItemsBlockInfoStackTranslations"])[]) | null;
    };
    ItemsBlockArticleTranslations: {
      id?: number;
      block_article_id?: number | components["schemas"]["ItemsBlockArticle"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      description?: string | null;
    };
    ItemsBlockInfoStackTranslations: {
      id?: number;
      block_info_stack_id?: number | components["schemas"]["ItemsBlockInfoStack"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
      description?: string | null;
    };
    ItemsBlockContactTranslations: {
      id?: number;
      block_contact_id?: number | components["schemas"]["ItemsBlockContact"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
    };
    ItemsBlockLayoutBlocks1Background: {
      id?: number;
      block_layout_blocks_1_id?: number | components["schemas"]["ItemsBlockLayoutBlocks1"] | null;
      item?: ((string | components["schemas"]["ItemsGradient"])[]) | null;
      collection?: string | null;
    };
    ItemsBlockLightboxFiles: {
      id?: number;
      block_lightbox_id?: number | components["schemas"]["ItemsBlockLightbox"] | null;
      directus_files_id?: string | components["schemas"]["Files"] | null;
    };
    ItemsVotingFilm: {
      id?: number;
      voting_id?: string | components["schemas"]["ItemsVoting"] | null;
      film_id?: number | components["schemas"]["ItemsFilm"] | null;
      sort?: number | null;
    };
    ItemsBlockPartnershipTranslations: {
      id?: number;
      block_partnership_id?: number | components["schemas"]["ItemsBlockPartnership"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      title?: string | null;
    };
    ItemsFilmGenreTranslations: {
      id?: number;
      film_genre_id?: number | components["schemas"]["ItemsFilmGenre"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      name?: string | null;
    };
    ItemsBlockPartnership: {
      id?: number;
      translations?: ((number | components["schemas"]["ItemsBlockPartnershipTranslations"])[]) | null;
      partners?: ((number | components["schemas"]["ItemsBlockPartnershipBlockPartner"])[]) | null;
    };
    ItemsFestivalBlockTranslations: {
      id?: number;
      festival_block_id?: number | components["schemas"]["ItemsFestivalBlock"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      name?: string | null;
    };
    ItemsBlockPartnershipBlockPartner: {
      id?: number;
      block_partnership_id?: number | components["schemas"]["ItemsBlockPartnership"] | null;
      block_partner_id?: number | components["schemas"]["ItemsBlockPartner"] | null;
      sort?: number | null;
    };
    ItemsFestivalBlock: {
      id?: number;
      name?: string | null;
      sort?: number | null;
      translations?: ((number | components["schemas"]["ItemsFestivalBlockTranslations"])[]) | null;
    };
    ItemsFilmGenre: {
      id?: number;
      name?: string | null;
      sort?: number | null;
      translations?: ((number | components["schemas"]["ItemsFilmGenreTranslations"])[]) | null;
    };
    ItemsFilmPerson: {
      id?: number;
      first_name?: string | null;
      middle_name?: string | null;
      last_name?: string | null;
      sort?: number | null;
    };
    ItemsFilmCrewRoleTranslations: {
      id?: number;
      film_crew_role_id?: number | components["schemas"]["ItemsFilmCrewRole"] | null;
      languages_code?: string | components["schemas"]["ItemsLanguages"] | null;
      name?: string | null;
    };
    ItemsFilmCrewRole: {
      id?: number;
      name?: string | null;
      sort?: number | null;
      translations?: ((number | components["schemas"]["ItemsFilmCrewRoleTranslations"])[]) | null;
    };
  };
  responses: {
    /** @description Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** @description Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search?: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page?: number;
    /** @description How many items to skip when fetching data. */
    Offset?: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort?: string[];
    /** @description What metadata to return in the response. */
    Meta?: string;
    /** @description A limit on the number of objects that are returned. */
    Limit?: number;
    /** @description Select items in collection by given conditions. */
    Filter?: string;
    /** @description Control what fields are being returned in the object. */
    Fields?: string[];
    /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export?: "csv" | "json" | "xml" | "yaml";
    /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
    Version?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get an Asset
   * @description Image typed files can be dynamically resized and transformed to fit any need.
   */
  getAsset: {
    parameters: {
      query?: {
        /** @description The key of the asset size configured in settings. */
        key?: string;
        /** @description A JSON array of image transformations */
        transforms?: string;
        /** @description Download the asset to your computer */
        download?: boolean;
      };
      path: {
        /** @description The id of the file. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Temporary Access Token
   * @description Retrieve a Temporary Access Token
   */
  login: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
          /** @description The user's one-time-password (if MFA is enabled). */
          otp?: string;
        };
      };
    };
    responses: {
      /** @description Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
  };
  /**
   * Refresh Token
   * @description Refresh a Temporary Access Token.
   */
  refresh: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Log Out
   * @description Log Out
   */
  logout: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
          /**
           * @description Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
           * @enum {string}
           */
          mode?: "json" | "cookie" | "session";
        };
      };
    };
    responses: {
      /** @description Request successful */
      200: {
        content: never;
      };
    };
  };
  /**
   * Request a Password Reset
   * @description Request a reset password email to be send.
   */
  passwordRequest: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Reset a Password
   * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
   */
  passwordReset: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List OAuth Providers
   * @description List configured OAuth providers.
   */
  oauth: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Authenticated using an OAuth provider
   * @description Start OAuth flow using the specified provider
   */
  oauthProvider: {
    parameters: {
      query?: {
        /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
      path: {
        /** @description Key of the activated OAuth provider. */
        provider: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve Schema Snapshot
   * @description Retrieve the current schema. This endpoint is only available to admin users.
   */
  schemaSnapshot: {
    parameters: {
      query?: {
        export?: components["parameters"]["Export"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Schema"];
          };
          "text/yaml": string;
        };
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Apply Schema Difference
   * @description Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
   */
  schemaApply: {
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Diff"];
        };
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      204: {
        content: never;
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve Schema Difference
   * @description Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.
   */
  schemaDiff: {
    parameters: {
      query?: {
        /** @description Bypass version and database vendor restrictions. */
        force?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Schema"];
        };
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Diff"];
          };
        };
      };
      /** @description No schema difference. */
      204: {
        content: never;
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * System Info
   * @description Perform a system status check and return the options.
   */
  serverInfo: {
    parameters: {
      query: {
        /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Ping
   * @description Ping, pong. Ping.. pong.
   */
  ping: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-generate": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * Hash a string
   * @description Generate a hash for a given string.
   */
  "hash-verify": {
    requestBody?: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string: string;
          /** @description Hash you want to verify against. */
          hash: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example true */
            data?: boolean;
          };
        };
      };
    };
  };
  /**
   * Sort Items
   * @description Re-sort items in collection based on start and to value of item
   */
  sort: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Primary key of item to move */
          item?: number;
          /** @description Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Import Items
   * @description Import multiple records from a JSON or CSV file into a collection.
   */
  import: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Export Items
   * @description Export a larger data set to a file in the File Library
   */
  export: {
    parameters: {
      path: {
        /** @description Collection identifier */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What file format to save the export to. One of csv, xml, json
           * @enum {string}
           */
          format: "csv" | "xml" | "json";
          query: components["schemas"]["Query"];
          file: components["schemas"]["Files"];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Clear Cache
   * @description Resets both the data and schema cache of Directus.
   */
  "clear-cache": {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get a Random String
   * @description Returns a random string of given length.
   */
  random: {
    parameters: {
      query?: {
        /** @description Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            /** @example 1>M3+4oh.S */
            data?: string;
          };
        };
      };
    };
  };
  /**
   * List Activity Actions
   * @description Returns a list of activity actions.
   */
  getActivities: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve an Activity Action
   * @description Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.
   */
  getActivity: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Permissions
   * @description List all permissions.
   */
  getPermissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Permission
   * @description Create a new permission.
   */
  createPermission: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this permission applies to.
           * @example customers
           */
          collection?: string;
          /**
           * @description If the user can post comments.
           * @enum {string}
           */
          comment?: "none" | "create" | "update" | "full";
          /**
           * @description If the user can create items.
           * @enum {string}
           */
          create?: "none" | "full";
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          delete?: "none" | "mine" | "role" | "full";
          /**
           * @description If the user is required to leave a comment explaining what was changed.
           * @enum {string}
           */
          explain?: "none" | "create" | "update" | "always";
          /**
           * @description If the user can read items.
           * @enum {string}
           */
          read?: "none" | "mine" | "role" | "full";
          /**
           * @description Unique identifier of the role this permission applies to.
           * @example 3
           */
          role?: number;
          /**
           * @description Explicitly denies read access for specific fields.
           * @example [
           *   "featured_image"
           * ]
           */
          read_field_blacklist?: string[];
          /** @description What status this permission applies to. */
          status?: string;
          /** @description Explicitly denies specific statuses to be used. */
          status_blacklist?: string[];
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          update?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies write access for specific fields. */
          write_field_blacklist?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Permissions
   * @description Delete multiple existing permissions.
   */
  deletePermissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Permissions
   * @description Update multiple permissions at the same time.
   */
  updatePermissions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description What collection this permission applies to.
             * @example customers
             */
            collection?: string;
            /**
             * @description If the user can post comments.
             * @enum {string}
             */
            comment?: "none" | "create" | "update" | "full";
            /**
             * @description If the user can create items.
             * @enum {string}
             */
            create?: "none" | "full";
            /**
             * @description If the user can update items.
             * @enum {string}
             */
            delete?: "none" | "mine" | "role" | "full";
            /**
             * @description If the user is required to leave a comment explaining what was changed.
             * @enum {string}
             */
            explain?: "none" | "create" | "update" | "always";
            /**
             * @description If the user can read items.
             * @enum {string}
             */
            read?: "none" | "mine" | "role" | "full";
            /**
             * @description Unique identifier of the role this permission applies to.
             * @example 3
             */
            role?: number;
            /**
             * @description Explicitly denies read access for specific fields.
             * @example [
             *   "featured_image"
             * ]
             */
            read_field_blacklist?: string[];
            /** @description What status this permission applies to. */
            status?: string;
            /** @description Explicitly denies specific statuses to be used. */
            status_blacklist?: string[];
            /**
             * @description If the user can update items.
             * @enum {string}
             */
            update?: "none" | "mine" | "role" | "full";
            /** @description Explicitly denies write access for specific fields. */
            write_field_blacklist?: string[];
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List My Permissions
   * @description List the permissions that apply to the current user.
   */
  getMyPermissions: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Permission
   * @description Retrieve a single permissions object by unique identifier.
   */
  getPermission: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Permission
   * @description Delete an existing permission
   */
  deletePermission: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Permission
   * @description Update an existing permission
   */
  updatePermission: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description What collection this permission applies to. */
          collection?: Record<string, never>;
          /**
           * @description If the user can post comments. `full`.
           * @enum {string}
           */
          comment?: "none" | "create" | "update";
          /**
           * @description If the user can create items.
           * @enum {string}
           */
          create?: "none" | "full";
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          delete?: "none" | "mine" | "role" | "full";
          /**
           * @description If the user is required to leave a comment explaining what was changed.
           * @enum {string}
           */
          explain?: "none" | "create" | "update" | "always";
          /**
           * @description If the user can read items.
           * @enum {string}
           */
          read?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies read access for specific fields. */
          read_field_blacklist?: Record<string, never>;
          /** @description Unique identifier of the role this permission applies to. */
          role?: Record<string, never>;
          /** @description What status this permission applies to. */
          status?: Record<string, never>;
          /** @description Explicitly denies specific statuses to be used. */
          status_blacklist?: Record<string, never>;
          /**
           * @description If the user can update items.
           * @enum {string}
           */
          update?: "none" | "mine" | "role" | "full";
          /** @description Explicitly denies write access for specific fields. */
          write_field_blacklist?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List All Fields
   * @description Returns a list of the fields available in the project.
   */
  getFields: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Fields in Collection
   * @description Returns a list of the fields available in the given collection.
   */
  getCollectionFields: {
    parameters: {
      query?: {
        sort?: components["parameters"]["Sort"];
      };
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Field in Collection
   * @description Create a new field in a given collection.
   */
  createField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: Record<string, unknown> | null;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: Record<string, unknown> | null;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: Record<string, unknown> | null;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Field
   * @description Retrieves the details of a single field in a given collection.
   */
  getCollectionField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Field
   * @description Delete an existing field.
   */
  deleteField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Field
   * @description Update an existing field.
   */
  updateField: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection the item resides in. */
        collection: string;
        /** @description Unique identifier of the field. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the field. Field name is unique within the collection.
           * @example id
           */
          field?: string;
          /**
           * @description Directus specific data type. Used to cast values in the API.
           * @example integer
           */
          type?: string;
          /** @description The schema info. */
          schema?: {
            /**
             * @description The name of the field.
             * @example title
             */
            name?: string;
            /**
             * @description The collection of the field.
             * @example posts
             */
            table?: string;
            /**
             * @description The type of the field.
             * @example string
             */
            type?: string;
            /**
             * @description The default value of the field.
             * @example null
             */
            default_value?: string | null;
            /**
             * @description The max length of the field.
             * @example null
             */
            max_length?: number | null;
            /**
             * @description If the field is nullable.
             * @example false
             */
            is_nullable?: boolean;
            /**
             * @description If the field is primary key.
             * @example false
             */
            is_primary_key?: boolean;
            /**
             * @description If the field has auto increment.
             * @example false
             */
            has_auto_increment?: boolean;
            /**
             * @description Related column from the foreign key constraint.
             * @example null
             */
            foreign_key_column?: string | null;
            /**
             * @description Related table from the foreign key constraint.
             * @example null
             */
            foreign_key_table?: string | null;
            /**
             * @description Comment as saved in the database.
             * @example null
             */
            comment?: string | null;
            /**
             * @description Database schema (pg only).
             * @example public
             */
            schema?: string;
            /**
             * @description Related schema from the foreign key constraint (pg only).
             * @example null
             */
            foreign_key_schema?: string | null;
          };
          /** @description The meta info. */
          meta?: ({
            /**
             * @description Unique identifier for the field in the `directus_fields` collection.
             * @example 3
             */
            id?: number;
            /**
             * @description Unique name of the collection this field is in.
             * @example posts
             */
            collection?: string;
            /**
             * @description Unique name of the field. Field name is unique within the collection.
             * @example title
             */
            field?: string;
            /**
             * @description Transformation flag for field
             * @example null
             */
            special?: string[] | null;
            /**
             * @description What interface is used in the admin app to edit the value for this field.
             * @example primary-key
             */
            "system-interface"?: string | null;
            /**
             * @description Options for the interface that's used. This format is based on the individual interface.
             * @example null
             */
            options?: Record<string, unknown> | null;
            /**
             * @description What display is used in the admin app to display the value for this field.
             * @example null
             */
            display?: string | null;
            /**
             * @description Options for the display that's used. This format is based on the individual display.
             * @example null
             */
            display_options?: Record<string, unknown> | null;
            /**
             * @description If the field can be altered by the end user. Directus system fields have this value set to `true`.
             * @example true
             */
            locked?: boolean;
            /**
             * @description Prevents the user from editing the value in the field.
             * @example false
             */
            readonly?: boolean;
            /**
             * @description If this field should be hidden.
             * @example true
             */
            hidden?: boolean;
            /**
             * @description Sort order of this field on the edit page of the admin app.
             * @example 1
             */
            sort?: number | null;
            /**
             * @description Width of the field on the edit form.
             * @example null
             * @enum {string|null}
             */
            width?: "half" | "half-left" | "half-right" | "full" | "fill" | null;
            /**
             * @description What field group this field is part of.
             * @example null
             */
            group?: number | null;
            /**
             * @description Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
             * @example null
             */
            translation?: Record<string, unknown> | null;
            /**
             * @description A user provided note for the field. Will be rendered alongside the interface on the edit page.
             * @example
             */
            note?: string | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Files
   * @description List the files.
   */
  getFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a File
   * @description Create a new file
   */
  createFile: {
    requestBody?: {
      content: {
        "application/json": {
          data?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Files
   * @description Delete multiple existing files.
   */
  deleteFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Files
   * @description Update multiple files at the same time.
   */
  updateFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            data?: string;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Files
   * @description Retrieve a single file by unique identifier.
   */
  getFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a File
   * @description Delete an existing file.
   */
  deleteFile: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a File
   * @description Update an existing file, and/or replace it's file contents.
   */
  updateFile: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "multipart/data": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: string | components["schemas"]["Folders"] | null;
          /** @description Tags for the file. Is automatically populated based on Exif data for images. */
          tags?: string[] | null;
          /**
           * Format: binary
           * @description File contents.
           */
          file: unknown;
        };
        "application/json": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: string | components["schemas"]["Folders"] | null;
          /** @description Tags for the file. Is automatically populated based on Exif data for images. */
          tags?: string[] | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Collections
   * @description Returns a list of the collections available in the project.
   */
  getCollections: {
    parameters: {
      query?: {
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Collection
   * @description Create a new collection in Directus.
   */
  createCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Unique name of the collection.
           * @example my_collection
           */
          collection: string;
          /** @description The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided. */
          fields: Record<string, never>[];
          /**
           * @description Name of a Google Material Design Icon that's assigned to this collection.
           * @example people
           */
          icon?: string | null;
          /**
           * @description A note describing the collection.
           * @example null
           */
          note?: string | null;
          /**
           * @description Text representation of how items from this collection are shown across the system.
           * @example null
           */
          display_template?: string | null;
          /**
           * @description Whether or not the collection is hidden from the navigation in the admin app.
           * @example false
           */
          hidden?: boolean;
          /**
           * @description Whether or not the collection is treated as a single object.
           * @example false
           */
          singleton?: boolean;
          /**
           * @description Key value pairs of how to show this collection's name in different languages in the admin app.
           * @example null
           */
          translation?: string | null;
          /**
           * @description Whether or not Content Versioning is enabled for this collection.
           * @example false
           */
          versioning?: boolean;
          /**
           * @description What field holds the archive value.
           * @example null
           */
          archive_field?: string | null;
          /**
           * @description What value to use for "archived" items.
           * @example null
           */
          archive_app_filter?: string | null;
          /**
           * @description What value to use to "unarchive" items.
           * @example null
           */
          archive_value?: string | null;
          /**
           * @description Whether or not to show the "archived" filter.
           * @example null
           */
          unarchive_value?: string | null;
          /**
           * @description The sort field in the collection.
           * @example null
           */
          sort_field?: string | null;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Collection
   * @description Retrieves the details of a single collection.
   */
  getCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Collection
   * @description Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
   */
  deleteCollection: {
    parameters: {
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Collection
   * @description Update an existing collection.
   */
  updateCollection: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Unique identifier of the collection. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Metadata of the collection. */
          meta?: {
            /**
             * @description Name of a Google Material Design Icon that's assigned to this collection.
             * @example people
             */
            icon?: string | null;
            /**
             * @description Choose the color for the icon assigned to this collection.
             * @example #6644ff
             */
            color?: string | null;
            /**
             * @description A note describing the collection.
             * @example null
             */
            note?: string | null;
            /**
             * @description Text representation of how items from this collection are shown across the system.
             * @example null
             */
            display_template?: string | null;
            /**
             * @description Whether or not the collection is hidden from the navigation in the admin app.
             * @example false
             */
            hidden?: boolean;
            /**
             * @description Whether or not the collection is treated as a single object.
             * @example false
             */
            singleton?: boolean;
            /**
             * @description Key value pairs of how to show this collection's name in different languages in the admin app.
             * @example null
             */
            translation?: string | null;
            /**
             * @description Whether or not Content Versioning is enabled for this collection.
             * @example false
             */
            versioning?: boolean;
            /**
             * @description What field holds the archive value.
             * @example null
             */
            archive_field?: string | null;
            /**
             * @description What value to use for "archived" items.
             * @example null
             */
            archive_app_filter?: string | null;
            /**
             * @description What value to use to "unarchive" items.
             * @example null
             */
            archive_value?: string | null;
            /**
             * @description Whether or not to show the "archived" filter.
             * @example null
             */
            unarchive_value?: string | null;
            /**
             * @description The sort field in the collection.
             * @example null
             */
            sort_field?: string | null;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Folders
   * @description List the folders.
   */
  getFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Folder
   * @description Create a new folder.
   */
  createFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Name of the folder.
           * @example Amsterdam
           */
          name: string;
          /** @description Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Folders
   * @description Delete multiple existing folders.
   */
  deleteFolders: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Folders
   * @description Update multiple folders at the same time.
   */
  updateFolders: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description Name of the folder.
             * @example Amsterdam
             */
            name: string;
            /** @description Unique identifier of the parent folder. This allows for nested folders. */
            parent?: number;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Folder
   * @description Retrieve a single folder by unique identifier.
   */
  getFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Folder
   * @description Delete an existing folder
   */
  deleteFolder: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Folder
   * @description Update an existing folder
   */
  updateFolder: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Name of the folder. Can't be null or empty. */
          name?: string;
          /**
           * @description Unique identifier of the parent folder. This allows for nested folders.
           * @example 3
           */
          parent?: number;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_translations items.
   */
  readItemsFilmTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_translations item.
   */
  createItemsFilmTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmTranslations"][] | components["schemas"]["ItemsFilmTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_translations items.
   */
  deleteItemsFilmTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_translations items at the same time.
   */
  updateItemsFilmTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmTranslations"][] | components["schemas"]["ItemsFilmTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_translations item by unique identifier.
   */
  readSingleItemsFilmTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_translations item.
   */
  deleteSingleItemsFilmTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_translations item.
   */
  updateSingleItemsFilmTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Roles
   * @description List the roles.
   */
  getRoles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Role
   * @description Create a new role.
   */
  createRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Description of the role. */
          description?: string;
          /** @description Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** @description ID used with external services in SCIM. */
          external_id?: string;
          /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_access?: string[];
          /** @description Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /**
           * @description Name of the role.
           * @example Interns
           */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Roles
   * @description Delete multiple existing roles.
   */
  deleteRoles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Roles
   * @description Update multiple roles at the same time.
   */
  updateRoles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /** @description Description of the role. */
            description?: string;
            /** @description Whether or not this role enforces the use of 2FA. */
            enforce_tfa?: boolean;
            /** @description ID used with external services in SCIM. */
            external_id?: string;
            /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
            ip_access?: string[];
            /** @description Custom override for the admin app module bar navigation. */
            module_listing?: string;
            /**
             * @description Name of the role.
             * @example Interns
             */
            name?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Role
   * @description Retrieve a single role by unique identifier.
   */
  getRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Role
   * @description Delete an existing role
   */
  deleteRole: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Role
   * @description Update an existing role
   */
  updateRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Description of the role. */
          description?: string;
          /** @description Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** @description ID used with external services in SCIM. */
          external_id?: string;
          /** @description Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_access?: string[];
          /** @description Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** @description Name of the role. */
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Presets
   * @description List the presets.
   */
  getPresets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        page?: components["parameters"]["Page"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a Preset
   * @description Create a new preset.
   */
  createPreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /**
           * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
           * @example null
           */
          role?: string;
          /** @description What the user searched for in search/filter in the header bar. */
          search?: string;
          filters?: {
              /** @example aHKLAakdVghzD */
              key?: string;
              /** @example rating */
              field?: string;
              /** @example gte */
              operator?: string;
              /** @example 4.5 */
              value?: number;
            }[];
          /** @description Name of the view type that is used. */
          layout?: string;
          /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          layout_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          layout_options?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Presets
   * @description Delete multiple existing presets.
   */
  deletePresets: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Presets
   * @description Update multiple presets at the same time.
   */
  updatePresets: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description What collection this collection preset is used for.
             * @example articles
             */
            collection: string;
            /**
             * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
             * @example Highly rated articles
             */
            title?: string;
            /**
             * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
             * @example null
             */
            role?: string;
            /** @description What the user searched for in search/filter in the header bar. */
            search?: string;
            filters?: {
                /** @example aHKLAakdVghzD */
                key?: string;
                /** @example rating */
                field?: string;
                /** @example gte */
                operator?: string;
                /** @example 4.5 */
                value?: number;
              }[];
            /** @description Name of the view type that is used. */
            layout?: string;
            /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
            layout_query?: string;
            /** @description Options of the views. The properties in here are controlled by the layout. */
            layout_options?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Preset
   * @description Retrieve a single preset by unique identifier.
   */
  getPreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a Preset
   * @description Delete an existing preset.
   */
  deletePreset: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a Preset
   * @description Update an existing preset.
   */
  updatePreset: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /** @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: number;
          /** @description What the user searched for in search/filter in the header bar. */
          search_query?: string;
          filters?: {
              /** @example rating */
              field?: string;
              /** @example gte */
              operator?: string;
              /** @example 4.5 */
              value?: number;
            }[];
          /** @description Name of the view type that is used. Defaults to tabular. */
          view_type?: string;
          /** @description View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          view_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          view_options?: string;
          /** @description Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
          translation?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * List Users
   * @description List the users.
   */
  getUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a User
   * @description Create a new user.
   */
  createUser: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Users
   * @description Delete multiple existing users.
   */
  deleteUsers: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Users
   * @description Update multiple users at the same time.
   */
  updateUsers: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Users"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a User
   * @description Retrieve a single user by unique identifier.
   */
  getUser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a User
   * @description Delete an existing user
   */
  deleteUser: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a User
   * @description Update an existing user
   */
  updateUser: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Invite User(s)
   * @description Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
   */
  invite: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Email address or array of email addresses of the to-be-invited user(s). */
          email?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Accept User Invite
   * @description Accepts and enables an invited user using a JWT invitation token.
   */
  acceptInvite: {
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Accept invite token.
           * @example eyJh...KmUk
           */
          token?: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example d1r3ctu5
           */
          password?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve Current User
   * @description Retrieve the currently authenticated user.
   */
  getMe: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Current User
   * @description Update the currently authenticated user.
   */
  updateMe: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Last Page
   * @description Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
   */
  updateLastUsedPageMe: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Path of the page you used last. */
          last_page?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Enable 2FA
   * @description Enables two-factor authentication for the currently authenticated user.
   */
  meTfaEnable: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Disable 2FA
   * @description Disables two-factor authentication for the currently authenticated user.
   */
  meTfaDisable: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vote_film items.
   */
  readItemsVoteFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoteFilm"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vote_film item.
   */
  createItemsVoteFilm: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoteFilm"][] | components["schemas"]["ItemsVoteFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vote_film items.
   */
  deleteItemsVoteFilm: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vote_film items at the same time.
   */
  updateItemsVoteFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoteFilm"][] | components["schemas"]["ItemsVoteFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vote_film item by unique identifier.
   */
  readSingleItemsVoteFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoteFilm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vote_film item.
   */
  deleteSingleItemsVoteFilm: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vote_film item.
   */
  updateSingleItemsVoteFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoteFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoteFilm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Relations
   * @description List the relations.
   */
  getRelations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Relation
   * @description Create a new relation.
   */
  createRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Collection that has the field that holds the foreign key.
           * @example articles
           */
          collection_many?: string;
          /**
           * @description Collection on the _one_ side of the relationship.
           * @example authors
           */
          collection_one?: string;
          /**
           * @description Foreign key. Field that holds the primary key of the related collection.
           * @example author
           */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Relation
   * @description Retrieve a single relation by unique identifier.
   */
  getRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Relation
   * @description Delete an existing relation.
   */
  deleteRelation: {
    parameters: {
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Relation
   * @description Update an existing relation
   */
  updateRelation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** @description Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** @description Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /**
           * @description Alias column that serves as the _one_ side of the relationship.
           * @example books
           */
          field_one?: string;
          /** @description Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Revisions
   * @description List the revisions.
   */
  getRevisions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve a Revision
   * @description Retrieve a single revision by unique identifier.
   */
  getRevision: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Flows
   * @description Get all flows.
   */
  getFlows: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Flow
   * @description Create a new flow.
   */
  createFlow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Flows
   * @description Delete multiple existing flows.
   */
  deleteFlows: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Flows
   * @description Update multiple flows at the same time.
   */
  updateFlows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Flows"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Flow
   * @description Retrieve a single flow by unique identifier.
   */
  getFlow: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Flow
   * @description Delete an existing flow
   */
  deleteFlow: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Flow
   * @description Update an existing flow
   */
  updateFlow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Flows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Operations
   * @description Get all operations.
   */
  getOperations: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create an Operation
   * @description Create a new operation.
   */
  createOperation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Operations
   * @description Delete multiple existing operations.
   */
  deleteOperations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Operations
   * @description Update multiple operations at the same time.
   */
  updateOperations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Operations"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve an Operation
   * @description Retrieve a single operation by unique identifier.
   */
  getOperation: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Operation
   * @description Delete an existing operation
   */
  deleteOperation: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Operation
   * @description Update an existing operation
   */
  updateOperation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Operations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Webhooks
   * @description Get all webhooks.
   */
  getWebhooks: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create a Webhook
   * @description Create a new webhook.
   */
  createWebhook: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the webhook.
           * @example create articles
           */
          name?: string;
          /**
           * @description Method used in the webhook.
           * @example POST
           */
          method?: string;
          /**
           * @description The url of the webhook.
           * @example null
           */
          url?: string;
          /**
           * @description The status of the webhook.
           * @example active
           */
          status?: string;
          /**
           * @description If yes, send the content of what was done
           * @example true
           */
          data?: boolean;
          /**
           * @description The actions that triggers this webhook.
           * @example null
           */
          actions?: unknown;
          /**
           * @description The collections that triggers this webhook.
           * @example null
           */
          "system-collections"?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Webhooks
   * @description Delete multiple existing webhooks.
   */
  deleteWebhooks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Webhooks
   * @description Update multiple webhooks at the same time.
   */
  updateWebhooks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: {
            /**
             * @description The name of the webhook.
             * @example create articles
             */
            name?: string;
            /**
             * @description Method used in the webhook.
             * @example POST
             */
            method?: string;
            /**
             * @description The url of the webhook.
             * @example null
             */
            url?: string;
            /**
             * @description The status of the webhook.
             * @example active
             */
            status?: string;
            /**
             * @description If yes, send the content of what was done
             * @example true
             */
            data?: boolean;
            /**
             * @description The actions that triggers this webhook.
             * @example null
             */
            actions?: unknown;
            /**
             * @description The collections that triggers this webhook.
             * @example null
             */
            "system-collections"?: unknown;
          };
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Webhook
   * @description Retrieve a single webhook by unique identifier.
   */
  getWebhook: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Webhook
   * @description Delete an existing webhook
   */
  deleteWebhook: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Webhook
   * @description Update an existing webhook
   */
  updateWebhook: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the webhook.
           * @example create articles
           */
          name?: string;
          /**
           * @description Method used in the webhook.
           * @example POST
           */
          method?: string;
          /**
           * @description The url of the webhook.
           * @example null
           */
          url?: string;
          /**
           * @description The status of the webhook.
           * @example active
           */
          status?: string;
          /**
           * @description If yes, send the content of what was done
           * @example true
           */
          data?: boolean;
          /**
           * @description The actions that triggers this webhook.
           * @example null
           */
          actions?: unknown;
          /**
           * @description The collections that triggers this webhook.
           * @example null
           */
          "system-collections"?: unknown;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Extensions
   * @description List the installed extensions and their configuration in the project.
   */
  listExtensions: {
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update an Extension
   * @description Update an existing extension.
   */
  updateExtensions: {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
          meta?: {
            /**
             * @description Whether or not the extension is enabled.
             * @example true
             */
            enabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Extension
   * @description Update an existing extension.
   */
  updateExtensionBundle: {
    parameters: {
      path: {
        bundle: string;
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Directus metadata for the extension. Where the configuration for the extension in the current project is stored. */
          meta?: {
            /**
             * @description Whether or not the extension is enabled.
             * @example true
             */
            enabled?: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Extensions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Retrieve Settings
   * @description List the settings.
   */
  getSettings: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update Settings
   * @description Update the settings
   */
  updateSetting: {
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Content Versions
   * @description Get all Content Versions.
   */
  getContentVersions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        meta?: components["parameters"]["Meta"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Create Multiple Content Versions
   * @description Create multiple new Content Versions.
   */
  createContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Versions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete Multiple Content Versions
   * @description Delete multiple existing Content Versions.
   */
  deleteContentVersions: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Content Versions
   * @description Update multiple Content Versions at the same time.
   */
  updateContentVersions: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          data?: components["schemas"]["Versions"];
          keys?: string[];
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Content Version
   * @description Retrieve a single Content Version by unique identifier.
   */
  getContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete a Content Version
   * @description Delete an existing Content Version.
   */
  deleteContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update a Content Version
   * @description Update an existing Content Version.
   */
  updateContentVersion: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Versions"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Versions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Save to a Content Version
   * @description Save item changes to an existing Content Version.
   */
  saveContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Compare a Content Version
   * @description Compare an existing Content Version with the main version of the item.
   */
  compareContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: Record<string, never>;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Promote a Content Version
   * @description Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).
   */
  promoteContentVersion: {
    parameters: {
      path: {
        id: components["parameters"]["UUId"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Hash of the main version of the item to be promoted. */
          mainHash?: string;
          /** @description Optional array of field names of which the values are to be promoted. */
          fields?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Comments
   * @description List the comments.
   */
  getComments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        offset?: components["parameters"]["Offset"];
        page?: components["parameters"]["Page"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create a Comment
   * @description Create a new comment.
   */
  createComment: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Which collection this collection comment is for.
           * @example projects
           */
          collection: string;
          /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
          item: string;
          /** @example A new comment */
          comment: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Comments
   * @description Delete multiple existing comments.
   */
  deleteComments: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Comments
   * @description Update multiple comments at the same time.
   */
  updateComments: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          keys?: string[];
          data?: {
            /**
             * @description Which collection this collection comment is for.
             * @example projects
             */
            collection: string;
            /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
            item?: string;
            /** @example A new comment */
            comment?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Retrieve a Comment
   * @description Retrieve a single comment by unique identifier.
   */
  getComment: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete a Comment
   * @description Delete an existing comment.
   */
  deleteComment: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update a Comment
   * @description Update an existing comment.
   */
  updateComment: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description Which collection this comment is for.
           * @example projects
           */
          collection: string;
          /** @example 81dfa7e0-56d2-471f-b96a-1cf8a62bdf28 */
          item?: string;
          /** @example An updated comment */
          comment?: string;
        };
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Comments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_film_genre items.
   */
  readItemsFilmFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmFilmGenre"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_film_genre item.
   */
  createItemsFilmFilmGenre: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmFilmGenre"][] | components["schemas"]["ItemsFilmFilmGenre"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_film_genre items.
   */
  deleteItemsFilmFilmGenre: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_film_genre items at the same time.
   */
  updateItemsFilmFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmFilmGenre"][] | components["schemas"]["ItemsFilmFilmGenre"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_film_genre item by unique identifier.
   */
  readSingleItemsFilmFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmFilmGenre"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_film_genre item.
   */
  deleteSingleItemsFilmFilmGenre: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_film_genre item.
   */
  updateSingleItemsFilmFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmFilmGenre"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmFilmGenre"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voting_translations items.
   */
  readItemsVotingTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVotingTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voting_translations item.
   */
  createItemsVotingTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVotingTranslations"][] | components["schemas"]["ItemsVotingTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voting_translations items.
   */
  deleteItemsVotingTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voting_translations items at the same time.
   */
  updateItemsVotingTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVotingTranslations"][] | components["schemas"]["ItemsVotingTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voting_translations item by unique identifier.
   */
  readSingleItemsVotingTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVotingTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voting_translations item.
   */
  deleteSingleItemsVotingTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voting_translations item.
   */
  updateSingleItemsVotingTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVotingTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVotingTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_button items.
   */
  readItemsBlockButton: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_button item.
   */
  createItemsBlockButton: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButton"][] | components["schemas"]["ItemsBlockButton"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_button items.
   */
  deleteItemsBlockButton: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_button items at the same time.
   */
  updateItemsBlockButton: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButton"][] | components["schemas"]["ItemsBlockButton"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_button item by unique identifier.
   */
  readSingleItemsBlockButton: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_button item.
   */
  deleteSingleItemsBlockButton: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_button item.
   */
  updateSingleItemsBlockButton: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButton"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_divider items.
   */
  readItemsBlockDivider: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDivider"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_divider item.
   */
  createItemsBlockDivider: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDivider"][] | components["schemas"]["ItemsBlockDivider"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_divider items.
   */
  deleteItemsBlockDivider: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_divider items at the same time.
   */
  updateItemsBlockDivider: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDivider"][] | components["schemas"]["ItemsBlockDivider"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_divider item by unique identifier.
   */
  readSingleItemsBlockDivider: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDivider"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_divider item.
   */
  deleteSingleItemsBlockDivider: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_divider item.
   */
  updateSingleItemsBlockDivider: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockDivider"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockDivider"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_faqs items.
   */
  readItemsBlockFaqs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFaqs"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_faqs item.
   */
  createItemsBlockFaqs: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFaqs"][] | components["schemas"]["ItemsBlockFaqs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_faqs items.
   */
  deleteItemsBlockFaqs: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_faqs items at the same time.
   */
  updateItemsBlockFaqs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFaqs"][] | components["schemas"]["ItemsBlockFaqs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_faqs item by unique identifier.
   */
  readSingleItemsBlockFaqs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFaqs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_faqs item.
   */
  deleteSingleItemsBlockFaqs: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_faqs item.
   */
  updateSingleItemsBlockFaqs: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFaqs"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFaqs"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_logocloud items.
   */
  readItemsBlockLogocloud: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogocloud"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_logocloud item.
   */
  createItemsBlockLogocloud: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogocloud"][] | components["schemas"]["ItemsBlockLogocloud"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_logocloud items.
   */
  deleteItemsBlockLogocloud: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_logocloud items at the same time.
   */
  updateItemsBlockLogocloud: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogocloud"][] | components["schemas"]["ItemsBlockLogocloud"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_logocloud item by unique identifier.
   */
  readSingleItemsBlockLogocloud: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogocloud"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_logocloud item.
   */
  deleteSingleItemsBlockLogocloud: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_logocloud item.
   */
  updateSingleItemsBlockLogocloud: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogocloud"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogocloud"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_hero items.
   */
  readItemsBlockHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_hero item.
   */
  createItemsBlockHero: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHero"][] | components["schemas"]["ItemsBlockHero"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_hero items.
   */
  deleteItemsBlockHero: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_hero items at the same time.
   */
  updateItemsBlockHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHero"][] | components["schemas"]["ItemsBlockHero"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_hero item by unique identifier.
   */
  readSingleItemsBlockHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_hero item.
   */
  deleteSingleItemsBlockHero: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_hero item.
   */
  updateSingleItemsBlockHero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHero"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_html items.
   */
  readItemsBlockHTML: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHTML"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_html item.
   */
  createItemsBlockHTML: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHTML"][] | components["schemas"]["ItemsBlockHTML"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_html items.
   */
  deleteItemsBlockHTML: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_html items at the same time.
   */
  updateItemsBlockHTML: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHTML"][] | components["schemas"]["ItemsBlockHTML"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_html item by unique identifier.
   */
  readSingleItemsBlockHTML: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHTML"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_html item.
   */
  deleteSingleItemsBlockHTML: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_html item.
   */
  updateSingleItemsBlockHTML: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHTML"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHTML"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_step_items items.
   */
  readItemsBlockStepItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockStepItems"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_step_items item.
   */
  createItemsBlockStepItems: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockStepItems"][] | components["schemas"]["ItemsBlockStepItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_step_items items.
   */
  deleteItemsBlockStepItems: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_step_items items at the same time.
   */
  updateItemsBlockStepItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockStepItems"][] | components["schemas"]["ItemsBlockStepItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_step_items item by unique identifier.
   */
  readSingleItemsBlockStepItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockStepItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_step_items item.
   */
  deleteSingleItemsBlockStepItems: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_step_items item.
   */
  updateSingleItemsBlockStepItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockStepItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockStepItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_quote items.
   */
  readItemsBlockQuote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuote"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_quote item.
   */
  createItemsBlockQuote: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuote"][] | components["schemas"]["ItemsBlockQuote"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_quote items.
   */
  deleteItemsBlockQuote: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_quote items at the same time.
   */
  updateItemsBlockQuote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuote"][] | components["schemas"]["ItemsBlockQuote"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_quote item by unique identifier.
   */
  readSingleItemsBlockQuote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuote"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_quote item.
   */
  deleteSingleItemsBlockQuote: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_quote item.
   */
  updateSingleItemsBlockQuote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockQuote"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockQuote"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_richtext items.
   */
  readItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_richtext item.
   */
  createItemsBlockRichtext: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtext"][] | components["schemas"]["ItemsBlockRichtext"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_richtext items.
   */
  deleteItemsBlockRichtext: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_richtext items at the same time.
   */
  updateItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtext"][] | components["schemas"]["ItemsBlockRichtext"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_richtext item by unique identifier.
   */
  readSingleItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_richtext item.
   */
  deleteSingleItemsBlockRichtext: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_richtext item.
   */
  updateSingleItemsBlockRichtext: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtext"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtext"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_gallery items.
   */
  readItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGallery"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_gallery item.
   */
  createItemsBlockGallery: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGallery"][] | components["schemas"]["ItemsBlockGallery"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_gallery items.
   */
  deleteItemsBlockGallery: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_gallery items at the same time.
   */
  updateItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGallery"][] | components["schemas"]["ItemsBlockGallery"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_gallery item by unique identifier.
   */
  readSingleItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGallery"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_gallery item.
   */
  deleteSingleItemsBlockGallery: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_gallery item.
   */
  updateSingleItemsBlockGallery: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGallery"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGallery"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_form items.
   */
  readItemsBlockForm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockForm"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_form item.
   */
  createItemsBlockForm: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockForm"][] | components["schemas"]["ItemsBlockForm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_form items.
   */
  deleteItemsBlockForm: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_form items at the same time.
   */
  updateItemsBlockForm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockForm"][] | components["schemas"]["ItemsBlockForm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_form item by unique identifier.
   */
  readSingleItemsBlockForm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockForm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_form item.
   */
  deleteSingleItemsBlockForm: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_form item.
   */
  updateSingleItemsBlockForm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockForm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockForm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_gallery_files items.
   */
  readItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGalleryFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_gallery_files item.
   */
  createItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGalleryFiles"][] | components["schemas"]["ItemsBlockGalleryFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_gallery_files items.
   */
  deleteItemsBlockGalleryFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_gallery_files items at the same time.
   */
  updateItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGalleryFiles"][] | components["schemas"]["ItemsBlockGalleryFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_gallery_files item by unique identifier.
   */
  readSingleItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGalleryFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_gallery_files item.
   */
  deleteSingleItemsBlockGalleryFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_gallery_files item.
   */
  updateSingleItemsBlockGalleryFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGalleryFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGalleryFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_testimonials items.
   */
  readItemsBlockTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTestimonials"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_testimonials item.
   */
  createItemsBlockTestimonials: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTestimonials"][] | components["schemas"]["ItemsBlockTestimonials"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_testimonials items.
   */
  deleteItemsBlockTestimonials: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_testimonials items at the same time.
   */
  updateItemsBlockTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTestimonials"][] | components["schemas"]["ItemsBlockTestimonials"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_testimonials item by unique identifier.
   */
  readSingleItemsBlockTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTestimonials"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_testimonials item.
   */
  deleteSingleItemsBlockTestimonials: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_testimonials item.
   */
  updateSingleItemsBlockTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTestimonials"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTestimonials"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_team items.
   */
  readItemsBlockTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeam"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_team item.
   */
  createItemsBlockTeam: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeam"][] | components["schemas"]["ItemsBlockTeam"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_team items.
   */
  deleteItemsBlockTeam: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_team items at the same time.
   */
  updateItemsBlockTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeam"][] | components["schemas"]["ItemsBlockTeam"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_team item by unique identifier.
   */
  readSingleItemsBlockTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeam"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_team item.
   */
  deleteSingleItemsBlockTeam: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_team item.
   */
  updateSingleItemsBlockTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTeam"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTeam"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the categories items.
   */
  readItemsCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new categories item.
   */
  createItemsCategories: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCategories"][] | components["schemas"]["ItemsCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing categories items.
   */
  deleteItemsCategories: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple categories items at the same time.
   */
  updateItemsCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCategories"][] | components["schemas"]["ItemsCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single categories item by unique identifier.
   */
  readSingleItemsCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing categories item.
   */
  deleteSingleItemsCategories: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing categories item.
   */
  updateSingleItemsCategories: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsCategories"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the inbox items.
   */
  readItemsInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsInbox"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new inbox item.
   */
  createItemsInbox: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsInbox"][] | components["schemas"]["ItemsInbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing inbox items.
   */
  deleteItemsInbox: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple inbox items at the same time.
   */
  updateItemsInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsInbox"][] | components["schemas"]["ItemsInbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single inbox item by unique identifier.
   */
  readSingleItemsInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsInbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing inbox item.
   */
  deleteSingleItemsInbox: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing inbox item.
   */
  updateSingleItemsInbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsInbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsInbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the globals items.
   */
  readItemsGlobals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobals"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new globals item.
   */
  createItemsGlobals: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobals"][] | components["schemas"]["ItemsGlobals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing globals items.
   */
  deleteItemsGlobals: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple globals items at the same time.
   */
  updateItemsGlobals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobals"][] | components["schemas"]["ItemsGlobals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single globals item by unique identifier.
   */
  readSingleItemsGlobals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobals"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing globals item.
   */
  deleteSingleItemsGlobals: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing globals item.
   */
  updateSingleItemsGlobals: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobals"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobals"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_steps items.
   */
  readItemsBlockSteps: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockSteps"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_steps item.
   */
  createItemsBlockSteps: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockSteps"][] | components["schemas"]["ItemsBlockSteps"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_steps items.
   */
  deleteItemsBlockSteps: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_steps items at the same time.
   */
  updateItemsBlockSteps: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockSteps"][] | components["schemas"]["ItemsBlockSteps"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_steps item by unique identifier.
   */
  readSingleItemsBlockSteps: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockSteps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_steps item.
   */
  deleteSingleItemsBlockSteps: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_steps item.
   */
  updateSingleItemsBlockSteps: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockSteps"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockSteps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_video items.
   */
  readItemsBlockVideo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideo"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_video item.
   */
  createItemsBlockVideo: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideo"][] | components["schemas"]["ItemsBlockVideo"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_video items.
   */
  deleteItemsBlockVideo: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_video items at the same time.
   */
  updateItemsBlockVideo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideo"][] | components["schemas"]["ItemsBlockVideo"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_video item by unique identifier.
   */
  readSingleItemsBlockVideo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideo"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_video item.
   */
  deleteSingleItemsBlockVideo: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_video item.
   */
  updateSingleItemsBlockVideo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideo"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideo"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the navigation_items items.
   */
  readItemsNavigationItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigationItems"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new navigation_items item.
   */
  createItemsNavigationItems: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNavigationItems"][] | components["schemas"]["ItemsNavigationItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing navigation_items items.
   */
  deleteItemsNavigationItems: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple navigation_items items at the same time.
   */
  updateItemsNavigationItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNavigationItems"][] | components["schemas"]["ItemsNavigationItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single navigation_items item by unique identifier.
   */
  readSingleItemsNavigationItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigationItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing navigation_items item.
   */
  deleteSingleItemsNavigationItems: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing navigation_items item.
   */
  updateSingleItemsNavigationItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNavigationItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigationItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the navigation items.
   */
  readItemsNavigation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigation"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new navigation item.
   */
  createItemsNavigation: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNavigation"][] | components["schemas"]["ItemsNavigation"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing navigation items.
   */
  deleteItemsNavigation: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple navigation items at the same time.
   */
  updateItemsNavigation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNavigation"][] | components["schemas"]["ItemsNavigation"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single navigation item by unique identifier.
   */
  readSingleItemsNavigation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigation"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing navigation item.
   */
  deleteSingleItemsNavigation: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing navigation item.
   */
  updateSingleItemsNavigation: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsNavigation"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNavigation"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the forms items.
   */
  readItemsForms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsForms"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new forms item.
   */
  createItemsForms: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsForms"][] | components["schemas"]["ItemsForms"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing forms items.
   */
  deleteItemsForms: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple forms items at the same time.
   */
  updateItemsForms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsForms"][] | components["schemas"]["ItemsForms"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single forms item by unique identifier.
   */
  readSingleItemsForms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsForms"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing forms item.
   */
  deleteSingleItemsForms: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing forms item.
   */
  updateSingleItemsForms: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsForms"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsForms"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the redirects items.
   */
  readItemsRedirects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRedirects"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new redirects item.
   */
  createItemsRedirects: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRedirects"][] | components["schemas"]["ItemsRedirects"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing redirects items.
   */
  deleteItemsRedirects: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple redirects items at the same time.
   */
  updateItemsRedirects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRedirects"][] | components["schemas"]["ItemsRedirects"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single redirects item by unique identifier.
   */
  readSingleItemsRedirects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRedirects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing redirects item.
   */
  deleteSingleItemsRedirects: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing redirects item.
   */
  updateSingleItemsRedirects: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsRedirects"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRedirects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the team items.
   */
  readItemsTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTeam"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new team item.
   */
  createItemsTeam: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTeam"][] | components["schemas"]["ItemsTeam"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing team items.
   */
  deleteItemsTeam: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple team items at the same time.
   */
  updateItemsTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTeam"][] | components["schemas"]["ItemsTeam"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single team item by unique identifier.
   */
  readSingleItemsTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTeam"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing team item.
   */
  deleteSingleItemsTeam: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing team item.
   */
  updateSingleItemsTeam: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTeam"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTeam"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the post_gallery_items items.
   */
  readItemsPostGalleryItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPostGalleryItems"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new post_gallery_items item.
   */
  createItemsPostGalleryItems: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPostGalleryItems"][] | components["schemas"]["ItemsPostGalleryItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing post_gallery_items items.
   */
  deleteItemsPostGalleryItems: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple post_gallery_items items at the same time.
   */
  updateItemsPostGalleryItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPostGalleryItems"][] | components["schemas"]["ItemsPostGalleryItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single post_gallery_items item by unique identifier.
   */
  readSingleItemsPostGalleryItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPostGalleryItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing post_gallery_items item.
   */
  deleteSingleItemsPostGalleryItems: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing post_gallery_items item.
   */
  updateSingleItemsPostGalleryItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPostGalleryItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPostGalleryItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages_blog items.
   */
  readItemsPagesBlog: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesBlog"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages_blog item.
   */
  createItemsPagesBlog: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesBlog"][] | components["schemas"]["ItemsPagesBlog"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages_blog items.
   */
  deleteItemsPagesBlog: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages_blog items at the same time.
   */
  updateItemsPagesBlog: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesBlog"][] | components["schemas"]["ItemsPagesBlog"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages_blog item by unique identifier.
   */
  readSingleItemsPagesBlog: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesBlog"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages_blog item.
   */
  deleteSingleItemsPagesBlog: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages_blog item.
   */
  updateSingleItemsPagesBlog: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPagesBlog"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesBlog"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_columns_rows items.
   */
  readItemsBlockColumnsRows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockColumnsRows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_columns_rows item.
   */
  createItemsBlockColumnsRows: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockColumnsRows"][] | components["schemas"]["ItemsBlockColumnsRows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_columns_rows items.
   */
  deleteItemsBlockColumnsRows: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_columns_rows items at the same time.
   */
  updateItemsBlockColumnsRows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockColumnsRows"][] | components["schemas"]["ItemsBlockColumnsRows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_columns_rows item by unique identifier.
   */
  readSingleItemsBlockColumnsRows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockColumnsRows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_columns_rows item.
   */
  deleteSingleItemsBlockColumnsRows: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_columns_rows item.
   */
  updateSingleItemsBlockColumnsRows: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockColumnsRows"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockColumnsRows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the posts items.
   */
  readItemsPosts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new posts item.
   */
  createItemsPosts: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPosts"][] | components["schemas"]["ItemsPosts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing posts items.
   */
  deleteItemsPosts: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple posts items at the same time.
   */
  updateItemsPosts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPosts"][] | components["schemas"]["ItemsPosts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single posts item by unique identifier.
   */
  readSingleItemsPosts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing posts item.
   */
  deleteSingleItemsPosts: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing posts item.
   */
  updateSingleItemsPosts: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPosts"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_card items.
   */
  readItemsBlockCard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCard"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_card item.
   */
  createItemsBlockCard: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCard"][] | components["schemas"]["ItemsBlockCard"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_card items.
   */
  deleteItemsBlockCard: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_card items at the same time.
   */
  updateItemsBlockCard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCard"][] | components["schemas"]["ItemsBlockCard"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_card item by unique identifier.
   */
  readSingleItemsBlockCard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCard"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_card item.
   */
  deleteSingleItemsBlockCard: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_card item.
   */
  updateSingleItemsBlockCard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCard"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCard"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_logocloud_logos items.
   */
  readItemsBlockLogocloudLogos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogocloudLogos"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_logocloud_logos item.
   */
  createItemsBlockLogocloudLogos: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogocloudLogos"][] | components["schemas"]["ItemsBlockLogocloudLogos"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_logocloud_logos items.
   */
  deleteItemsBlockLogocloudLogos: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_logocloud_logos items at the same time.
   */
  updateItemsBlockLogocloudLogos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogocloudLogos"][] | components["schemas"]["ItemsBlockLogocloudLogos"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_logocloud_logos item by unique identifier.
   */
  readSingleItemsBlockLogocloudLogos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogocloudLogos"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_logocloud_logos item.
   */
  deleteSingleItemsBlockLogocloudLogos: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_logocloud_logos item.
   */
  updateSingleItemsBlockLogocloudLogos: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogocloudLogos"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogocloudLogos"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_testimonial_slider_items items.
   */
  readItemsBlockTestimonialSliderItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTestimonialSliderItems"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_testimonial_slider_items item.
   */
  createItemsBlockTestimonialSliderItems: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTestimonialSliderItems"][] | components["schemas"]["ItemsBlockTestimonialSliderItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_testimonial_slider_items items.
   */
  deleteItemsBlockTestimonialSliderItems: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_testimonial_slider_items items at the same time.
   */
  updateItemsBlockTestimonialSliderItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTestimonialSliderItems"][] | components["schemas"]["ItemsBlockTestimonialSliderItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_testimonial_slider_items item by unique identifier.
   */
  readSingleItemsBlockTestimonialSliderItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTestimonialSliderItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_testimonial_slider_items item.
   */
  deleteSingleItemsBlockTestimonialSliderItems: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_testimonial_slider_items item.
   */
  updateSingleItemsBlockTestimonialSliderItems: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTestimonialSliderItems"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTestimonialSliderItems"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the testimonials items.
   */
  readItemsTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTestimonials"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new testimonials item.
   */
  createItemsTestimonials: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTestimonials"][] | components["schemas"]["ItemsTestimonials"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing testimonials items.
   */
  deleteItemsTestimonials: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple testimonials items at the same time.
   */
  updateItemsTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTestimonials"][] | components["schemas"]["ItemsTestimonials"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single testimonials item by unique identifier.
   */
  readSingleItemsTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTestimonials"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing testimonials item.
   */
  deleteSingleItemsTestimonials: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing testimonials item.
   */
  updateSingleItemsTestimonials: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsTestimonials"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsTestimonials"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the seo items.
   */
  readItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSEO"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new seo item.
   */
  createItemsSEO: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSEO"][] | components["schemas"]["ItemsSEO"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing seo items.
   */
  deleteItemsSEO: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple seo items at the same time.
   */
  updateItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSEO"][] | components["schemas"]["ItemsSEO"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single seo item by unique identifier.
   */
  readSingleItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSEO"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing seo item.
   */
  deleteSingleItemsSEO: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing seo item.
   */
  updateSingleItemsSEO: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSEO"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSEO"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the pages items.
   */
  readItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new pages item.
   */
  createItemsPages: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPages"][] | components["schemas"]["ItemsPages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing pages items.
   */
  deleteItemsPages: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple pages items at the same time.
   */
  updateItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPages"][] | components["schemas"]["ItemsPages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single pages item by unique identifier.
   */
  readSingleItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing pages item.
   */
  deleteSingleItemsPages: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing pages item.
   */
  updateSingleItemsPages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the page_blocks items.
   */
  readItemsPageBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new page_blocks item.
   */
  createItemsPageBlocks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocks"][] | components["schemas"]["ItemsPageBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing page_blocks items.
   */
  deleteItemsPageBlocks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple page_blocks items at the same time.
   */
  updateItemsPageBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocks"][] | components["schemas"]["ItemsPageBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single page_blocks item by unique identifier.
   */
  readSingleItemsPageBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing page_blocks item.
   */
  deleteSingleItemsPageBlocks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing page_blocks item.
   */
  updateSingleItemsPageBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_archive_files items.
   */
  readItemsBlockArchiveFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArchiveFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_archive_files item.
   */
  createItemsBlockArchiveFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArchiveFiles"][] | components["schemas"]["ItemsBlockArchiveFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_archive_files items.
   */
  deleteItemsBlockArchiveFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_archive_files items at the same time.
   */
  updateItemsBlockArchiveFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArchiveFiles"][] | components["schemas"]["ItemsBlockArchiveFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_archive_files item by unique identifier.
   */
  readSingleItemsBlockArchiveFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArchiveFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_archive_files item.
   */
  deleteSingleItemsBlockArchiveFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_archive_files item.
   */
  updateSingleItemsBlockArchiveFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArchiveFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArchiveFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the globals_footer_blocks items.
   */
  readItemsGlobalsFooterBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobalsFooterBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new globals_footer_blocks item.
   */
  createItemsGlobalsFooterBlocks: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobalsFooterBlocks"][] | components["schemas"]["ItemsGlobalsFooterBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing globals_footer_blocks items.
   */
  deleteItemsGlobalsFooterBlocks: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple globals_footer_blocks items at the same time.
   */
  updateItemsGlobalsFooterBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobalsFooterBlocks"][] | components["schemas"]["ItemsGlobalsFooterBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single globals_footer_blocks item by unique identifier.
   */
  readSingleItemsGlobalsFooterBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobalsFooterBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing globals_footer_blocks item.
   */
  deleteSingleItemsGlobalsFooterBlocks: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing globals_footer_blocks item.
   */
  updateSingleItemsGlobalsFooterBlocks: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGlobalsFooterBlocks"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGlobalsFooterBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_layout_blocks_1 items.
   */
  readItemsBlockLayoutBlocks1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayoutBlocks1"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_layout_blocks_1 item.
   */
  createItemsBlockLayoutBlocks1: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayoutBlocks1"][] | components["schemas"]["ItemsBlockLayoutBlocks1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_layout_blocks_1 items.
   */
  deleteItemsBlockLayoutBlocks1: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_layout_blocks_1 items at the same time.
   */
  updateItemsBlockLayoutBlocks1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayoutBlocks1"][] | components["schemas"]["ItemsBlockLayoutBlocks1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_layout_blocks_1 item by unique identifier.
   */
  readSingleItemsBlockLayoutBlocks1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayoutBlocks1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_layout_blocks_1 item.
   */
  deleteSingleItemsBlockLayoutBlocks1: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_layout_blocks_1 item.
   */
  updateSingleItemsBlockLayoutBlocks1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayoutBlocks1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayoutBlocks1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_image items.
   */
  readItemsBlockImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_image item.
   */
  createItemsBlockImage: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImage"][] | components["schemas"]["ItemsBlockImage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_image items.
   */
  deleteItemsBlockImage: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_image items at the same time.
   */
  updateItemsBlockImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImage"][] | components["schemas"]["ItemsBlockImage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_image item by unique identifier.
   */
  readSingleItemsBlockImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_image item.
   */
  deleteSingleItemsBlockImage: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_image item.
   */
  updateSingleItemsBlockImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_archive items.
   */
  readItemsBlockArchive: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArchive"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_archive item.
   */
  createItemsBlockArchive: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArchive"][] | components["schemas"]["ItemsBlockArchive"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_archive items.
   */
  deleteItemsBlockArchive: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_archive items at the same time.
   */
  updateItemsBlockArchive: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArchive"][] | components["schemas"]["ItemsBlockArchive"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_archive item by unique identifier.
   */
  readSingleItemsBlockArchive: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArchive"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_archive item.
   */
  deleteSingleItemsBlockArchive: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_archive item.
   */
  updateSingleItemsBlockArchive: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArchive"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArchive"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_layout items.
   */
  readItemsBlockLayout: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayout"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_layout item.
   */
  createItemsBlockLayout: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayout"][] | components["schemas"]["ItemsBlockLayout"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_layout items.
   */
  deleteItemsBlockLayout: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_layout items at the same time.
   */
  updateItemsBlockLayout: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayout"][] | components["schemas"]["ItemsBlockLayout"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_layout item by unique identifier.
   */
  readSingleItemsBlockLayout: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayout"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_layout item.
   */
  deleteSingleItemsBlockLayout: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_layout item.
   */
  updateSingleItemsBlockLayout: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayout"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayout"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_gap items.
   */
  readItemsBlockGap: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGap"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_gap item.
   */
  createItemsBlockGap: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGap"][] | components["schemas"]["ItemsBlockGap"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_gap items.
   */
  deleteItemsBlockGap: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_gap items at the same time.
   */
  updateItemsBlockGap: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGap"][] | components["schemas"]["ItemsBlockGap"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_gap item by unique identifier.
   */
  readSingleItemsBlockGap: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGap"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_gap item.
   */
  deleteSingleItemsBlockGap: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_gap item.
   */
  updateSingleItemsBlockGap: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockGap"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockGap"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the languages items.
   */
  readItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new languages item.
   */
  createItemsLanguages: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"][] | components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing languages items.
   */
  deleteItemsLanguages: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple languages items at the same time.
   */
  updateItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"][] | components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single languages item by unique identifier.
   */
  readSingleItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing languages item.
   */
  deleteSingleItemsLanguages: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing languages item.
   */
  updateSingleItemsLanguages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_link items.
   */
  readItemsBlockLink: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLink"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_link item.
   */
  createItemsBlockLink: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLink"][] | components["schemas"]["ItemsBlockLink"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_link items.
   */
  deleteItemsBlockLink: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_link items at the same time.
   */
  updateItemsBlockLink: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLink"][] | components["schemas"]["ItemsBlockLink"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_link item by unique identifier.
   */
  readSingleItemsBlockLink: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_link item.
   */
  deleteSingleItemsBlockLink: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_link item.
   */
  updateSingleItemsBlockLink: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLink"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_richtext_translations items.
   */
  readItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtextTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_richtext_translations item.
   */
  createItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtextTranslations"][] | components["schemas"]["ItemsBlockRichtextTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_richtext_translations items.
   */
  deleteItemsBlockRichtextTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_richtext_translations items at the same time.
   */
  updateItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtextTranslations"][] | components["schemas"]["ItemsBlockRichtextTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_richtext_translations item by unique identifier.
   */
  readSingleItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtextTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_richtext_translations item.
   */
  deleteSingleItemsBlockRichtextTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_richtext_translations item.
   */
  updateSingleItemsBlockRichtextTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRichtextTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRichtextTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_card_translations items.
   */
  readItemsBlockCardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_card_translations item.
   */
  createItemsBlockCardTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCardTranslations"][] | components["schemas"]["ItemsBlockCardTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_card_translations items.
   */
  deleteItemsBlockCardTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_card_translations items at the same time.
   */
  updateItemsBlockCardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCardTranslations"][] | components["schemas"]["ItemsBlockCardTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_card_translations item by unique identifier.
   */
  readSingleItemsBlockCardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_card_translations item.
   */
  deleteSingleItemsBlockCardTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_card_translations item.
   */
  updateSingleItemsBlockCardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCardTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCardTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_lightbox items.
   */
  readItemsBlockLightbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLightbox"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_lightbox item.
   */
  createItemsBlockLightbox: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLightbox"][] | components["schemas"]["ItemsBlockLightbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_lightbox items.
   */
  deleteItemsBlockLightbox: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_lightbox items at the same time.
   */
  updateItemsBlockLightbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLightbox"][] | components["schemas"]["ItemsBlockLightbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_lightbox item by unique identifier.
   */
  readSingleItemsBlockLightbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLightbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_lightbox item.
   */
  deleteSingleItemsBlockLightbox: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_lightbox item.
   */
  updateSingleItemsBlockLightbox: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLightbox"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLightbox"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_link_translations items.
   */
  readItemsBlockLinkTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLinkTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_link_translations item.
   */
  createItemsBlockLinkTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLinkTranslations"][] | components["schemas"]["ItemsBlockLinkTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_link_translations items.
   */
  deleteItemsBlockLinkTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_link_translations items at the same time.
   */
  updateItemsBlockLinkTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLinkTranslations"][] | components["schemas"]["ItemsBlockLinkTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_link_translations item by unique identifier.
   */
  readSingleItemsBlockLinkTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLinkTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_link_translations item.
   */
  deleteSingleItemsBlockLinkTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_link_translations item.
   */
  updateSingleItemsBlockLinkTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLinkTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLinkTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_locationanddate items.
   */
  readItemsBlockLocationanddate: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLocationanddate"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_locationanddate item.
   */
  createItemsBlockLocationanddate: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLocationanddate"][] | components["schemas"]["ItemsBlockLocationanddate"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_locationanddate items.
   */
  deleteItemsBlockLocationanddate: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_locationanddate items at the same time.
   */
  updateItemsBlockLocationanddate: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLocationanddate"][] | components["schemas"]["ItemsBlockLocationanddate"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_locationanddate item by unique identifier.
   */
  readSingleItemsBlockLocationanddate: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLocationanddate"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_locationanddate item.
   */
  deleteSingleItemsBlockLocationanddate: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_locationanddate item.
   */
  updateSingleItemsBlockLocationanddate: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLocationanddate"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLocationanddate"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_conditionalcard_translations items.
   */
  readItemsBlockConditionalcardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockConditionalcardTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_conditionalcard_translations item.
   */
  createItemsBlockConditionalcardTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockConditionalcardTranslations"][] | components["schemas"]["ItemsBlockConditionalcardTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_conditionalcard_translations items.
   */
  deleteItemsBlockConditionalcardTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_conditionalcard_translations items at the same time.
   */
  updateItemsBlockConditionalcardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockConditionalcardTranslations"][] | components["schemas"]["ItemsBlockConditionalcardTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_conditionalcard_translations item by unique identifier.
   */
  readSingleItemsBlockConditionalcardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockConditionalcardTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_conditionalcard_translations item.
   */
  deleteSingleItemsBlockConditionalcardTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_conditionalcard_translations item.
   */
  updateSingleItemsBlockConditionalcardTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockConditionalcardTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockConditionalcardTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_conditionalcard items.
   */
  readItemsBlockConditionalcard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockConditionalcard"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_conditionalcard item.
   */
  createItemsBlockConditionalcard: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockConditionalcard"][] | components["schemas"]["ItemsBlockConditionalcard"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_conditionalcard items.
   */
  deleteItemsBlockConditionalcard: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_conditionalcard items at the same time.
   */
  updateItemsBlockConditionalcard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockConditionalcard"][] | components["schemas"]["ItemsBlockConditionalcard"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_conditionalcard item by unique identifier.
   */
  readSingleItemsBlockConditionalcard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockConditionalcard"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_conditionalcard item.
   */
  deleteSingleItemsBlockConditionalcard: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_conditionalcard item.
   */
  updateSingleItemsBlockConditionalcard: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockConditionalcard"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockConditionalcard"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_tajenka items.
   */
  readItemsBlockTajenka: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTajenka"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_tajenka item.
   */
  createItemsBlockTajenka: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTajenka"][] | components["schemas"]["ItemsBlockTajenka"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_tajenka items.
   */
  deleteItemsBlockTajenka: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_tajenka items at the same time.
   */
  updateItemsBlockTajenka: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTajenka"][] | components["schemas"]["ItemsBlockTajenka"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_tajenka item by unique identifier.
   */
  readSingleItemsBlockTajenka: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTajenka"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_tajenka item.
   */
  deleteSingleItemsBlockTajenka: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_tajenka item.
   */
  updateSingleItemsBlockTajenka: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTajenka"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTajenka"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_locationanddate_translations items.
   */
  readItemsBlockLocationanddateTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLocationanddateTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_locationanddate_translations item.
   */
  createItemsBlockLocationanddateTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLocationanddateTranslations"][] | components["schemas"]["ItemsBlockLocationanddateTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_locationanddate_translations items.
   */
  deleteItemsBlockLocationanddateTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_locationanddate_translations items at the same time.
   */
  updateItemsBlockLocationanddateTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLocationanddateTranslations"][] | components["schemas"]["ItemsBlockLocationanddateTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_locationanddate_translations item by unique identifier.
   */
  readSingleItemsBlockLocationanddateTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLocationanddateTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_locationanddate_translations item.
   */
  deleteSingleItemsBlockLocationanddateTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_locationanddate_translations item.
   */
  updateSingleItemsBlockLocationanddateTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLocationanddateTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLocationanddateTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_bannerhero items.
   */
  readItemsBlockBannerhero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockBannerhero"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_bannerhero item.
   */
  createItemsBlockBannerhero: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockBannerhero"][] | components["schemas"]["ItemsBlockBannerhero"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_bannerhero items.
   */
  deleteItemsBlockBannerhero: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_bannerhero items at the same time.
   */
  updateItemsBlockBannerhero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockBannerhero"][] | components["schemas"]["ItemsBlockBannerhero"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_bannerhero item by unique identifier.
   */
  readSingleItemsBlockBannerhero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockBannerhero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_bannerhero item.
   */
  deleteSingleItemsBlockBannerhero: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_bannerhero item.
   */
  updateSingleItemsBlockBannerhero: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockBannerhero"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockBannerhero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_bannerhero_translations items.
   */
  readItemsBlockBannerheroTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockBannerheroTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_bannerhero_translations item.
   */
  createItemsBlockBannerheroTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockBannerheroTranslations"][] | components["schemas"]["ItemsBlockBannerheroTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_bannerhero_translations items.
   */
  deleteItemsBlockBannerheroTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_bannerhero_translations items at the same time.
   */
  updateItemsBlockBannerheroTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockBannerheroTranslations"][] | components["schemas"]["ItemsBlockBannerheroTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_bannerhero_translations item by unique identifier.
   */
  readSingleItemsBlockBannerheroTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockBannerheroTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_bannerhero_translations item.
   */
  deleteSingleItemsBlockBannerheroTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_bannerhero_translations item.
   */
  updateSingleItemsBlockBannerheroTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockBannerheroTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockBannerheroTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_partner items.
   */
  readItemsBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartner"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_partner item.
   */
  createItemsBlockPartner: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartner"][] | components["schemas"]["ItemsBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_partner items.
   */
  deleteItemsBlockPartner: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_partner items at the same time.
   */
  updateItemsBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartner"][] | components["schemas"]["ItemsBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_partner item by unique identifier.
   */
  readSingleItemsBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_partner item.
   */
  deleteSingleItemsBlockPartner: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_partner item.
   */
  updateSingleItemsBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_poster items.
   */
  readItemsBlockFestivalPoster: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalPoster"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_poster item.
   */
  createItemsBlockFestivalPoster: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalPoster"][] | components["schemas"]["ItemsBlockFestivalPoster"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_poster items.
   */
  deleteItemsBlockFestivalPoster: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_poster items at the same time.
   */
  updateItemsBlockFestivalPoster: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalPoster"][] | components["schemas"]["ItemsBlockFestivalPoster"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_poster item by unique identifier.
   */
  readSingleItemsBlockFestivalPoster: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalPoster"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_poster item.
   */
  deleteSingleItemsBlockFestivalPoster: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_poster item.
   */
  updateSingleItemsBlockFestivalPoster: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalPoster"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalPoster"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_video_trailer_translations items.
   */
  readItemsBlockVideoTrailerTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideoTrailerTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_video_trailer_translations item.
   */
  createItemsBlockVideoTrailerTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideoTrailerTranslations"][] | components["schemas"]["ItemsBlockVideoTrailerTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_video_trailer_translations items.
   */
  deleteItemsBlockVideoTrailerTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_video_trailer_translations items at the same time.
   */
  updateItemsBlockVideoTrailerTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideoTrailerTranslations"][] | components["schemas"]["ItemsBlockVideoTrailerTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_video_trailer_translations item by unique identifier.
   */
  readSingleItemsBlockVideoTrailerTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideoTrailerTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_video_trailer_translations item.
   */
  deleteSingleItemsBlockVideoTrailerTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_video_trailer_translations item.
   */
  updateSingleItemsBlockVideoTrailerTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideoTrailerTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideoTrailerTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_poster_translations items.
   */
  readItemsBlockFestivalPosterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalPosterTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_poster_translations item.
   */
  createItemsBlockFestivalPosterTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalPosterTranslations"][] | components["schemas"]["ItemsBlockFestivalPosterTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_poster_translations items.
   */
  deleteItemsBlockFestivalPosterTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_poster_translations items at the same time.
   */
  updateItemsBlockFestivalPosterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalPosterTranslations"][] | components["schemas"]["ItemsBlockFestivalPosterTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_poster_translations item by unique identifier.
   */
  readSingleItemsBlockFestivalPosterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalPosterTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_poster_translations item.
   */
  deleteSingleItemsBlockFestivalPosterTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_poster_translations item.
   */
  updateSingleItemsBlockFestivalPosterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalPosterTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalPosterTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_video_trailer items.
   */
  readItemsBlockVideoTrailer: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideoTrailer"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_video_trailer item.
   */
  createItemsBlockVideoTrailer: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideoTrailer"][] | components["schemas"]["ItemsBlockVideoTrailer"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_video_trailer items.
   */
  deleteItemsBlockVideoTrailer: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_video_trailer items at the same time.
   */
  updateItemsBlockVideoTrailer: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideoTrailer"][] | components["schemas"]["ItemsBlockVideoTrailer"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_video_trailer item by unique identifier.
   */
  readSingleItemsBlockVideoTrailer: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideoTrailer"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_video_trailer item.
   */
  deleteSingleItemsBlockVideoTrailer: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_video_trailer item.
   */
  updateSingleItemsBlockVideoTrailer: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockVideoTrailer"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockVideoTrailer"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_button_translations items.
   */
  readItemsBlockButtonTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_button_translations item.
   */
  createItemsBlockButtonTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButtonTranslations"][] | components["schemas"]["ItemsBlockButtonTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_button_translations items.
   */
  deleteItemsBlockButtonTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_button_translations items at the same time.
   */
  updateItemsBlockButtonTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButtonTranslations"][] | components["schemas"]["ItemsBlockButtonTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_button_translations item by unique identifier.
   */
  readSingleItemsBlockButtonTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_button_translations item.
   */
  deleteSingleItemsBlockButtonTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_button_translations item.
   */
  updateSingleItemsBlockButtonTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButtonTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_crew_film_person items.
   */
  readItemsFilmCrewFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewFilmPerson"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_crew_film_person item.
   */
  createItemsFilmCrewFilmPerson: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewFilmPerson"][] | components["schemas"]["ItemsFilmCrewFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_crew_film_person items.
   */
  deleteItemsFilmCrewFilmPerson: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_crew_film_person items at the same time.
   */
  updateItemsFilmCrewFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewFilmPerson"][] | components["schemas"]["ItemsFilmCrewFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_crew_film_person item by unique identifier.
   */
  readSingleItemsFilmCrewFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewFilmPerson"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_crew_film_person item.
   */
  deleteSingleItemsFilmCrewFilmPerson: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_crew_film_person item.
   */
  updateSingleItemsFilmCrewFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewFilmPerson"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the page_blocks_background items.
   */
  readItemsPageBlocksBackground: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocksBackground"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new page_blocks_background item.
   */
  createItemsPageBlocksBackground: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocksBackground"][] | components["schemas"]["ItemsPageBlocksBackground"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing page_blocks_background items.
   */
  deleteItemsPageBlocksBackground: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple page_blocks_background items at the same time.
   */
  updateItemsPageBlocksBackground: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocksBackground"][] | components["schemas"]["ItemsPageBlocksBackground"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single page_blocks_background item by unique identifier.
   */
  readSingleItemsPageBlocksBackground: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocksBackground"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing page_blocks_background item.
   */
  deleteSingleItemsPageBlocksBackground: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing page_blocks_background item.
   */
  updateSingleItemsPageBlocksBackground: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocksBackground"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocksBackground"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the gradient items.
   */
  readItemsGradient: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGradient"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new gradient item.
   */
  createItemsGradient: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGradient"][] | components["schemas"]["ItemsGradient"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing gradient items.
   */
  deleteItemsGradient: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple gradient items at the same time.
   */
  updateItemsGradient: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGradient"][] | components["schemas"]["ItemsGradient"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single gradient item by unique identifier.
   */
  readSingleItemsGradient: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGradient"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing gradient item.
   */
  deleteSingleItemsGradient: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing gradient item.
   */
  updateSingleItemsGradient: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsGradient"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGradient"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_logo items.
   */
  readItemsBlockLogo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogo"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_logo item.
   */
  createItemsBlockLogo: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogo"][] | components["schemas"]["ItemsBlockLogo"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_logo items.
   */
  deleteItemsBlockLogo: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_logo items at the same time.
   */
  updateItemsBlockLogo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogo"][] | components["schemas"]["ItemsBlockLogo"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_logo item by unique identifier.
   */
  readSingleItemsBlockLogo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogo"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_logo item.
   */
  deleteSingleItemsBlockLogo: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_logo item.
   */
  updateSingleItemsBlockLogo: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogo"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogo"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the page_blocks_background_1 items.
   */
  readItemsPageBlocksBackground1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocksBackground1"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new page_blocks_background_1 item.
   */
  createItemsPageBlocksBackground1: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocksBackground1"][] | components["schemas"]["ItemsPageBlocksBackground1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing page_blocks_background_1 items.
   */
  deleteItemsPageBlocksBackground1: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple page_blocks_background_1 items at the same time.
   */
  updateItemsPageBlocksBackground1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocksBackground1"][] | components["schemas"]["ItemsPageBlocksBackground1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single page_blocks_background_1 item by unique identifier.
   */
  readSingleItemsPageBlocksBackground1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocksBackground1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing page_blocks_background_1 item.
   */
  deleteSingleItemsPageBlocksBackground1: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing page_blocks_background_1 item.
   */
  updateSingleItemsPageBlocksBackground1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPageBlocksBackground1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPageBlocksBackground1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_logo_image items.
   */
  readItemsBlockLogoImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoImage"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_logo_image item.
   */
  createItemsBlockLogoImage: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogoImage"][] | components["schemas"]["ItemsBlockLogoImage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_logo_image items.
   */
  deleteItemsBlockLogoImage: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_logo_image items at the same time.
   */
  updateItemsBlockLogoImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogoImage"][] | components["schemas"]["ItemsBlockLogoImage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_logo_image item by unique identifier.
   */
  readSingleItemsBlockLogoImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoImage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_logo_image item.
   */
  deleteSingleItemsBlockLogoImage: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_logo_image item.
   */
  updateSingleItemsBlockLogoImage: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogoImage"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoImage"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_countdown_translations items.
   */
  readItemsBlockCountdownTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCountdownTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_countdown_translations item.
   */
  createItemsBlockCountdownTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCountdownTranslations"][] | components["schemas"]["ItemsBlockCountdownTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_countdown_translations items.
   */
  deleteItemsBlockCountdownTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_countdown_translations items at the same time.
   */
  updateItemsBlockCountdownTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCountdownTranslations"][] | components["schemas"]["ItemsBlockCountdownTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_countdown_translations item by unique identifier.
   */
  readSingleItemsBlockCountdownTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCountdownTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_countdown_translations item.
   */
  deleteSingleItemsBlockCountdownTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_countdown_translations item.
   */
  updateSingleItemsBlockCountdownTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCountdownTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCountdownTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_countdown items.
   */
  readItemsBlockCountdown: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCountdown"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_countdown item.
   */
  createItemsBlockCountdown: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCountdown"][] | components["schemas"]["ItemsBlockCountdown"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_countdown items.
   */
  deleteItemsBlockCountdown: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_countdown items at the same time.
   */
  updateItemsBlockCountdown: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCountdown"][] | components["schemas"]["ItemsBlockCountdown"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_countdown item by unique identifier.
   */
  readSingleItemsBlockCountdown: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCountdown"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_countdown item.
   */
  deleteSingleItemsBlockCountdown: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_countdown item.
   */
  updateSingleItemsBlockCountdown: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCountdown"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCountdown"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_crew_film_person_film_crew_role items.
   */
  readItemsFilmCrewFilmPersonFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_crew_film_person_film_crew_role item.
   */
  createItemsFilmCrewFilmPersonFilmCrewRole: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"][] | components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_crew_film_person_film_crew_role items.
   */
  deleteItemsFilmCrewFilmPersonFilmCrewRole: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_crew_film_person_film_crew_role items at the same time.
   */
  updateItemsFilmCrewFilmPersonFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"][] | components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_crew_film_person_film_crew_role item by unique identifier.
   */
  readSingleItemsFilmCrewFilmPersonFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_crew_film_person_film_crew_role item.
   */
  deleteSingleItemsFilmCrewFilmPersonFilmCrewRole: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_crew_film_person_film_crew_role item.
   */
  updateSingleItemsFilmCrewFilmPersonFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the vote items.
   */
  readItemsVote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVote"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new vote item.
   */
  createItemsVote: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVote"][] | components["schemas"]["ItemsVote"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing vote items.
   */
  deleteItemsVote: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple vote items at the same time.
   */
  updateItemsVote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVote"][] | components["schemas"]["ItemsVote"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single vote item by unique identifier.
   */
  readSingleItemsVote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVote"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing vote item.
   */
  deleteSingleItemsVote: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing vote item.
   */
  updateSingleItemsVote: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVote"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVote"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_patron_translations items.
   */
  readItemsBlockPatronTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPatronTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_patron_translations item.
   */
  createItemsBlockPatronTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPatronTranslations"][] | components["schemas"]["ItemsBlockPatronTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_patron_translations items.
   */
  deleteItemsBlockPatronTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_patron_translations items at the same time.
   */
  updateItemsBlockPatronTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPatronTranslations"][] | components["schemas"]["ItemsBlockPatronTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_patron_translations item by unique identifier.
   */
  readSingleItemsBlockPatronTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPatronTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_patron_translations item.
   */
  deleteSingleItemsBlockPatronTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_patron_translations item.
   */
  updateSingleItemsBlockPatronTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPatronTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPatronTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voting items.
   */
  readItemsVoting: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoting"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voting item.
   */
  createItemsVoting: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoting"][] | components["schemas"]["ItemsVoting"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voting items.
   */
  deleteItemsVoting: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voting items at the same time.
   */
  updateItemsVoting: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoting"][] | components["schemas"]["ItemsVoting"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voting item by unique identifier.
   */
  readSingleItemsVoting: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoting"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voting item.
   */
  deleteSingleItemsVoting: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voting item.
   */
  updateSingleItemsVoting: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVoting"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVoting"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_patron items.
   */
  readItemsBlockPatron: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPatron"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_patron item.
   */
  createItemsBlockPatron: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPatron"][] | components["schemas"]["ItemsBlockPatron"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_patron items.
   */
  deleteItemsBlockPatron: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_patron items at the same time.
   */
  updateItemsBlockPatron: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPatron"][] | components["schemas"]["ItemsBlockPatron"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_patron item by unique identifier.
   */
  readSingleItemsBlockPatron: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPatron"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_patron item.
   */
  deleteSingleItemsBlockPatron: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_patron item.
   */
  updateSingleItemsBlockPatron: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPatron"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPatron"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_footer_translations items.
   */
  readItemsBlockFestivalFooterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_footer_translations item.
   */
  createItemsBlockFestivalFooterTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterTranslations"][] | components["schemas"]["ItemsBlockFestivalFooterTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_footer_translations items.
   */
  deleteItemsBlockFestivalFooterTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_footer_translations items at the same time.
   */
  updateItemsBlockFestivalFooterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterTranslations"][] | components["schemas"]["ItemsBlockFestivalFooterTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_footer_translations item by unique identifier.
   */
  readSingleItemsBlockFestivalFooterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_footer_translations item.
   */
  deleteSingleItemsBlockFestivalFooterTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_footer_translations item.
   */
  updateSingleItemsBlockFestivalFooterTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_footer items.
   */
  readItemsBlockFestivalFooter: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooter"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_footer item.
   */
  createItemsBlockFestivalFooter: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooter"][] | components["schemas"]["ItemsBlockFestivalFooter"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_footer items.
   */
  deleteItemsBlockFestivalFooter: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_footer items at the same time.
   */
  updateItemsBlockFestivalFooter: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooter"][] | components["schemas"]["ItemsBlockFestivalFooter"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_footer item by unique identifier.
   */
  readSingleItemsBlockFestivalFooter: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooter"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_footer item.
   */
  deleteSingleItemsBlockFestivalFooter: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_footer item.
   */
  updateSingleItemsBlockFestivalFooter: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooter"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooter"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_jury items.
   */
  readItemsBlockJury: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockJury"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_jury item.
   */
  createItemsBlockJury: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockJury"][] | components["schemas"]["ItemsBlockJury"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_jury items.
   */
  deleteItemsBlockJury: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_jury items at the same time.
   */
  updateItemsBlockJury: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockJury"][] | components["schemas"]["ItemsBlockJury"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_jury item by unique identifier.
   */
  readSingleItemsBlockJury: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockJury"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_jury item.
   */
  deleteSingleItemsBlockJury: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_jury item.
   */
  updateSingleItemsBlockJury: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockJury"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockJury"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_jury_translations items.
   */
  readItemsBlockJuryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockJuryTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_jury_translations item.
   */
  createItemsBlockJuryTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockJuryTranslations"][] | components["schemas"]["ItemsBlockJuryTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_jury_translations items.
   */
  deleteItemsBlockJuryTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_jury_translations items at the same time.
   */
  updateItemsBlockJuryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockJuryTranslations"][] | components["schemas"]["ItemsBlockJuryTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_jury_translations item by unique identifier.
   */
  readSingleItemsBlockJuryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockJuryTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_jury_translations item.
   */
  deleteSingleItemsBlockJuryTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_jury_translations item.
   */
  updateSingleItemsBlockJuryTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockJuryTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockJuryTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_footer_block_social_media items.
   */
  readItemsBlockFestivalFooterBlockSocialMedia: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_footer_block_social_media item.
   */
  createItemsBlockFestivalFooterBlockSocialMedia: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"][] | components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_footer_block_social_media items.
   */
  deleteItemsBlockFestivalFooterBlockSocialMedia: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_footer_block_social_media items at the same time.
   */
  updateItemsBlockFestivalFooterBlockSocialMedia: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"][] | components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_footer_block_social_media item by unique identifier.
   */
  readSingleItemsBlockFestivalFooterBlockSocialMedia: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_footer_block_social_media item.
   */
  deleteSingleItemsBlockFestivalFooterBlockSocialMedia: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_footer_block_social_media item.
   */
  updateSingleItemsBlockFestivalFooterBlockSocialMedia: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_footer_block_social_media_1 items.
   */
  readItemsBlockFestivalFooterBlockSocialMedia1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_footer_block_social_media_1 item.
   */
  createItemsBlockFestivalFooterBlockSocialMedia1: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"][] | components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_footer_block_social_media_1 items.
   */
  deleteItemsBlockFestivalFooterBlockSocialMedia1: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_footer_block_social_media_1 items at the same time.
   */
  updateItemsBlockFestivalFooterBlockSocialMedia1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"][] | components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_footer_block_social_media_1 item by unique identifier.
   */
  readSingleItemsBlockFestivalFooterBlockSocialMedia1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_footer_block_social_media_1 item.
   */
  deleteSingleItemsBlockFestivalFooterBlockSocialMedia1: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_footer_block_social_media_1 item.
   */
  updateSingleItemsBlockFestivalFooterBlockSocialMedia1: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_image_row items.
   */
  readItemsBlockImageRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRow"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_image_row item.
   */
  createItemsBlockImageRow: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRow"][] | components["schemas"]["ItemsBlockImageRow"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_image_row items.
   */
  deleteItemsBlockImageRow: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_image_row items at the same time.
   */
  updateItemsBlockImageRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRow"][] | components["schemas"]["ItemsBlockImageRow"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_image_row item by unique identifier.
   */
  readSingleItemsBlockImageRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRow"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_image_row item.
   */
  deleteSingleItemsBlockImageRow: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_image_row item.
   */
  updateSingleItemsBlockImageRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRow"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRow"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_image_row_images items.
   */
  readItemsBlockImageRowImages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowImages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_image_row_images item.
   */
  createItemsBlockImageRowImages: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowImages"][] | components["schemas"]["ItemsBlockImageRowImages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_image_row_images items.
   */
  deleteItemsBlockImageRowImages: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_image_row_images items at the same time.
   */
  updateItemsBlockImageRowImages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowImages"][] | components["schemas"]["ItemsBlockImageRowImages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_image_row_images item by unique identifier.
   */
  readSingleItemsBlockImageRowImages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowImages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_image_row_images item.
   */
  deleteSingleItemsBlockImageRowImages: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_image_row_images item.
   */
  updateSingleItemsBlockImageRowImages: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowImages"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowImages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the social items.
   */
  readItemsSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSocial"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new social item.
   */
  createItemsSocial: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSocial"][] | components["schemas"]["ItemsSocial"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing social items.
   */
  deleteItemsSocial: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple social items at the same time.
   */
  updateItemsSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSocial"][] | components["schemas"]["ItemsSocial"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single social item by unique identifier.
   */
  readSingleItemsSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSocial"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing social item.
   */
  deleteSingleItemsSocial: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing social item.
   */
  updateSingleItemsSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsSocial"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsSocial"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_festival_footer_social items.
   */
  readItemsBlockFestivalFooterSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterSocial"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_festival_footer_social item.
   */
  createItemsBlockFestivalFooterSocial: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterSocial"][] | components["schemas"]["ItemsBlockFestivalFooterSocial"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_festival_footer_social items.
   */
  deleteItemsBlockFestivalFooterSocial: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_festival_footer_social items at the same time.
   */
  updateItemsBlockFestivalFooterSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterSocial"][] | components["schemas"]["ItemsBlockFestivalFooterSocial"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_festival_footer_social item by unique identifier.
   */
  readSingleItemsBlockFestivalFooterSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterSocial"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_festival_footer_social item.
   */
  deleteSingleItemsBlockFestivalFooterSocial: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_festival_footer_social item.
   */
  updateSingleItemsBlockFestivalFooterSocial: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFestivalFooterSocial"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFestivalFooterSocial"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_image_row_directus_files items.
   */
  readItemsBlockImageRowDirectusFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowDirectusFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_image_row_directus_files item.
   */
  createItemsBlockImageRowDirectusFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowDirectusFiles"][] | components["schemas"]["ItemsBlockImageRowDirectusFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_image_row_directus_files items.
   */
  deleteItemsBlockImageRowDirectusFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_image_row_directus_files items at the same time.
   */
  updateItemsBlockImageRowDirectusFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowDirectusFiles"][] | components["schemas"]["ItemsBlockImageRowDirectusFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_image_row_directus_files item by unique identifier.
   */
  readSingleItemsBlockImageRowDirectusFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowDirectusFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_image_row_directus_files item.
   */
  deleteSingleItemsBlockImageRowDirectusFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_image_row_directus_files item.
   */
  updateSingleItemsBlockImageRowDirectusFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowDirectusFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowDirectusFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_image_row_files items.
   */
  readItemsBlockImageRowFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_image_row_files item.
   */
  createItemsBlockImageRowFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowFiles"][] | components["schemas"]["ItemsBlockImageRowFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_image_row_files items.
   */
  deleteItemsBlockImageRowFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_image_row_files items at the same time.
   */
  updateItemsBlockImageRowFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowFiles"][] | components["schemas"]["ItemsBlockImageRowFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_image_row_files item by unique identifier.
   */
  readSingleItemsBlockImageRowFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_image_row_files item.
   */
  deleteSingleItemsBlockImageRowFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_image_row_files item.
   */
  updateSingleItemsBlockImageRowFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockImageRowFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockImageRowFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_partner_row_block_partner items.
   */
  readItemsBlockPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnerRowBlockPartner"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_partner_row_block_partner item.
   */
  createItemsBlockPartnerRowBlockPartner: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnerRowBlockPartner"][] | components["schemas"]["ItemsBlockPartnerRowBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_partner_row_block_partner items.
   */
  deleteItemsBlockPartnerRowBlockPartner: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_partner_row_block_partner items at the same time.
   */
  updateItemsBlockPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnerRowBlockPartner"][] | components["schemas"]["ItemsBlockPartnerRowBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_partner_row_block_partner item by unique identifier.
   */
  readSingleItemsBlockPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnerRowBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_partner_row_block_partner item.
   */
  deleteSingleItemsBlockPartnerRowBlockPartner: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_partner_row_block_partner item.
   */
  updateSingleItemsBlockPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnerRowBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnerRowBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the partner_row_block_partner items.
   */
  readItemsPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPartnerRowBlockPartner"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new partner_row_block_partner item.
   */
  createItemsPartnerRowBlockPartner: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPartnerRowBlockPartner"][] | components["schemas"]["ItemsPartnerRowBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing partner_row_block_partner items.
   */
  deleteItemsPartnerRowBlockPartner: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple partner_row_block_partner items at the same time.
   */
  updateItemsPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPartnerRowBlockPartner"][] | components["schemas"]["ItemsPartnerRowBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single partner_row_block_partner item by unique identifier.
   */
  readSingleItemsPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPartnerRowBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing partner_row_block_partner item.
   */
  deleteSingleItemsPartnerRowBlockPartner: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing partner_row_block_partner item.
   */
  updateSingleItemsPartnerRowBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsPartnerRowBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPartnerRowBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_partner_row items.
   */
  readItemsBlockPartnerRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnerRow"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_partner_row item.
   */
  createItemsBlockPartnerRow: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnerRow"][] | components["schemas"]["ItemsBlockPartnerRow"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_partner_row items.
   */
  deleteItemsBlockPartnerRow: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_partner_row items at the same time.
   */
  updateItemsBlockPartnerRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnerRow"][] | components["schemas"]["ItemsBlockPartnerRow"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_partner_row item by unique identifier.
   */
  readSingleItemsBlockPartnerRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnerRow"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_partner_row item.
   */
  deleteSingleItemsBlockPartnerRow: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_partner_row item.
   */
  updateSingleItemsBlockPartnerRow: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnerRow"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnerRow"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_referee items.
   */
  readItemsBlockReferee: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockReferee"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_referee item.
   */
  createItemsBlockReferee: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockReferee"][] | components["schemas"]["ItemsBlockReferee"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_referee items.
   */
  deleteItemsBlockReferee: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_referee items at the same time.
   */
  updateItemsBlockReferee: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockReferee"][] | components["schemas"]["ItemsBlockReferee"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_referee item by unique identifier.
   */
  readSingleItemsBlockReferee: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockReferee"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_referee item.
   */
  deleteSingleItemsBlockReferee: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_referee item.
   */
  updateSingleItemsBlockReferee: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockReferee"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockReferee"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_referee_translations items.
   */
  readItemsBlockRefereeTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRefereeTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_referee_translations item.
   */
  createItemsBlockRefereeTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRefereeTranslations"][] | components["schemas"]["ItemsBlockRefereeTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_referee_translations items.
   */
  deleteItemsBlockRefereeTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_referee_translations items at the same time.
   */
  updateItemsBlockRefereeTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRefereeTranslations"][] | components["schemas"]["ItemsBlockRefereeTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_referee_translations item by unique identifier.
   */
  readSingleItemsBlockRefereeTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRefereeTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_referee_translations item.
   */
  deleteSingleItemsBlockRefereeTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_referee_translations item.
   */
  updateSingleItemsBlockRefereeTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockRefereeTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockRefereeTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film items.
   */
  readItemsFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilm"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film item.
   */
  createItemsFilm: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilm"][] | components["schemas"]["ItemsFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film items.
   */
  deleteItemsFilm: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film items at the same time.
   */
  updateItemsFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilm"][] | components["schemas"]["ItemsFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film item by unique identifier.
   */
  readSingleItemsFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film item.
   */
  deleteSingleItemsFilm: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film item.
   */
  updateSingleItemsFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_actor_film_person items.
   */
  readItemsFilmActorFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmActorFilmPerson"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_actor_film_person item.
   */
  createItemsFilmActorFilmPerson: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmActorFilmPerson"][] | components["schemas"]["ItemsFilmActorFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_actor_film_person items.
   */
  deleteItemsFilmActorFilmPerson: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_actor_film_person items at the same time.
   */
  updateItemsFilmActorFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmActorFilmPerson"][] | components["schemas"]["ItemsFilmActorFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_actor_film_person item by unique identifier.
   */
  readSingleItemsFilmActorFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmActorFilmPerson"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_actor_film_person item.
   */
  deleteSingleItemsFilmActorFilmPerson: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_actor_film_person item.
   */
  updateSingleItemsFilmActorFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmActorFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmActorFilmPerson"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_contact items.
   */
  readItemsBlockContact: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockContact"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_contact item.
   */
  createItemsBlockContact: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockContact"][] | components["schemas"]["ItemsBlockContact"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_contact items.
   */
  deleteItemsBlockContact: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_contact items at the same time.
   */
  updateItemsBlockContact: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockContact"][] | components["schemas"]["ItemsBlockContact"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_contact item by unique identifier.
   */
  readSingleItemsBlockContact: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockContact"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_contact item.
   */
  deleteSingleItemsBlockContact: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_contact item.
   */
  updateSingleItemsBlockContact: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockContact"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockContact"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_article items.
   */
  readItemsBlockArticle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArticle"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_article item.
   */
  createItemsBlockArticle: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArticle"][] | components["schemas"]["ItemsBlockArticle"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_article items.
   */
  deleteItemsBlockArticle: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_article items at the same time.
   */
  updateItemsBlockArticle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArticle"][] | components["schemas"]["ItemsBlockArticle"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_article item by unique identifier.
   */
  readSingleItemsBlockArticle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArticle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_article item.
   */
  deleteSingleItemsBlockArticle: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_article item.
   */
  updateSingleItemsBlockArticle: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArticle"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArticle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_info_stack items.
   */
  readItemsBlockInfoStack: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockInfoStack"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_info_stack item.
   */
  createItemsBlockInfoStack: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockInfoStack"][] | components["schemas"]["ItemsBlockInfoStack"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_info_stack items.
   */
  deleteItemsBlockInfoStack: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_info_stack items at the same time.
   */
  updateItemsBlockInfoStack: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockInfoStack"][] | components["schemas"]["ItemsBlockInfoStack"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_info_stack item by unique identifier.
   */
  readSingleItemsBlockInfoStack: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockInfoStack"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_info_stack item.
   */
  deleteSingleItemsBlockInfoStack: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_info_stack item.
   */
  updateSingleItemsBlockInfoStack: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockInfoStack"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockInfoStack"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_article_translations items.
   */
  readItemsBlockArticleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArticleTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_article_translations item.
   */
  createItemsBlockArticleTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArticleTranslations"][] | components["schemas"]["ItemsBlockArticleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_article_translations items.
   */
  deleteItemsBlockArticleTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_article_translations items at the same time.
   */
  updateItemsBlockArticleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArticleTranslations"][] | components["schemas"]["ItemsBlockArticleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_article_translations item by unique identifier.
   */
  readSingleItemsBlockArticleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArticleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_article_translations item.
   */
  deleteSingleItemsBlockArticleTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_article_translations item.
   */
  updateSingleItemsBlockArticleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockArticleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockArticleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_info_stack_translations items.
   */
  readItemsBlockInfoStackTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockInfoStackTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_info_stack_translations item.
   */
  createItemsBlockInfoStackTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockInfoStackTranslations"][] | components["schemas"]["ItemsBlockInfoStackTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_info_stack_translations items.
   */
  deleteItemsBlockInfoStackTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_info_stack_translations items at the same time.
   */
  updateItemsBlockInfoStackTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockInfoStackTranslations"][] | components["schemas"]["ItemsBlockInfoStackTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_info_stack_translations item by unique identifier.
   */
  readSingleItemsBlockInfoStackTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockInfoStackTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_info_stack_translations item.
   */
  deleteSingleItemsBlockInfoStackTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_info_stack_translations item.
   */
  updateSingleItemsBlockInfoStackTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockInfoStackTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockInfoStackTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_contact_translations items.
   */
  readItemsBlockContactTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockContactTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_contact_translations item.
   */
  createItemsBlockContactTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockContactTranslations"][] | components["schemas"]["ItemsBlockContactTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_contact_translations items.
   */
  deleteItemsBlockContactTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_contact_translations items at the same time.
   */
  updateItemsBlockContactTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockContactTranslations"][] | components["schemas"]["ItemsBlockContactTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_contact_translations item by unique identifier.
   */
  readSingleItemsBlockContactTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockContactTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_contact_translations item.
   */
  deleteSingleItemsBlockContactTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_contact_translations item.
   */
  updateSingleItemsBlockContactTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockContactTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockContactTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_layout_blocks_1_background items.
   */
  readItemsBlockLayoutBlocks1Background: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayoutBlocks1Background"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_layout_blocks_1_background item.
   */
  createItemsBlockLayoutBlocks1Background: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayoutBlocks1Background"][] | components["schemas"]["ItemsBlockLayoutBlocks1Background"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_layout_blocks_1_background items.
   */
  deleteItemsBlockLayoutBlocks1Background: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_layout_blocks_1_background items at the same time.
   */
  updateItemsBlockLayoutBlocks1Background: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayoutBlocks1Background"][] | components["schemas"]["ItemsBlockLayoutBlocks1Background"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_layout_blocks_1_background item by unique identifier.
   */
  readSingleItemsBlockLayoutBlocks1Background: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayoutBlocks1Background"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_layout_blocks_1_background item.
   */
  deleteSingleItemsBlockLayoutBlocks1Background: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_layout_blocks_1_background item.
   */
  updateSingleItemsBlockLayoutBlocks1Background: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLayoutBlocks1Background"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLayoutBlocks1Background"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_lightbox_files items.
   */
  readItemsBlockLightboxFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLightboxFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_lightbox_files item.
   */
  createItemsBlockLightboxFiles: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLightboxFiles"][] | components["schemas"]["ItemsBlockLightboxFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_lightbox_files items.
   */
  deleteItemsBlockLightboxFiles: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_lightbox_files items at the same time.
   */
  updateItemsBlockLightboxFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLightboxFiles"][] | components["schemas"]["ItemsBlockLightboxFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_lightbox_files item by unique identifier.
   */
  readSingleItemsBlockLightboxFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLightboxFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_lightbox_files item.
   */
  deleteSingleItemsBlockLightboxFiles: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_lightbox_files item.
   */
  updateSingleItemsBlockLightboxFiles: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLightboxFiles"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLightboxFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the voting_film items.
   */
  readItemsVotingFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVotingFilm"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new voting_film item.
   */
  createItemsVotingFilm: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVotingFilm"][] | components["schemas"]["ItemsVotingFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing voting_film items.
   */
  deleteItemsVotingFilm: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple voting_film items at the same time.
   */
  updateItemsVotingFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVotingFilm"][] | components["schemas"]["ItemsVotingFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single voting_film item by unique identifier.
   */
  readSingleItemsVotingFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVotingFilm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing voting_film item.
   */
  deleteSingleItemsVotingFilm: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing voting_film item.
   */
  updateSingleItemsVotingFilm: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsVotingFilm"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsVotingFilm"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_partnership_translations items.
   */
  readItemsBlockPartnershipTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnershipTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_partnership_translations item.
   */
  createItemsBlockPartnershipTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnershipTranslations"][] | components["schemas"]["ItemsBlockPartnershipTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_partnership_translations items.
   */
  deleteItemsBlockPartnershipTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_partnership_translations items at the same time.
   */
  updateItemsBlockPartnershipTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnershipTranslations"][] | components["schemas"]["ItemsBlockPartnershipTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_partnership_translations item by unique identifier.
   */
  readSingleItemsBlockPartnershipTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnershipTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_partnership_translations item.
   */
  deleteSingleItemsBlockPartnershipTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_partnership_translations item.
   */
  updateSingleItemsBlockPartnershipTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnershipTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnershipTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_genre_translations items.
   */
  readItemsFilmGenreTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmGenreTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_genre_translations item.
   */
  createItemsFilmGenreTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmGenreTranslations"][] | components["schemas"]["ItemsFilmGenreTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_genre_translations items.
   */
  deleteItemsFilmGenreTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_genre_translations items at the same time.
   */
  updateItemsFilmGenreTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmGenreTranslations"][] | components["schemas"]["ItemsFilmGenreTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_genre_translations item by unique identifier.
   */
  readSingleItemsFilmGenreTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmGenreTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_genre_translations item.
   */
  deleteSingleItemsFilmGenreTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_genre_translations item.
   */
  updateSingleItemsFilmGenreTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmGenreTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmGenreTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_partnership items.
   */
  readItemsBlockPartnership: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnership"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_partnership item.
   */
  createItemsBlockPartnership: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnership"][] | components["schemas"]["ItemsBlockPartnership"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_partnership items.
   */
  deleteItemsBlockPartnership: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_partnership items at the same time.
   */
  updateItemsBlockPartnership: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnership"][] | components["schemas"]["ItemsBlockPartnership"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_partnership item by unique identifier.
   */
  readSingleItemsBlockPartnership: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnership"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_partnership item.
   */
  deleteSingleItemsBlockPartnership: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_partnership item.
   */
  updateSingleItemsBlockPartnership: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnership"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnership"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the festival_block_translations items.
   */
  readItemsFestivalBlockTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFestivalBlockTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new festival_block_translations item.
   */
  createItemsFestivalBlockTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFestivalBlockTranslations"][] | components["schemas"]["ItemsFestivalBlockTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing festival_block_translations items.
   */
  deleteItemsFestivalBlockTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple festival_block_translations items at the same time.
   */
  updateItemsFestivalBlockTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFestivalBlockTranslations"][] | components["schemas"]["ItemsFestivalBlockTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single festival_block_translations item by unique identifier.
   */
  readSingleItemsFestivalBlockTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFestivalBlockTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing festival_block_translations item.
   */
  deleteSingleItemsFestivalBlockTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing festival_block_translations item.
   */
  updateSingleItemsFestivalBlockTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFestivalBlockTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFestivalBlockTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the block_partnership_block_partner items.
   */
  readItemsBlockPartnershipBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnershipBlockPartner"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new block_partnership_block_partner item.
   */
  createItemsBlockPartnershipBlockPartner: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnershipBlockPartner"][] | components["schemas"]["ItemsBlockPartnershipBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing block_partnership_block_partner items.
   */
  deleteItemsBlockPartnershipBlockPartner: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple block_partnership_block_partner items at the same time.
   */
  updateItemsBlockPartnershipBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnershipBlockPartner"][] | components["schemas"]["ItemsBlockPartnershipBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single block_partnership_block_partner item by unique identifier.
   */
  readSingleItemsBlockPartnershipBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnershipBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing block_partnership_block_partner item.
   */
  deleteSingleItemsBlockPartnershipBlockPartner: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing block_partnership_block_partner item.
   */
  updateSingleItemsBlockPartnershipBlockPartner: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPartnershipBlockPartner"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPartnershipBlockPartner"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the festival_block items.
   */
  readItemsFestivalBlock: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFestivalBlock"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new festival_block item.
   */
  createItemsFestivalBlock: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFestivalBlock"][] | components["schemas"]["ItemsFestivalBlock"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing festival_block items.
   */
  deleteItemsFestivalBlock: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple festival_block items at the same time.
   */
  updateItemsFestivalBlock: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFestivalBlock"][] | components["schemas"]["ItemsFestivalBlock"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single festival_block item by unique identifier.
   */
  readSingleItemsFestivalBlock: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFestivalBlock"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing festival_block item.
   */
  deleteSingleItemsFestivalBlock: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing festival_block item.
   */
  updateSingleItemsFestivalBlock: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFestivalBlock"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFestivalBlock"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_genre items.
   */
  readItemsFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmGenre"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_genre item.
   */
  createItemsFilmGenre: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmGenre"][] | components["schemas"]["ItemsFilmGenre"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_genre items.
   */
  deleteItemsFilmGenre: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_genre items at the same time.
   */
  updateItemsFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmGenre"][] | components["schemas"]["ItemsFilmGenre"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_genre item by unique identifier.
   */
  readSingleItemsFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmGenre"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_genre item.
   */
  deleteSingleItemsFilmGenre: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_genre item.
   */
  updateSingleItemsFilmGenre: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmGenre"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmGenre"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_person items.
   */
  readItemsFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmPerson"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_person item.
   */
  createItemsFilmPerson: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmPerson"][] | components["schemas"]["ItemsFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_person items.
   */
  deleteItemsFilmPerson: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_person items at the same time.
   */
  updateItemsFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmPerson"][] | components["schemas"]["ItemsFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_person item by unique identifier.
   */
  readSingleItemsFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmPerson"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_person item.
   */
  deleteSingleItemsFilmPerson: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_person item.
   */
  updateSingleItemsFilmPerson: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmPerson"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmPerson"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_crew_role_translations items.
   */
  readItemsFilmCrewRoleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewRoleTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_crew_role_translations item.
   */
  createItemsFilmCrewRoleTranslations: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewRoleTranslations"][] | components["schemas"]["ItemsFilmCrewRoleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_crew_role_translations items.
   */
  deleteItemsFilmCrewRoleTranslations: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_crew_role_translations items at the same time.
   */
  updateItemsFilmCrewRoleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewRoleTranslations"][] | components["schemas"]["ItemsFilmCrewRoleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_crew_role_translations item by unique identifier.
   */
  readSingleItemsFilmCrewRoleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewRoleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_crew_role_translations item.
   */
  deleteSingleItemsFilmCrewRoleTranslations: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_crew_role_translations item.
   */
  updateSingleItemsFilmCrewRoleTranslations: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewRoleTranslations"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewRoleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * List Items
   * @description List the film_crew_role items.
   */
  readItemsFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewRole"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Create an Item
   * @description Create a new film_crew_role item.
   */
  createItemsFilmCrewRole: {
    parameters: {
      query?: {
        meta?: components["parameters"]["Meta"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewRole"][] | components["schemas"]["ItemsFilmCrewRole"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Delete Multiple Items
   * @description Delete multiple existing film_crew_role items.
   */
  deleteItemsFilmCrewRole: {
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /**
   * Update Multiple Items
   * @description Update multiple film_crew_role items at the same time.
   */
  updateItemsFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        limit?: components["parameters"]["Limit"];
        meta?: components["parameters"]["Meta"];
        offset?: components["parameters"]["Offset"];
        sort?: components["parameters"]["Sort"];
        filter?: components["parameters"]["Filter"];
        search?: components["parameters"]["Search"];
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewRole"][] | components["schemas"]["ItemsFilmCrewRole"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: unknown;
          };
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Retrieve a single film_crew_role item by unique identifier.
   */
  readSingleItemsFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
        version?: components["parameters"]["Version"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewRole"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Delete an Item
   * @description Delete an existing film_crew_role item.
   */
  deleteSingleItemsFilmCrewRole: {
    parameters: {
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: never;
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /**
   * Update an Item
   * @description Update an existing film_crew_role item.
   */
  updateSingleItemsFilmCrewRole: {
    parameters: {
      query?: {
        fields?: components["parameters"]["Fields"];
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** @description Index of the item. */
        id: number | string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ItemsFilmCrewRole"];
      };
    };
    responses: {
      /** @description Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFilmCrewRole"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
}


export type ApiCollections = {
  film_translations: components["schemas"]["ItemsFilmTranslations"][];
  vote_film: components["schemas"]["ItemsVoteFilm"][];
  film_film_genre: components["schemas"]["ItemsFilmFilmGenre"][];
  voting_translations: components["schemas"]["ItemsVotingTranslations"][];
  block_button: components["schemas"]["ItemsBlockButton"][];
  block_divider: components["schemas"]["ItemsBlockDivider"][];
  block_faqs: components["schemas"]["ItemsBlockFaqs"][];
  block_logocloud: components["schemas"]["ItemsBlockLogocloud"][];
  block_hero: components["schemas"]["ItemsBlockHero"][];
  block_html: components["schemas"]["ItemsBlockHTML"][];
  block_step_items: components["schemas"]["ItemsBlockStepItems"][];
  block_quote: components["schemas"]["ItemsBlockQuote"][];
  block_richtext: components["schemas"]["ItemsBlockRichtext"][];
  block_gallery: components["schemas"]["ItemsBlockGallery"][];
  block_form: components["schemas"]["ItemsBlockForm"][];
  block_gallery_files: components["schemas"]["ItemsBlockGalleryFiles"][];
  block_testimonials: components["schemas"]["ItemsBlockTestimonials"][];
  block_team: components["schemas"]["ItemsBlockTeam"][];
  categories: components["schemas"]["ItemsCategories"][];
  inbox: components["schemas"]["ItemsInbox"][];
  globals: components["schemas"]["ItemsGlobals"][];
  block_steps: components["schemas"]["ItemsBlockSteps"][];
  block_video: components["schemas"]["ItemsBlockVideo"][];
  navigation_items: components["schemas"]["ItemsNavigationItems"][];
  navigation: components["schemas"]["ItemsNavigation"][];
  forms: components["schemas"]["ItemsForms"][];
  redirects: components["schemas"]["ItemsRedirects"][];
  team: components["schemas"]["ItemsTeam"][];
  post_gallery_items: components["schemas"]["ItemsPostGalleryItems"][];
  pages_blog: components["schemas"]["ItemsPagesBlog"][];
  block_columns_rows: components["schemas"]["ItemsBlockColumnsRows"][];
  posts: components["schemas"]["ItemsPosts"][];
  block_card: components["schemas"]["ItemsBlockCard"][];
  block_logocloud_logos: components["schemas"]["ItemsBlockLogocloudLogos"][];
  block_testimonial_slider_items: components["schemas"]["ItemsBlockTestimonialSliderItems"][];
  testimonials: components["schemas"]["ItemsTestimonials"][];
  seo: components["schemas"]["ItemsSEO"][];
  pages: components["schemas"]["ItemsPages"][];
  page_blocks: components["schemas"]["ItemsPageBlocks"][];
  block_archive_files: components["schemas"]["ItemsBlockArchiveFiles"][];
  globals_footer_blocks: components["schemas"]["ItemsGlobalsFooterBlocks"][];
  block_layout_blocks_1: components["schemas"]["ItemsBlockLayoutBlocks1"][];
  block_image: components["schemas"]["ItemsBlockImage"][];
  block_archive: components["schemas"]["ItemsBlockArchive"][];
  block_layout: components["schemas"]["ItemsBlockLayout"][];
  block_gap: components["schemas"]["ItemsBlockGap"][];
  languages: components["schemas"]["ItemsLanguages"][];
  block_link: components["schemas"]["ItemsBlockLink"][];
  block_richtext_translations: components["schemas"]["ItemsBlockRichtextTranslations"][];
  block_card_translations: components["schemas"]["ItemsBlockCardTranslations"][];
  block_lightbox: components["schemas"]["ItemsBlockLightbox"][];
  block_link_translations: components["schemas"]["ItemsBlockLinkTranslations"][];
  block_locationanddate: components["schemas"]["ItemsBlockLocationanddate"][];
  block_conditionalcard_translations: components["schemas"]["ItemsBlockConditionalcardTranslations"][];
  block_conditionalcard: components["schemas"]["ItemsBlockConditionalcard"][];
  block_tajenka: components["schemas"]["ItemsBlockTajenka"][];
  block_locationanddate_translations: components["schemas"]["ItemsBlockLocationanddateTranslations"][];
  block_bannerhero: components["schemas"]["ItemsBlockBannerhero"][];
  block_bannerhero_translations: components["schemas"]["ItemsBlockBannerheroTranslations"][];
  block_partner: components["schemas"]["ItemsBlockPartner"][];
  block_festival_poster: components["schemas"]["ItemsBlockFestivalPoster"][];
  block_video_trailer_translations: components["schemas"]["ItemsBlockVideoTrailerTranslations"][];
  block_festival_poster_translations: components["schemas"]["ItemsBlockFestivalPosterTranslations"][];
  block_video_trailer: components["schemas"]["ItemsBlockVideoTrailer"][];
  block_button_translations: components["schemas"]["ItemsBlockButtonTranslations"][];
  film_crew_film_person: components["schemas"]["ItemsFilmCrewFilmPerson"][];
  page_blocks_background: components["schemas"]["ItemsPageBlocksBackground"][];
  gradient: components["schemas"]["ItemsGradient"][];
  block_logo: components["schemas"]["ItemsBlockLogo"][];
  page_blocks_background_1: components["schemas"]["ItemsPageBlocksBackground1"][];
  block_logo_image: components["schemas"]["ItemsBlockLogoImage"][];
  block_countdown_translations: components["schemas"]["ItemsBlockCountdownTranslations"][];
  block_countdown: components["schemas"]["ItemsBlockCountdown"][];
  film_crew_film_person_film_crew_role: components["schemas"]["ItemsFilmCrewFilmPersonFilmCrewRole"][];
  vote: components["schemas"]["ItemsVote"][];
  block_patron_translations: components["schemas"]["ItemsBlockPatronTranslations"][];
  voting: components["schemas"]["ItemsVoting"][];
  block_patron: components["schemas"]["ItemsBlockPatron"][];
  block_festival_footer_translations: components["schemas"]["ItemsBlockFestivalFooterTranslations"][];
  block_festival_footer: components["schemas"]["ItemsBlockFestivalFooter"][];
  block_jury: components["schemas"]["ItemsBlockJury"][];
  block_jury_translations: components["schemas"]["ItemsBlockJuryTranslations"][];
  block_festival_footer_block_social_media: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia"][];
  block_festival_footer_block_social_media_1: components["schemas"]["ItemsBlockFestivalFooterBlockSocialMedia1"][];
  block_image_row: components["schemas"]["ItemsBlockImageRow"][];
  block_image_row_images: components["schemas"]["ItemsBlockImageRowImages"][];
  social: components["schemas"]["ItemsSocial"][];
  block_festival_footer_social: components["schemas"]["ItemsBlockFestivalFooterSocial"][];
  block_image_row_directus_files: components["schemas"]["ItemsBlockImageRowDirectusFiles"][];
  block_image_row_files: components["schemas"]["ItemsBlockImageRowFiles"][];
  block_partner_row_block_partner: components["schemas"]["ItemsBlockPartnerRowBlockPartner"][];
  partner_row_block_partner: components["schemas"]["ItemsPartnerRowBlockPartner"][];
  block_partner_row: components["schemas"]["ItemsBlockPartnerRow"][];
  block_referee: components["schemas"]["ItemsBlockReferee"][];
  block_referee_translations: components["schemas"]["ItemsBlockRefereeTranslations"][];
  film: components["schemas"]["ItemsFilm"][];
  film_actor_film_person: components["schemas"]["ItemsFilmActorFilmPerson"][];
  block_contact: components["schemas"]["ItemsBlockContact"][];
  block_article: components["schemas"]["ItemsBlockArticle"][];
  block_info_stack: components["schemas"]["ItemsBlockInfoStack"][];
  block_article_translations: components["schemas"]["ItemsBlockArticleTranslations"][];
  block_info_stack_translations: components["schemas"]["ItemsBlockInfoStackTranslations"][];
  block_contact_translations: components["schemas"]["ItemsBlockContactTranslations"][];
  block_layout_blocks_1_background: components["schemas"]["ItemsBlockLayoutBlocks1Background"][];
  block_lightbox_files: components["schemas"]["ItemsBlockLightboxFiles"][];
  voting_film: components["schemas"]["ItemsVotingFilm"][];
  block_partnership_translations: components["schemas"]["ItemsBlockPartnershipTranslations"][];
  film_genre_translations: components["schemas"]["ItemsFilmGenreTranslations"][];
  block_partnership: components["schemas"]["ItemsBlockPartnership"][];
  festival_block_translations: components["schemas"]["ItemsFestivalBlockTranslations"][];
  block_partnership_block_partner: components["schemas"]["ItemsBlockPartnershipBlockPartner"][];
  festival_block: components["schemas"]["ItemsFestivalBlock"][];
  film_genre: components["schemas"]["ItemsFilmGenre"][];
  film_person: components["schemas"]["ItemsFilmPerson"][];
  film_crew_role_translations: components["schemas"]["ItemsFilmCrewRoleTranslations"][];
  film_crew_role: components["schemas"]["ItemsFilmCrewRole"][];
};
